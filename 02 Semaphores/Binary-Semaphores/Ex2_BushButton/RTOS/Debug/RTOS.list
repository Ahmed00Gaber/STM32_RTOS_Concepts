
RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c98  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e70  08004e70  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08004e70  08004e70  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e70  08004e70  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e70  08004e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e74  08004e74  00014e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c4  20000018  08004e90  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019dc  08004e90  000219dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000126be  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cd6  00000000  00000000  000326ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  000353d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  000364c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183ca  00000000  00000000  00037460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012478  00000000  00000000  0004f82a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e950  00000000  00000000  00061ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f05f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004594  00000000  00000000  000f0644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d90 	.word	0x08004d90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08004d90 	.word	0x08004d90

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af02      	add	r7, sp, #8
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000156:	4a14      	ldr	r2, [pc, #80]	; (80001a8 <MX_FREERTOS_Init+0x58>)
 8000158:	2101      	movs	r1, #1
 800015a:	2001      	movs	r0, #1
 800015c:	f001 fcbc 	bl	8001ad8 <osSemaphoreNew>
 8000160:	4603      	mov	r3, r0
 8000162:	4a12      	ldr	r2, [pc, #72]	; (80001ac <MX_FREERTOS_Init+0x5c>)
 8000164:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(Task_one, NULL, &Task_1_attributes);
 8000166:	4a12      	ldr	r2, [pc, #72]	; (80001b0 <MX_FREERTOS_Init+0x60>)
 8000168:	2100      	movs	r1, #0
 800016a:	4812      	ldr	r0, [pc, #72]	; (80001b4 <MX_FREERTOS_Init+0x64>)
 800016c:	f001 fbdc 	bl	8001928 <osThreadNew>
 8000170:	4603      	mov	r3, r0
 8000172:	4a11      	ldr	r2, [pc, #68]	; (80001b8 <MX_FREERTOS_Init+0x68>)
 8000174:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(Task_Two, NULL, &Task_2_attributes);
 8000176:	4a11      	ldr	r2, [pc, #68]	; (80001bc <MX_FREERTOS_Init+0x6c>)
 8000178:	2100      	movs	r1, #0
 800017a:	4811      	ldr	r0, [pc, #68]	; (80001c0 <MX_FREERTOS_Init+0x70>)
 800017c:	f001 fbd4 	bl	8001928 <osThreadNew>
 8000180:	4603      	mov	r3, r0
 8000182:	4a10      	ldr	r2, [pc, #64]	; (80001c4 <MX_FREERTOS_Init+0x74>)
 8000184:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  xReturnedAPI = xTaskCreate(
 8000186:	4b10      	ldr	r3, [pc, #64]	; (80001c8 <MX_FREERTOS_Init+0x78>)
 8000188:	9301      	str	r3, [sp, #4]
 800018a:	232d      	movs	r3, #45	; 0x2d
 800018c:	9300      	str	r3, [sp, #0]
 800018e:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <MX_FREERTOS_Init+0x7c>)
 8000190:	2280      	movs	r2, #128	; 0x80
 8000192:	490f      	ldr	r1, [pc, #60]	; (80001d0 <MX_FREERTOS_Init+0x80>)
 8000194:	480f      	ldr	r0, [pc, #60]	; (80001d4 <MX_FREERTOS_Init+0x84>)
 8000196:	f002 ff41 	bl	800301c <xTaskCreate>
 800019a:	4603      	mov	r3, r0
 800019c:	4a0e      	ldr	r2, [pc, #56]	; (80001d8 <MX_FREERTOS_Init+0x88>)
 800019e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001a0:	bf00      	nop
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	08004e34 	.word	0x08004e34
 80001ac:	20000044 	.word	0x20000044
 80001b0:	08004dec 	.word	0x08004dec
 80001b4:	080001dd 	.word	0x080001dd
 80001b8:	2000003c 	.word	0x2000003c
 80001bc:	08004e10 	.word	0x08004e10
 80001c0:	08000201 	.word	0x08000201
 80001c4:	20000040 	.word	0x20000040
 80001c8:	20000038 	.word	0x20000038
 80001cc:	20000000 	.word	0x20000000
 80001d0:	08004dc8 	.word	0x08004dc8
 80001d4:	08000225 	.word	0x08000225
 80001d8:	20000034 	.word	0x20000034

080001dc <Task_one>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_one */
void Task_one(void *argument)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_one */
	uint8_t task1;
  /* Infinite loop */
  for(;;)
  {
	  osDelay(200);
 80001e4:	20c8      	movs	r0, #200	; 0xc8
 80001e6:	f001 fc49 	bl	8001a7c <osDelay>
	  task1++;//increase variable each time it join Task1
 80001ea:	7bfb      	ldrb	r3, [r7, #15]
 80001ec:	3301      	adds	r3, #1
 80001ee:	73fb      	strb	r3, [r7, #15]
	  osSemaphoreRelease(myBinarySem01Handle);
 80001f0:	4b02      	ldr	r3, [pc, #8]	; (80001fc <Task_one+0x20>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4618      	mov	r0, r3
 80001f6:	f001 fd71 	bl	8001cdc <osSemaphoreRelease>
	  osDelay(200);
 80001fa:	e7f3      	b.n	80001e4 <Task_one+0x8>
 80001fc:	20000044 	.word	0x20000044

08000200 <Task_Two>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Two */
void Task_Two(void *argument)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Two */
	uint8_t task2;
  /* Infinite loop */
  for(;;)
  {
  osSemaphoreAcquire(myBinarySem01Handle,4000);
 8000208:	4b05      	ldr	r3, [pc, #20]	; (8000220 <Task_Two+0x20>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000210:	4618      	mov	r0, r3
 8000212:	f001 fcfd 	bl	8001c10 <osSemaphoreAcquire>
	task2++;
 8000216:	7bfb      	ldrb	r3, [r7, #15]
 8000218:	3301      	adds	r3, #1
 800021a:	73fb      	strb	r3, [r7, #15]
  osSemaphoreAcquire(myBinarySem01Handle,4000);
 800021c:	e7f4      	b.n	8000208 <Task_Two+0x8>
 800021e:	bf00      	nop
 8000220:	20000044 	.word	0x20000044

08000224 <Task_one_API>:
  /* USER CODE END Task_Two */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void Task_one_API(void *argument){
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
	uint32_t local_ID = (((student_t *) argument)->ID);
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	60fb      	str	r3, [r7, #12]
	uint32_t local_age = (((student_t *) argument)->age);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	685b      	ldr	r3, [r3, #4]
 8000236:	60bb      	str	r3, [r7, #8]
	for(;;)
 8000238:	e7fe      	b.n	8000238 <Task_one_API+0x14>
	...

0800023c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 800024a:	605a      	str	r2, [r3, #4]
 800024c:	609a      	str	r2, [r3, #8]
 800024e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000250:	4b31      	ldr	r3, [pc, #196]	; (8000318 <MX_GPIO_Init+0xdc>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a30      	ldr	r2, [pc, #192]	; (8000318 <MX_GPIO_Init+0xdc>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b2e      	ldr	r3, [pc, #184]	; (8000318 <MX_GPIO_Init+0xdc>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0320 	and.w	r3, r3, #32
 8000264:	60fb      	str	r3, [r7, #12]
 8000266:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000268:	4b2b      	ldr	r3, [pc, #172]	; (8000318 <MX_GPIO_Init+0xdc>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a2a      	ldr	r2, [pc, #168]	; (8000318 <MX_GPIO_Init+0xdc>)
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b28      	ldr	r3, [pc, #160]	; (8000318 <MX_GPIO_Init+0xdc>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0304 	and.w	r3, r3, #4
 800027c:	60bb      	str	r3, [r7, #8]
 800027e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000280:	4b25      	ldr	r3, [pc, #148]	; (8000318 <MX_GPIO_Init+0xdc>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a24      	ldr	r2, [pc, #144]	; (8000318 <MX_GPIO_Init+0xdc>)
 8000286:	f043 0308 	orr.w	r3, r3, #8
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b22      	ldr	r3, [pc, #136]	; (8000318 <MX_GPIO_Init+0xdc>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0308 	and.w	r3, r3, #8
 8000294:	607b      	str	r3, [r7, #4]
 8000296:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	21c0      	movs	r1, #192	; 0xc0
 800029c:	481f      	ldr	r0, [pc, #124]	; (800031c <MX_GPIO_Init+0xe0>)
 800029e:	f000 fc3d 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80002a2:	2200      	movs	r2, #0
 80002a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002a8:	481d      	ldr	r0, [pc, #116]	; (8000320 <MX_GPIO_Init+0xe4>)
 80002aa:	f000 fc37 	bl	8000b1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002ae:	2301      	movs	r3, #1
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002b2:	4b1c      	ldr	r3, [pc, #112]	; (8000324 <MX_GPIO_Init+0xe8>)
 80002b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	4619      	mov	r1, r3
 80002c0:	4816      	ldr	r0, [pc, #88]	; (800031c <MX_GPIO_Init+0xe0>)
 80002c2:	f000 faaf 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002c6:	23c0      	movs	r3, #192	; 0xc0
 80002c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ca:	2301      	movs	r3, #1
 80002cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ce:	2300      	movs	r3, #0
 80002d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d2:	2302      	movs	r3, #2
 80002d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002d6:	f107 0310 	add.w	r3, r7, #16
 80002da:	4619      	mov	r1, r3
 80002dc:	480f      	ldr	r0, [pc, #60]	; (800031c <MX_GPIO_Init+0xe0>)
 80002de:	f000 faa1 	bl	8000824 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80002e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e8:	2301      	movs	r3, #1
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002ec:	2300      	movs	r3, #0
 80002ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f0:	2302      	movs	r3, #2
 80002f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002f4:	f107 0310 	add.w	r3, r7, #16
 80002f8:	4619      	mov	r1, r3
 80002fa:	4809      	ldr	r0, [pc, #36]	; (8000320 <MX_GPIO_Init+0xe4>)
 80002fc:	f000 fa92 	bl	8000824 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	2105      	movs	r1, #5
 8000304:	2006      	movs	r0, #6
 8000306:	f000 fa62 	bl	80007ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800030a:	2006      	movs	r0, #6
 800030c:	f000 fa7b 	bl	8000806 <HAL_NVIC_EnableIRQ>

}
 8000310:	bf00      	nop
 8000312:	3720      	adds	r7, #32
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40021000 	.word	0x40021000
 800031c:	40010800 	.word	0x40010800
 8000320:	40010c00 	.word	0x40010c00
 8000324:	10110000 	.word	0x10110000

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032c:	f000 f968 	bl	8000600 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000330:	f000 f809 	bl	8000346 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000334:	f7ff ff82 	bl	800023c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000338:	f001 fa90 	bl	800185c <osKernelInitialize>
  MX_FREERTOS_Init();
 800033c:	f7ff ff08 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000340:	f001 fabe 	bl	80018c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000344:	e7fe      	b.n	8000344 <main+0x1c>

08000346 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	b090      	sub	sp, #64	; 0x40
 800034a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034c:	f107 0318 	add.w	r3, r7, #24
 8000350:	2228      	movs	r2, #40	; 0x28
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f004 fd13 	bl	8004d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2200      	movs	r2, #0
 800035e:	601a      	str	r2, [r3, #0]
 8000360:	605a      	str	r2, [r3, #4]
 8000362:	609a      	str	r2, [r3, #8]
 8000364:	60da      	str	r2, [r3, #12]
 8000366:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000368:	2302      	movs	r3, #2
 800036a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036c:	2301      	movs	r3, #1
 800036e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000370:	2310      	movs	r3, #16
 8000372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000374:	2300      	movs	r3, #0
 8000376:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	f107 0318 	add.w	r3, r7, #24
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fc07 	bl	8000b90 <HAL_RCC_OscConfig>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d001      	beq.n	800038c <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000388:	f000 f827 	bl	80003da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800038c:	230f      	movs	r3, #15
 800038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000390:	2300      	movs	r3, #0
 8000392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	2300      	movs	r3, #0
 8000396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000398:	2300      	movs	r3, #0
 800039a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f000 fe75 	bl	8001094 <HAL_RCC_ClockConfig>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003b0:	f000 f813 	bl	80003da <Error_Handler>
  }
}
 80003b4:	bf00      	nop
 80003b6:	3740      	adds	r7, #64	; 0x40
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80003cc:	d101      	bne.n	80003d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003ce:	f000 f92d 	bl	800062c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}

080003da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003da:	b480      	push	{r7}
 80003dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003de:	b672      	cpsid	i
}
 80003e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <Error_Handler+0x8>

080003e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b084      	sub	sp, #16
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ea:	4b18      	ldr	r3, [pc, #96]	; (800044c <HAL_MspInit+0x68>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a17      	ldr	r2, [pc, #92]	; (800044c <HAL_MspInit+0x68>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <HAL_MspInit+0x68>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000402:	4b12      	ldr	r3, [pc, #72]	; (800044c <HAL_MspInit+0x68>)
 8000404:	69db      	ldr	r3, [r3, #28]
 8000406:	4a11      	ldr	r2, [pc, #68]	; (800044c <HAL_MspInit+0x68>)
 8000408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800040c:	61d3      	str	r3, [r2, #28]
 800040e:	4b0f      	ldr	r3, [pc, #60]	; (800044c <HAL_MspInit+0x68>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800041a:	2200      	movs	r2, #0
 800041c:	210f      	movs	r1, #15
 800041e:	f06f 0001 	mvn.w	r0, #1
 8000422:	f000 f9d4 	bl	80007ce <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <HAL_MspInit+0x6c>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	4a04      	ldr	r2, [pc, #16]	; (8000450 <HAL_MspInit+0x6c>)
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000
 8000450:	40010000 	.word	0x40010000

08000454 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b08e      	sub	sp, #56	; 0x38
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800045c:	2300      	movs	r3, #0
 800045e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000460:	2300      	movs	r3, #0
 8000462:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000464:	2300      	movs	r3, #0
 8000466:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800046a:	4b34      	ldr	r3, [pc, #208]	; (800053c <HAL_InitTick+0xe8>)
 800046c:	69db      	ldr	r3, [r3, #28]
 800046e:	4a33      	ldr	r2, [pc, #204]	; (800053c <HAL_InitTick+0xe8>)
 8000470:	f043 0301 	orr.w	r3, r3, #1
 8000474:	61d3      	str	r3, [r2, #28]
 8000476:	4b31      	ldr	r3, [pc, #196]	; (800053c <HAL_InitTick+0xe8>)
 8000478:	69db      	ldr	r3, [r3, #28]
 800047a:	f003 0301 	and.w	r3, r3, #1
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000482:	f107 0210 	add.w	r2, r7, #16
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	4611      	mov	r1, r2
 800048c:	4618      	mov	r0, r3
 800048e:	f000 ff5d 	bl	800134c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000492:	6a3b      	ldr	r3, [r7, #32]
 8000494:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000498:	2b00      	cmp	r3, #0
 800049a:	d103      	bne.n	80004a4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800049c:	f000 ff42 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
 80004a0:	6378      	str	r0, [r7, #52]	; 0x34
 80004a2:	e004      	b.n	80004ae <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004a4:	f000 ff3e 	bl	8001324 <HAL_RCC_GetPCLK1Freq>
 80004a8:	4603      	mov	r3, r0
 80004aa:	005b      	lsls	r3, r3, #1
 80004ac:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004b0:	4a23      	ldr	r2, [pc, #140]	; (8000540 <HAL_InitTick+0xec>)
 80004b2:	fba2 2303 	umull	r2, r3, r2, r3
 80004b6:	0c9b      	lsrs	r3, r3, #18
 80004b8:	3b01      	subs	r3, #1
 80004ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80004bc:	4b21      	ldr	r3, [pc, #132]	; (8000544 <HAL_InitTick+0xf0>)
 80004be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80004c4:	4b1f      	ldr	r3, [pc, #124]	; (8000544 <HAL_InitTick+0xf0>)
 80004c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004ca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <HAL_InitTick+0xf0>)
 80004ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004d0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80004d2:	4b1c      	ldr	r3, [pc, #112]	; (8000544 <HAL_InitTick+0xf0>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <HAL_InitTick+0xf0>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <HAL_InitTick+0xf0>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80004e4:	4817      	ldr	r0, [pc, #92]	; (8000544 <HAL_InitTick+0xf0>)
 80004e6:	f000 ff7f 	bl	80013e8 <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80004f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d11b      	bne.n	8000530 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80004f8:	4812      	ldr	r0, [pc, #72]	; (8000544 <HAL_InitTick+0xf0>)
 80004fa:	f000 ffcd 	bl	8001498 <HAL_TIM_Base_Start_IT>
 80004fe:	4603      	mov	r3, r0
 8000500:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000504:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800050c:	201c      	movs	r0, #28
 800050e:	f000 f97a 	bl	8000806 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b0f      	cmp	r3, #15
 8000516:	d808      	bhi.n	800052a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000518:	2200      	movs	r2, #0
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	201c      	movs	r0, #28
 800051e:	f000 f956 	bl	80007ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000522:	4a09      	ldr	r2, [pc, #36]	; (8000548 <HAL_InitTick+0xf4>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	e002      	b.n	8000530 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000530:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000534:	4618      	mov	r0, r3
 8000536:	3738      	adds	r7, #56	; 0x38
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	431bde83 	.word	0x431bde83
 8000544:	20000048 	.word	0x20000048
 8000548:	2000000c 	.word	0x2000000c

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr
	...

08000578 <EXTI0_IRQHandler>:
/**
  * @brief This function handles EXTI line0 interrupt.
  */
extern osSemaphoreId_t myBinarySem01Handle;
void EXTI0_IRQHandler(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800057c:	2001      	movs	r0, #1
 800057e:	f000 fae5 	bl	8000b4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  osSemaphoreRelease(myBinarySem01Handle);
 8000582:	4b03      	ldr	r3, [pc, #12]	; (8000590 <EXTI0_IRQHandler+0x18>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fba8 	bl	8001cdc <osSemaphoreRelease>
  /* USER CODE END EXTI0_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	20000044 	.word	0x20000044

08000594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <TIM2_IRQHandler+0x10>)
 800059a:	f000 ffc9 	bl	8001530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20000048 	.word	0x20000048

080005a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005b4:	f7ff fff8 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005b8:	480b      	ldr	r0, [pc, #44]	; (80005e8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005ba:	490c      	ldr	r1, [pc, #48]	; (80005ec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005bc:	4a0c      	ldr	r2, [pc, #48]	; (80005f0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c0:	e002      	b.n	80005c8 <LoopCopyDataInit>

080005c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005c6:	3304      	adds	r3, #4

080005c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005cc:	d3f9      	bcc.n	80005c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ce:	4a09      	ldr	r2, [pc, #36]	; (80005f4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005d0:	4c09      	ldr	r4, [pc, #36]	; (80005f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005d4:	e001      	b.n	80005da <LoopFillZerobss>

080005d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005d8:	3204      	adds	r2, #4

080005da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005dc:	d3fb      	bcc.n	80005d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005de:	f004 fb9d 	bl	8004d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005e2:	f7ff fea1 	bl	8000328 <main>
  bx lr
 80005e6:	4770      	bx	lr
  ldr r0, =_sdata
 80005e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005ec:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80005f0:	08004e78 	.word	0x08004e78
  ldr r2, =_sbss
 80005f4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80005f8:	200019dc 	.word	0x200019dc

080005fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005fc:	e7fe      	b.n	80005fc <ADC1_2_IRQHandler>
	...

08000600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <HAL_Init+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a07      	ldr	r2, [pc, #28]	; (8000628 <HAL_Init+0x28>)
 800060a:	f043 0310 	orr.w	r3, r3, #16
 800060e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000610:	2003      	movs	r0, #3
 8000612:	f000 f8d1 	bl	80007b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000616:	200f      	movs	r0, #15
 8000618:	f7ff ff1c 	bl	8000454 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800061c:	f7ff fee2 	bl	80003e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40022000 	.word	0x40022000

0800062c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000630:	4b05      	ldr	r3, [pc, #20]	; (8000648 <HAL_IncTick+0x1c>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	461a      	mov	r2, r3
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_IncTick+0x20>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4413      	add	r3, r2
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x20>)
 800063e:	6013      	str	r3, [r2, #0]
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	20000010 	.word	0x20000010
 800064c:	20000090 	.word	0x20000090

08000650 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return uwTick;
 8000654:	4b02      	ldr	r3, [pc, #8]	; (8000660 <HAL_GetTick+0x10>)
 8000656:	681b      	ldr	r3, [r3, #0]
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	20000090 	.word	0x20000090

08000664 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	f003 0307 	and.w	r3, r3, #7
 8000672:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000674:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000676:	68db      	ldr	r3, [r3, #12]
 8000678:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800067a:	68ba      	ldr	r2, [r7, #8]
 800067c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800068c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000696:	4a04      	ldr	r2, [pc, #16]	; (80006a8 <__NVIC_SetPriorityGrouping+0x44>)
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	60d3      	str	r3, [r2, #12]
}
 800069c:	bf00      	nop
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b0:	4b04      	ldr	r3, [pc, #16]	; (80006c4 <__NVIC_GetPriorityGrouping+0x18>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	0a1b      	lsrs	r3, r3, #8
 80006b6:	f003 0307 	and.w	r3, r3, #7
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	46bd      	mov	sp, r7
 80006be:	bc80      	pop	{r7}
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	e000ed00 	.word	0xe000ed00

080006c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b083      	sub	sp, #12
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	db0b      	blt.n	80006f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	f003 021f 	and.w	r2, r3, #31
 80006e0:	4906      	ldr	r1, [pc, #24]	; (80006fc <__NVIC_EnableIRQ+0x34>)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	095b      	lsrs	r3, r3, #5
 80006e8:	2001      	movs	r0, #1
 80006ea:	fa00 f202 	lsl.w	r2, r0, r2
 80006ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bc80      	pop	{r7}
 80006fa:	4770      	bx	lr
 80006fc:	e000e100 	.word	0xe000e100

08000700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	6039      	str	r1, [r7, #0]
 800070a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800070c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000710:	2b00      	cmp	r3, #0
 8000712:	db0a      	blt.n	800072a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	490c      	ldr	r1, [pc, #48]	; (800074c <__NVIC_SetPriority+0x4c>)
 800071a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071e:	0112      	lsls	r2, r2, #4
 8000720:	b2d2      	uxtb	r2, r2
 8000722:	440b      	add	r3, r1
 8000724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000728:	e00a      	b.n	8000740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4908      	ldr	r1, [pc, #32]	; (8000750 <__NVIC_SetPriority+0x50>)
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	f003 030f 	and.w	r3, r3, #15
 8000736:	3b04      	subs	r3, #4
 8000738:	0112      	lsls	r2, r2, #4
 800073a:	b2d2      	uxtb	r2, r2
 800073c:	440b      	add	r3, r1
 800073e:	761a      	strb	r2, [r3, #24]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	e000e100 	.word	0xe000e100
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000754:	b480      	push	{r7}
 8000756:	b089      	sub	sp, #36	; 0x24
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f003 0307 	and.w	r3, r3, #7
 8000766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000768:	69fb      	ldr	r3, [r7, #28]
 800076a:	f1c3 0307 	rsb	r3, r3, #7
 800076e:	2b04      	cmp	r3, #4
 8000770:	bf28      	it	cs
 8000772:	2304      	movcs	r3, #4
 8000774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	3304      	adds	r3, #4
 800077a:	2b06      	cmp	r3, #6
 800077c:	d902      	bls.n	8000784 <NVIC_EncodePriority+0x30>
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3b03      	subs	r3, #3
 8000782:	e000      	b.n	8000786 <NVIC_EncodePriority+0x32>
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000788:	f04f 32ff 	mov.w	r2, #4294967295
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	fa02 f303 	lsl.w	r3, r2, r3
 8000792:	43da      	mvns	r2, r3
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	401a      	ands	r2, r3
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800079c:	f04f 31ff 	mov.w	r1, #4294967295
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa01 f303 	lsl.w	r3, r1, r3
 80007a6:	43d9      	mvns	r1, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ac:	4313      	orrs	r3, r2
         );
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3724      	adds	r7, #36	; 0x24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007c0:	6878      	ldr	r0, [r7, #4]
 80007c2:	f7ff ff4f 	bl	8000664 <__NVIC_SetPriorityGrouping>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b086      	sub	sp, #24
 80007d2:	af00      	add	r7, sp, #0
 80007d4:	4603      	mov	r3, r0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607a      	str	r2, [r7, #4]
 80007da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007e0:	f7ff ff64 	bl	80006ac <__NVIC_GetPriorityGrouping>
 80007e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	68b9      	ldr	r1, [r7, #8]
 80007ea:	6978      	ldr	r0, [r7, #20]
 80007ec:	f7ff ffb2 	bl	8000754 <NVIC_EncodePriority>
 80007f0:	4602      	mov	r2, r0
 80007f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f6:	4611      	mov	r1, r2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff81 	bl	8000700 <__NVIC_SetPriority>
}
 80007fe:	bf00      	nop
 8000800:	3718      	adds	r7, #24
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff57 	bl	80006c8 <__NVIC_EnableIRQ>
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
	...

08000824 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000824:	b480      	push	{r7}
 8000826:	b08b      	sub	sp, #44	; 0x2c
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000832:	2300      	movs	r3, #0
 8000834:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000836:	e161      	b.n	8000afc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000838:	2201      	movs	r2, #1
 800083a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	69fa      	ldr	r2, [r7, #28]
 8000848:	4013      	ands	r3, r2
 800084a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	429a      	cmp	r2, r3
 8000852:	f040 8150 	bne.w	8000af6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4a97      	ldr	r2, [pc, #604]	; (8000ab8 <HAL_GPIO_Init+0x294>)
 800085c:	4293      	cmp	r3, r2
 800085e:	d05e      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 8000860:	4a95      	ldr	r2, [pc, #596]	; (8000ab8 <HAL_GPIO_Init+0x294>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d875      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 8000866:	4a95      	ldr	r2, [pc, #596]	; (8000abc <HAL_GPIO_Init+0x298>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d058      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 800086c:	4a93      	ldr	r2, [pc, #588]	; (8000abc <HAL_GPIO_Init+0x298>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d86f      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 8000872:	4a93      	ldr	r2, [pc, #588]	; (8000ac0 <HAL_GPIO_Init+0x29c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d052      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 8000878:	4a91      	ldr	r2, [pc, #580]	; (8000ac0 <HAL_GPIO_Init+0x29c>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d869      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 800087e:	4a91      	ldr	r2, [pc, #580]	; (8000ac4 <HAL_GPIO_Init+0x2a0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d04c      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 8000884:	4a8f      	ldr	r2, [pc, #572]	; (8000ac4 <HAL_GPIO_Init+0x2a0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d863      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 800088a:	4a8f      	ldr	r2, [pc, #572]	; (8000ac8 <HAL_GPIO_Init+0x2a4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d046      	beq.n	800091e <HAL_GPIO_Init+0xfa>
 8000890:	4a8d      	ldr	r2, [pc, #564]	; (8000ac8 <HAL_GPIO_Init+0x2a4>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d85d      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 8000896:	2b12      	cmp	r3, #18
 8000898:	d82a      	bhi.n	80008f0 <HAL_GPIO_Init+0xcc>
 800089a:	2b12      	cmp	r3, #18
 800089c:	d859      	bhi.n	8000952 <HAL_GPIO_Init+0x12e>
 800089e:	a201      	add	r2, pc, #4	; (adr r2, 80008a4 <HAL_GPIO_Init+0x80>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	0800091f 	.word	0x0800091f
 80008a8:	080008f9 	.word	0x080008f9
 80008ac:	0800090b 	.word	0x0800090b
 80008b0:	0800094d 	.word	0x0800094d
 80008b4:	08000953 	.word	0x08000953
 80008b8:	08000953 	.word	0x08000953
 80008bc:	08000953 	.word	0x08000953
 80008c0:	08000953 	.word	0x08000953
 80008c4:	08000953 	.word	0x08000953
 80008c8:	08000953 	.word	0x08000953
 80008cc:	08000953 	.word	0x08000953
 80008d0:	08000953 	.word	0x08000953
 80008d4:	08000953 	.word	0x08000953
 80008d8:	08000953 	.word	0x08000953
 80008dc:	08000953 	.word	0x08000953
 80008e0:	08000953 	.word	0x08000953
 80008e4:	08000953 	.word	0x08000953
 80008e8:	08000901 	.word	0x08000901
 80008ec:	08000915 	.word	0x08000915
 80008f0:	4a76      	ldr	r2, [pc, #472]	; (8000acc <HAL_GPIO_Init+0x2a8>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d013      	beq.n	800091e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008f6:	e02c      	b.n	8000952 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e029      	b.n	8000954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	3304      	adds	r3, #4
 8000906:	623b      	str	r3, [r7, #32]
          break;
 8000908:	e024      	b.n	8000954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	68db      	ldr	r3, [r3, #12]
 800090e:	3308      	adds	r3, #8
 8000910:	623b      	str	r3, [r7, #32]
          break;
 8000912:	e01f      	b.n	8000954 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	330c      	adds	r3, #12
 800091a:	623b      	str	r3, [r7, #32]
          break;
 800091c:	e01a      	b.n	8000954 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d102      	bne.n	800092c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000926:	2304      	movs	r3, #4
 8000928:	623b      	str	r3, [r7, #32]
          break;
 800092a:	e013      	b.n	8000954 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d105      	bne.n	8000940 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000934:	2308      	movs	r3, #8
 8000936:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	69fa      	ldr	r2, [r7, #28]
 800093c:	611a      	str	r2, [r3, #16]
          break;
 800093e:	e009      	b.n	8000954 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000940:	2308      	movs	r3, #8
 8000942:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	615a      	str	r2, [r3, #20]
          break;
 800094a:	e003      	b.n	8000954 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
          break;
 8000950:	e000      	b.n	8000954 <HAL_GPIO_Init+0x130>
          break;
 8000952:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	2bff      	cmp	r3, #255	; 0xff
 8000958:	d801      	bhi.n	800095e <HAL_GPIO_Init+0x13a>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	e001      	b.n	8000962 <HAL_GPIO_Init+0x13e>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3304      	adds	r3, #4
 8000962:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000964:	69bb      	ldr	r3, [r7, #24]
 8000966:	2bff      	cmp	r3, #255	; 0xff
 8000968:	d802      	bhi.n	8000970 <HAL_GPIO_Init+0x14c>
 800096a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	e002      	b.n	8000976 <HAL_GPIO_Init+0x152>
 8000970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000972:	3b08      	subs	r3, #8
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	210f      	movs	r1, #15
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	401a      	ands	r2, r3
 8000988:	6a39      	ldr	r1, [r7, #32]
 800098a:	693b      	ldr	r3, [r7, #16]
 800098c:	fa01 f303 	lsl.w	r3, r1, r3
 8000990:	431a      	orrs	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f000 80a9 	beq.w	8000af6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009a4:	4b4a      	ldr	r3, [pc, #296]	; (8000ad0 <HAL_GPIO_Init+0x2ac>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a49      	ldr	r2, [pc, #292]	; (8000ad0 <HAL_GPIO_Init+0x2ac>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	4b47      	ldr	r3, [pc, #284]	; (8000ad0 <HAL_GPIO_Init+0x2ac>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009bc:	4a45      	ldr	r2, [pc, #276]	; (8000ad4 <HAL_GPIO_Init+0x2b0>)
 80009be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c0:	089b      	lsrs	r3, r3, #2
 80009c2:	3302      	adds	r3, #2
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	f003 0303 	and.w	r3, r3, #3
 80009d0:	009b      	lsls	r3, r3, #2
 80009d2:	220f      	movs	r2, #15
 80009d4:	fa02 f303 	lsl.w	r3, r2, r3
 80009d8:	43db      	mvns	r3, r3
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <HAL_GPIO_Init+0x2b4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00d      	beq.n	8000a04 <HAL_GPIO_Init+0x1e0>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a3c      	ldr	r2, [pc, #240]	; (8000adc <HAL_GPIO_Init+0x2b8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d007      	beq.n	8000a00 <HAL_GPIO_Init+0x1dc>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a3b      	ldr	r2, [pc, #236]	; (8000ae0 <HAL_GPIO_Init+0x2bc>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d101      	bne.n	80009fc <HAL_GPIO_Init+0x1d8>
 80009f8:	2302      	movs	r3, #2
 80009fa:	e004      	b.n	8000a06 <HAL_GPIO_Init+0x1e2>
 80009fc:	2303      	movs	r3, #3
 80009fe:	e002      	b.n	8000a06 <HAL_GPIO_Init+0x1e2>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <HAL_GPIO_Init+0x1e2>
 8000a04:	2300      	movs	r3, #0
 8000a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a08:	f002 0203 	and.w	r2, r2, #3
 8000a0c:	0092      	lsls	r2, r2, #2
 8000a0e:	4093      	lsls	r3, r2
 8000a10:	68fa      	ldr	r2, [r7, #12]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a16:	492f      	ldr	r1, [pc, #188]	; (8000ad4 <HAL_GPIO_Init+0x2b0>)
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d006      	beq.n	8000a3e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a30:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	492b      	ldr	r1, [pc, #172]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	608b      	str	r3, [r1, #8]
 8000a3c:	e006      	b.n	8000a4c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a40:	689a      	ldr	r2, [r3, #8]
 8000a42:	69bb      	ldr	r3, [r7, #24]
 8000a44:	43db      	mvns	r3, r3
 8000a46:	4927      	ldr	r1, [pc, #156]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a48:	4013      	ands	r3, r2
 8000a4a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d006      	beq.n	8000a66 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	4921      	ldr	r1, [pc, #132]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a5e:	69bb      	ldr	r3, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	60cb      	str	r3, [r1, #12]
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a68:	68da      	ldr	r2, [r3, #12]
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	491d      	ldr	r1, [pc, #116]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a70:	4013      	ands	r3, r2
 8000a72:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d006      	beq.n	8000a8e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	4917      	ldr	r1, [pc, #92]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	604b      	str	r3, [r1, #4]
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a90:	685a      	ldr	r2, [r3, #4]
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	43db      	mvns	r3, r3
 8000a96:	4913      	ldr	r1, [pc, #76]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000a98:	4013      	ands	r3, r2
 8000a9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d01f      	beq.n	8000ae8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <HAL_GPIO_Init+0x2c0>)
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	600b      	str	r3, [r1, #0]
 8000ab4:	e01f      	b.n	8000af6 <HAL_GPIO_Init+0x2d2>
 8000ab6:	bf00      	nop
 8000ab8:	10320000 	.word	0x10320000
 8000abc:	10310000 	.word	0x10310000
 8000ac0:	10220000 	.word	0x10220000
 8000ac4:	10210000 	.word	0x10210000
 8000ac8:	10120000 	.word	0x10120000
 8000acc:	10110000 	.word	0x10110000
 8000ad0:	40021000 	.word	0x40021000
 8000ad4:	40010000 	.word	0x40010000
 8000ad8:	40010800 	.word	0x40010800
 8000adc:	40010c00 	.word	0x40010c00
 8000ae0:	40011000 	.word	0x40011000
 8000ae4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <HAL_GPIO_Init+0x2f4>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	4909      	ldr	r1, [pc, #36]	; (8000b18 <HAL_GPIO_Init+0x2f4>)
 8000af2:	4013      	ands	r3, r2
 8000af4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	3301      	adds	r3, #1
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	fa22 f303 	lsr.w	r3, r2, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	f47f ae96 	bne.w	8000838 <HAL_GPIO_Init+0x14>
  }
}
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	372c      	adds	r7, #44	; 0x2c
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40010400 	.word	0x40010400

08000b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	460b      	mov	r3, r1
 8000b26:	807b      	strh	r3, [r7, #2]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b2c:	787b      	ldrb	r3, [r7, #1]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b32:	887a      	ldrh	r2, [r7, #2]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b38:	e003      	b.n	8000b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	041a      	lsls	r2, r3, #16
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	611a      	str	r2, [r3, #16]
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000b56:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d006      	beq.n	8000b70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b68:	88fb      	ldrh	r3, [r7, #6]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f806 	bl	8000b7c <HAL_GPIO_EXTI_Callback>
  }
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40010400 	.word	0x40010400

08000b7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d101      	bne.n	8000ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	e272      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f000 8087 	beq.w	8000cbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bb0:	4b92      	ldr	r3, [pc, #584]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 030c 	and.w	r3, r3, #12
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d00c      	beq.n	8000bd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bbc:	4b8f      	ldr	r3, [pc, #572]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	f003 030c 	and.w	r3, r3, #12
 8000bc4:	2b08      	cmp	r3, #8
 8000bc6:	d112      	bne.n	8000bee <HAL_RCC_OscConfig+0x5e>
 8000bc8:	4b8c      	ldr	r3, [pc, #560]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd4:	d10b      	bne.n	8000bee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd6:	4b89      	ldr	r3, [pc, #548]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d06c      	beq.n	8000cbc <HAL_RCC_OscConfig+0x12c>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d168      	bne.n	8000cbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	e24c      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf6:	d106      	bne.n	8000c06 <HAL_RCC_OscConfig+0x76>
 8000bf8:	4b80      	ldr	r3, [pc, #512]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a7f      	ldr	r2, [pc, #508]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	e02e      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10c      	bne.n	8000c28 <HAL_RCC_OscConfig+0x98>
 8000c0e:	4b7b      	ldr	r3, [pc, #492]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a7a      	ldr	r2, [pc, #488]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c18:	6013      	str	r3, [r2, #0]
 8000c1a:	4b78      	ldr	r3, [pc, #480]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4a77      	ldr	r2, [pc, #476]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	e01d      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c30:	d10c      	bne.n	8000c4c <HAL_RCC_OscConfig+0xbc>
 8000c32:	4b72      	ldr	r3, [pc, #456]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a71      	ldr	r2, [pc, #452]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c3c:	6013      	str	r3, [r2, #0]
 8000c3e:	4b6f      	ldr	r3, [pc, #444]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a6e      	ldr	r2, [pc, #440]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c48:	6013      	str	r3, [r2, #0]
 8000c4a:	e00b      	b.n	8000c64 <HAL_RCC_OscConfig+0xd4>
 8000c4c:	4b6b      	ldr	r3, [pc, #428]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a6a      	ldr	r2, [pc, #424]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	4b68      	ldr	r3, [pc, #416]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a67      	ldr	r2, [pc, #412]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d013      	beq.n	8000c94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c6c:	f7ff fcf0 	bl	8000650 <HAL_GetTick>
 8000c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	e008      	b.n	8000c86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fcec 	bl	8000650 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	2b64      	cmp	r3, #100	; 0x64
 8000c80:	d901      	bls.n	8000c86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c82:	2303      	movs	r3, #3
 8000c84:	e200      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c86:	4b5d      	ldr	r3, [pc, #372]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d0f0      	beq.n	8000c74 <HAL_RCC_OscConfig+0xe4>
 8000c92:	e014      	b.n	8000cbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c94:	f7ff fcdc 	bl	8000650 <HAL_GetTick>
 8000c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	e008      	b.n	8000cae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c9c:	f7ff fcd8 	bl	8000650 <HAL_GetTick>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	693b      	ldr	r3, [r7, #16]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	2b64      	cmp	r3, #100	; 0x64
 8000ca8:	d901      	bls.n	8000cae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000caa:	2303      	movs	r3, #3
 8000cac:	e1ec      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cae:	4b53      	ldr	r3, [pc, #332]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1f0      	bne.n	8000c9c <HAL_RCC_OscConfig+0x10c>
 8000cba:	e000      	b.n	8000cbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d063      	beq.n	8000d92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cca:	4b4c      	ldr	r3, [pc, #304]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	f003 030c 	and.w	r3, r3, #12
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d00b      	beq.n	8000cee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cd6:	4b49      	ldr	r3, [pc, #292]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	f003 030c 	and.w	r3, r3, #12
 8000cde:	2b08      	cmp	r3, #8
 8000ce0:	d11c      	bne.n	8000d1c <HAL_RCC_OscConfig+0x18c>
 8000ce2:	4b46      	ldr	r3, [pc, #280]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d116      	bne.n	8000d1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cee:	4b43      	ldr	r3, [pc, #268]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d005      	beq.n	8000d06 <HAL_RCC_OscConfig+0x176>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d001      	beq.n	8000d06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e1c0      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d06:	4b3d      	ldr	r3, [pc, #244]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4939      	ldr	r1, [pc, #228]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d1a:	e03a      	b.n	8000d92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d020      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d24:	4b36      	ldr	r3, [pc, #216]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2a:	f7ff fc91 	bl	8000650 <HAL_GetTick>
 8000d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	e008      	b.n	8000d44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d32:	f7ff fc8d 	bl	8000650 <HAL_GetTick>
 8000d36:	4602      	mov	r2, r0
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	1ad3      	subs	r3, r2, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d901      	bls.n	8000d44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d40:	2303      	movs	r3, #3
 8000d42:	e1a1      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	4b2d      	ldr	r3, [pc, #180]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f003 0302 	and.w	r3, r3, #2
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d0f0      	beq.n	8000d32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d50:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	695b      	ldr	r3, [r3, #20]
 8000d5c:	00db      	lsls	r3, r3, #3
 8000d5e:	4927      	ldr	r1, [pc, #156]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d60:	4313      	orrs	r3, r2
 8000d62:	600b      	str	r3, [r1, #0]
 8000d64:	e015      	b.n	8000d92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d66:	4b26      	ldr	r3, [pc, #152]	; (8000e00 <HAL_RCC_OscConfig+0x270>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fc70 	bl	8000650 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d74:	f7ff fc6c 	bl	8000650 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e180      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d86:	4b1d      	ldr	r3, [pc, #116]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f0      	bne.n	8000d74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d03a      	beq.n	8000e14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d019      	beq.n	8000dda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <HAL_RCC_OscConfig+0x274>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dac:	f7ff fc50 	bl	8000650 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fc4c 	bl	8000650 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e160      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 faea 	bl	80013ac <RCC_Delay>
 8000dd8:	e01c      	b.n	8000e14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <HAL_RCC_OscConfig+0x274>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc36 	bl	8000650 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de6:	e00f      	b.n	8000e08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc32 	bl	8000650 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d908      	bls.n	8000e08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e146      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
 8000dfa:	bf00      	nop
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	42420000 	.word	0x42420000
 8000e04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e08:	4b92      	ldr	r3, [pc, #584]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1e9      	bne.n	8000de8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80a6 	beq.w	8000f6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e22:	2300      	movs	r3, #0
 8000e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e26:	4b8b      	ldr	r3, [pc, #556]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d10d      	bne.n	8000e4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b88      	ldr	r3, [pc, #544]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a87      	ldr	r2, [pc, #540]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b85      	ldr	r3, [pc, #532]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4e:	4b82      	ldr	r3, [pc, #520]	; (8001058 <HAL_RCC_OscConfig+0x4c8>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d118      	bne.n	8000e8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e5a:	4b7f      	ldr	r3, [pc, #508]	; (8001058 <HAL_RCC_OscConfig+0x4c8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7e      	ldr	r2, [pc, #504]	; (8001058 <HAL_RCC_OscConfig+0x4c8>)
 8000e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e66:	f7ff fbf3 	bl	8000650 <HAL_GetTick>
 8000e6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e6c:	e008      	b.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6e:	f7ff fbef 	bl	8000650 <HAL_GetTick>
 8000e72:	4602      	mov	r2, r0
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	2b64      	cmp	r3, #100	; 0x64
 8000e7a:	d901      	bls.n	8000e80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	e103      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e80:	4b75      	ldr	r3, [pc, #468]	; (8001058 <HAL_RCC_OscConfig+0x4c8>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0f0      	beq.n	8000e6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	68db      	ldr	r3, [r3, #12]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d106      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x312>
 8000e94:	4b6f      	ldr	r3, [pc, #444]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	6a1b      	ldr	r3, [r3, #32]
 8000e98:	4a6e      	ldr	r2, [pc, #440]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000e9a:	f043 0301 	orr.w	r3, r3, #1
 8000e9e:	6213      	str	r3, [r2, #32]
 8000ea0:	e02d      	b.n	8000efe <HAL_RCC_OscConfig+0x36e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10c      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x334>
 8000eaa:	4b6a      	ldr	r3, [pc, #424]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a69      	ldr	r2, [pc, #420]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	4b67      	ldr	r3, [pc, #412]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a66      	ldr	r2, [pc, #408]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	6213      	str	r3, [r2, #32]
 8000ec2:	e01c      	b.n	8000efe <HAL_RCC_OscConfig+0x36e>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	2b05      	cmp	r3, #5
 8000eca:	d10c      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x356>
 8000ecc:	4b61      	ldr	r3, [pc, #388]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	4a60      	ldr	r2, [pc, #384]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ed2:	f043 0304 	orr.w	r3, r3, #4
 8000ed6:	6213      	str	r3, [r2, #32]
 8000ed8:	4b5e      	ldr	r3, [pc, #376]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a5d      	ldr	r2, [pc, #372]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
 8000ee4:	e00b      	b.n	8000efe <HAL_RCC_OscConfig+0x36e>
 8000ee6:	4b5b      	ldr	r3, [pc, #364]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	4a5a      	ldr	r2, [pc, #360]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	f023 0301 	bic.w	r3, r3, #1
 8000ef0:	6213      	str	r3, [r2, #32]
 8000ef2:	4b58      	ldr	r3, [pc, #352]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ef4:	6a1b      	ldr	r3, [r3, #32]
 8000ef6:	4a57      	ldr	r2, [pc, #348]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000ef8:	f023 0304 	bic.w	r3, r3, #4
 8000efc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d015      	beq.n	8000f32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f06:	f7ff fba3 	bl	8000650 <HAL_GetTick>
 8000f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f0c:	e00a      	b.n	8000f24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f0e:	f7ff fb9f 	bl	8000650 <HAL_GetTick>
 8000f12:	4602      	mov	r2, r0
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e0b1      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f24:	4b4b      	ldr	r3, [pc, #300]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0ee      	beq.n	8000f0e <HAL_RCC_OscConfig+0x37e>
 8000f30:	e014      	b.n	8000f5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f32:	f7ff fb8d 	bl	8000650 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f38:	e00a      	b.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f3a:	f7ff fb89 	bl	8000650 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e09b      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f50:	4b40      	ldr	r3, [pc, #256]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f52:	6a1b      	ldr	r3, [r3, #32]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d1ee      	bne.n	8000f3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f5c:	7dfb      	ldrb	r3, [r7, #23]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d105      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f62:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	4a3b      	ldr	r2, [pc, #236]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	69db      	ldr	r3, [r3, #28]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	f000 8087 	beq.w	8001086 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f78:	4b36      	ldr	r3, [pc, #216]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 030c 	and.w	r3, r3, #12
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d061      	beq.n	8001048 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69db      	ldr	r3, [r3, #28]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d146      	bne.n	800101a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f8c:	4b33      	ldr	r3, [pc, #204]	; (800105c <HAL_RCC_OscConfig+0x4cc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f92:	f7ff fb5d 	bl	8000650 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f98:	e008      	b.n	8000fac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9a:	f7ff fb59 	bl	8000650 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d901      	bls.n	8000fac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e06d      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fac:	4b29      	ldr	r3, [pc, #164]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1f0      	bne.n	8000f9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc0:	d108      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fc2:	4b24      	ldr	r3, [pc, #144]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	4921      	ldr	r1, [pc, #132]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a19      	ldr	r1, [r3, #32]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	430b      	orrs	r3, r1
 8000fe6:	491b      	ldr	r1, [pc, #108]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <HAL_RCC_OscConfig+0x4cc>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fb2d 	bl	8000650 <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ffa:	f7ff fb29 	bl	8000650 <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e03d      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x46a>
 8001018:	e035      	b.n	8001086 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800101a:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_RCC_OscConfig+0x4cc>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fb16 	bl	8000650 <HAL_GetTick>
 8001024:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001028:	f7ff fb12 	bl	8000650 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b02      	cmp	r3, #2
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e026      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0x498>
 8001046:	e01e      	b.n	8001086 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d107      	bne.n	8001060 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e019      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
 8001054:	40021000 	.word	0x40021000
 8001058:	40007000 	.word	0x40007000
 800105c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_RCC_OscConfig+0x500>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	429a      	cmp	r2, r3
 8001072:	d106      	bne.n	8001082 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800107e:	429a      	cmp	r2, r3
 8001080:	d001      	beq.n	8001086 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3718      	adds	r7, #24
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40021000 	.word	0x40021000

08001094 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e0d0      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010a8:	4b6a      	ldr	r3, [pc, #424]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d910      	bls.n	80010d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b6:	4b67      	ldr	r3, [pc, #412]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 0207 	bic.w	r2, r3, #7
 80010be:	4965      	ldr	r1, [pc, #404]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c6:	4b63      	ldr	r3, [pc, #396]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d001      	beq.n	80010d8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0b8      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d020      	beq.n	8001126 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010f0:	4b59      	ldr	r3, [pc, #356]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	4a58      	ldr	r2, [pc, #352]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80010f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010fa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	2b00      	cmp	r3, #0
 8001106:	d005      	beq.n	8001114 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001108:	4b53      	ldr	r3, [pc, #332]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	4a52      	ldr	r2, [pc, #328]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800110e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001112:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001114:	4b50      	ldr	r3, [pc, #320]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	494d      	ldr	r1, [pc, #308]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001122:	4313      	orrs	r3, r2
 8001124:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	2b00      	cmp	r3, #0
 8001130:	d040      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	2b01      	cmp	r3, #1
 8001138:	d107      	bne.n	800114a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113a:	4b47      	ldr	r3, [pc, #284]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d115      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e07f      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b02      	cmp	r3, #2
 8001150:	d107      	bne.n	8001162 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001152:	4b41      	ldr	r3, [pc, #260]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d109      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e073      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001162:	4b3d      	ldr	r3, [pc, #244]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e06b      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001172:	4b39      	ldr	r3, [pc, #228]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f023 0203 	bic.w	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	4936      	ldr	r1, [pc, #216]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	4313      	orrs	r3, r2
 8001182:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001184:	f7ff fa64 	bl	8000650 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800118a:	e00a      	b.n	80011a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118c:	f7ff fa60 	bl	8000650 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	f241 3288 	movw	r2, #5000	; 0x1388
 800119a:	4293      	cmp	r3, r2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e053      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 020c 	and.w	r2, r3, #12
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d1eb      	bne.n	800118c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011b4:	4b27      	ldr	r3, [pc, #156]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0307 	and.w	r3, r3, #7
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d210      	bcs.n	80011e4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 0207 	bic.w	r2, r3, #7
 80011ca:	4922      	ldr	r1, [pc, #136]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	683a      	ldr	r2, [r7, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d001      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e032      	b.n	800124a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d008      	beq.n	8001202 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4916      	ldr	r1, [pc, #88]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800120e:	4b12      	ldr	r3, [pc, #72]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	490e      	ldr	r1, [pc, #56]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800121e:	4313      	orrs	r3, r2
 8001220:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001222:	f000 f821 	bl	8001268 <HAL_RCC_GetSysClockFreq>
 8001226:	4602      	mov	r2, r0
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_RCC_ClockConfig+0x1c4>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	091b      	lsrs	r3, r3, #4
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	490a      	ldr	r1, [pc, #40]	; (800125c <HAL_RCC_ClockConfig+0x1c8>)
 8001234:	5ccb      	ldrb	r3, [r1, r3]
 8001236:	fa22 f303 	lsr.w	r3, r2, r3
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <HAL_RCC_ClockConfig+0x1cc>)
 800123c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <HAL_RCC_ClockConfig+0x1d0>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f906 	bl	8000454 <HAL_InitTick>

  return HAL_OK;
 8001248:	2300      	movs	r3, #0
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40022000 	.word	0x40022000
 8001258:	40021000 	.word	0x40021000
 800125c:	08004e44 	.word	0x08004e44
 8001260:	20000008 	.word	0x20000008
 8001264:	2000000c 	.word	0x2000000c

08001268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <HAL_RCC_GetSysClockFreq+0x94>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 030c 	and.w	r3, r3, #12
 800128e:	2b04      	cmp	r3, #4
 8001290:	d002      	beq.n	8001298 <HAL_RCC_GetSysClockFreq+0x30>
 8001292:	2b08      	cmp	r3, #8
 8001294:	d003      	beq.n	800129e <HAL_RCC_GetSysClockFreq+0x36>
 8001296:	e027      	b.n	80012e8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <HAL_RCC_GetSysClockFreq+0x98>)
 800129a:	613b      	str	r3, [r7, #16]
      break;
 800129c:	e027      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	0c9b      	lsrs	r3, r3, #18
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012a8:	5cd3      	ldrb	r3, [r2, r3]
 80012aa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d010      	beq.n	80012d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <HAL_RCC_GetSysClockFreq+0x94>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	0c5b      	lsrs	r3, r3, #17
 80012bc:	f003 0301 	and.w	r3, r3, #1
 80012c0:	4a11      	ldr	r2, [pc, #68]	; (8001308 <HAL_RCC_GetSysClockFreq+0xa0>)
 80012c2:	5cd3      	ldrb	r3, [r2, r3]
 80012c4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a0d      	ldr	r2, [pc, #52]	; (8001300 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ca:	fb03 f202 	mul.w	r2, r3, r2
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e004      	b.n	80012e2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_RCC_GetSysClockFreq+0xa4>)
 80012dc:	fb02 f303 	mul.w	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	613b      	str	r3, [r7, #16]
      break;
 80012e6:	e002      	b.n	80012ee <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012e8:	4b05      	ldr	r3, [pc, #20]	; (8001300 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ea:	613b      	str	r3, [r7, #16]
      break;
 80012ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012ee:	693b      	ldr	r3, [r7, #16]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	371c      	adds	r7, #28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc80      	pop	{r7}
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	007a1200 	.word	0x007a1200
 8001304:	08004e5c 	.word	0x08004e5c
 8001308:	08004e6c 	.word	0x08004e6c
 800130c:	003d0900 	.word	0x003d0900

08001310 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001314:	4b02      	ldr	r3, [pc, #8]	; (8001320 <HAL_RCC_GetHCLKFreq+0x10>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001328:	f7ff fff2 	bl	8001310 <HAL_RCC_GetHCLKFreq>
 800132c:	4602      	mov	r2, r0
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	4903      	ldr	r1, [pc, #12]	; (8001348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001340:	4618      	mov	r0, r3
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40021000 	.word	0x40021000
 8001348:	08004e54 	.word	0x08004e54

0800134c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	220f      	movs	r2, #15
 800135a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HAL_RCC_GetClockConfig+0x58>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <HAL_RCC_GetClockConfig+0x58>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <HAL_RCC_GetClockConfig+0x58>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_RCC_GetClockConfig+0x58>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	08db      	lsrs	r3, r3, #3
 8001386:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800138e:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <HAL_RCC_GetClockConfig+0x5c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0207 	and.w	r2, r3, #7
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40022000 	.word	0x40022000

080013ac <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <RCC_Delay+0x34>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0a      	ldr	r2, [pc, #40]	; (80013e4 <RCC_Delay+0x38>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	0a5b      	lsrs	r3, r3, #9
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	fb02 f303 	mul.w	r3, r2, r3
 80013c6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013c8:	bf00      	nop
  }
  while (Delay --);
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	60fa      	str	r2, [r7, #12]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f9      	bne.n	80013c8 <RCC_Delay+0x1c>
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr
 80013e0:	20000008 	.word	0x20000008
 80013e4:	10624dd3 	.word	0x10624dd3

080013e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e041      	b.n	800147e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f839 	bl	8001486 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2202      	movs	r2, #2
 8001418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3304      	adds	r3, #4
 8001424:	4619      	mov	r1, r3
 8001426:	4610      	mov	r0, r2
 8001428:	f000 f9ae 	bl	8001788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2201      	movs	r2, #1
 8001430:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2201      	movs	r2, #1
 8001448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2201      	movs	r2, #1
 8001460:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2201      	movs	r2, #1
 8001470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d001      	beq.n	80014b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e035      	b.n	800151c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2202      	movs	r2, #2
 80014b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a16      	ldr	r2, [pc, #88]	; (8001528 <HAL_TIM_Base_Start_IT+0x90>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d009      	beq.n	80014e6 <HAL_TIM_Base_Start_IT+0x4e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014da:	d004      	beq.n	80014e6 <HAL_TIM_Base_Start_IT+0x4e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_TIM_Base_Start_IT+0x94>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d111      	bne.n	800150a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2b06      	cmp	r3, #6
 80014f6:	d010      	beq.n	800151a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001508:	e007      	b.n	800151a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f042 0201 	orr.w	r2, r2, #1
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40012c00 	.word	0x40012c00
 800152c:	40000400 	.word	0x40000400

08001530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b02      	cmp	r3, #2
 8001544:	d122      	bne.n	800158c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b02      	cmp	r3, #2
 8001552:	d11b      	bne.n	800158c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f06f 0202 	mvn.w	r2, #2
 800155c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f8ed 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 8001578:	e005      	b.n	8001586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f8e0 	bl	8001740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f8ef 	bl	8001764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b04      	cmp	r3, #4
 8001598:	d122      	bne.n	80015e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d11b      	bne.n	80015e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0204 	mvn.w	r2, #4
 80015b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2202      	movs	r2, #2
 80015b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f8c3 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 80015cc:	e005      	b.n	80015da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8b6 	bl	8001740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f8c5 	bl	8001764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0308 	and.w	r3, r3, #8
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d122      	bne.n	8001634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0308 	and.w	r3, r3, #8
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d11b      	bne.n	8001634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0208 	mvn.w	r2, #8
 8001604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2204      	movs	r2, #4
 800160a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f899 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 8001620:	e005      	b.n	800162e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f88c 	bl	8001740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f89b 	bl	8001764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b10      	cmp	r3, #16
 8001640:	d122      	bne.n	8001688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b10      	cmp	r3, #16
 800164e:	d11b      	bne.n	8001688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0210 	mvn.w	r2, #16
 8001658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2208      	movs	r2, #8
 800165e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f86f 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 8001674:	e005      	b.n	8001682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f862 	bl	8001740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f871 	bl	8001764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10e      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0201 	mvn.w	r2, #1
 80016ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7fe fe84 	bl	80003bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016be:	2b80      	cmp	r3, #128	; 0x80
 80016c0:	d10e      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016cc:	2b80      	cmp	r3, #128	; 0x80
 80016ce:	d107      	bne.n	80016e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80016d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 f8b5 	bl	800184a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ea:	2b40      	cmp	r3, #64	; 0x40
 80016ec:	d10e      	bne.n	800170c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016f8:	2b40      	cmp	r3, #64	; 0x40
 80016fa:	d107      	bne.n	800170c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 f835 	bl	8001776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	2b20      	cmp	r3, #32
 8001718:	d10e      	bne.n	8001738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	f003 0320 	and.w	r3, r3, #32
 8001724:	2b20      	cmp	r3, #32
 8001726:	d107      	bne.n	8001738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f06f 0220 	mvn.w	r2, #32
 8001730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f880 	bl	8001838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001738:	bf00      	nop
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	bc80      	pop	{r7}
 8001750:	4770      	bx	lr

08001752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001752:	b480      	push	{r7}
 8001754:	b083      	sub	sp, #12
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr

08001764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a25      	ldr	r2, [pc, #148]	; (8001830 <TIM_Base_SetConfig+0xa8>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d007      	beq.n	80017b0 <TIM_Base_SetConfig+0x28>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a6:	d003      	beq.n	80017b0 <TIM_Base_SetConfig+0x28>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	4a22      	ldr	r2, [pc, #136]	; (8001834 <TIM_Base_SetConfig+0xac>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d108      	bne.n	80017c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a1a      	ldr	r2, [pc, #104]	; (8001830 <TIM_Base_SetConfig+0xa8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <TIM_Base_SetConfig+0x52>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d0:	d003      	beq.n	80017da <TIM_Base_SetConfig+0x52>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a17      	ldr	r2, [pc, #92]	; (8001834 <TIM_Base_SetConfig+0xac>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d108      	bne.n	80017ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	68db      	ldr	r3, [r3, #12]
 80017e6:	68fa      	ldr	r2, [r7, #12]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a07      	ldr	r2, [pc, #28]	; (8001830 <TIM_Base_SetConfig+0xa8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d103      	bne.n	8001820 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	691a      	ldr	r2, [r3, #16]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	615a      	str	r2, [r3, #20]
}
 8001826:	bf00      	nop
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40012c00 	.word	0x40012c00
 8001834:	40000400 	.word	0x40000400

08001838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr

0800184a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001862:	f3ef 8305 	mrs	r3, IPSR
 8001866:	60bb      	str	r3, [r7, #8]
  return(result);
 8001868:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800186a:	2b00      	cmp	r3, #0
 800186c:	d10f      	bne.n	800188e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800186e:	f3ef 8310 	mrs	r3, PRIMASK
 8001872:	607b      	str	r3, [r7, #4]
  return(result);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d109      	bne.n	800188e <osKernelInitialize+0x32>
 800187a:	4b10      	ldr	r3, [pc, #64]	; (80018bc <osKernelInitialize+0x60>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b02      	cmp	r3, #2
 8001880:	d109      	bne.n	8001896 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001882:	f3ef 8311 	mrs	r3, BASEPRI
 8001886:	603b      	str	r3, [r7, #0]
  return(result);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800188e:	f06f 0305 	mvn.w	r3, #5
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e00c      	b.n	80018b0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <osKernelInitialize+0x60>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <osKernelInitialize+0x60>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e002      	b.n	80018b0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80018aa:	f04f 33ff 	mov.w	r3, #4294967295
 80018ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80018b0:	68fb      	ldr	r3, [r7, #12]
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3714      	adds	r7, #20
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	20000094 	.word	0x20000094

080018c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80018c6:	f3ef 8305 	mrs	r3, IPSR
 80018ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80018cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d10f      	bne.n	80018f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80018d2:	f3ef 8310 	mrs	r3, PRIMASK
 80018d6:	607b      	str	r3, [r7, #4]
  return(result);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <osKernelStart+0x32>
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <osKernelStart+0x64>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d109      	bne.n	80018fa <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80018e6:	f3ef 8311 	mrs	r3, BASEPRI
 80018ea:	603b      	str	r3, [r7, #0]
  return(result);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80018f2:	f06f 0305 	mvn.w	r3, #5
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	e00e      	b.n	8001918 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <osKernelStart+0x64>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d107      	bne.n	8001912 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001902:	4b08      	ldr	r3, [pc, #32]	; (8001924 <osKernelStart+0x64>)
 8001904:	2202      	movs	r2, #2
 8001906:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001908:	f001 fcf8 	bl	80032fc <vTaskStartScheduler>
      stat = osOK;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	e002      	b.n	8001918 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001912:	f04f 33ff 	mov.w	r3, #4294967295
 8001916:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001918:	68fb      	ldr	r3, [r7, #12]
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	20000094 	.word	0x20000094

08001928 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b092      	sub	sp, #72	; 0x48
 800192c:	af04      	add	r7, sp, #16
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001938:	f3ef 8305 	mrs	r3, IPSR
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 8094 	bne.w	8001a6e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001946:	f3ef 8310 	mrs	r3, PRIMASK
 800194a:	623b      	str	r3, [r7, #32]
  return(result);
 800194c:	6a3b      	ldr	r3, [r7, #32]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f040 808d 	bne.w	8001a6e <osThreadNew+0x146>
 8001954:	4b48      	ldr	r3, [pc, #288]	; (8001a78 <osThreadNew+0x150>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d106      	bne.n	800196a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800195c:	f3ef 8311 	mrs	r3, BASEPRI
 8001960:	61fb      	str	r3, [r7, #28]
  return(result);
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	2b00      	cmp	r3, #0
 8001966:	f040 8082 	bne.w	8001a6e <osThreadNew+0x146>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d07e      	beq.n	8001a6e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001974:	2318      	movs	r3, #24
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001978:	2300      	movs	r3, #0
 800197a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 800197c:	f107 031b 	add.w	r3, r7, #27
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001982:	f04f 33ff 	mov.w	r3, #4294967295
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d045      	beq.n	8001a1a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d002      	beq.n	800199c <osThreadNew+0x74>
        name = attr->name;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d008      	beq.n	80019c2 <osThreadNew+0x9a>
 80019b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b2:	2b38      	cmp	r3, #56	; 0x38
 80019b4:	d805      	bhi.n	80019c2 <osThreadNew+0x9a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <osThreadNew+0x9e>
        return (NULL);
 80019c2:	2300      	movs	r3, #0
 80019c4:	e054      	b.n	8001a70 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00e      	beq.n	80019fc <osThreadNew+0xd4>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b5b      	cmp	r3, #91	; 0x5b
 80019e4:	d90a      	bls.n	80019fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d002      	beq.n	80019fc <osThreadNew+0xd4>
        mem = 1;
 80019f6:	2301      	movs	r3, #1
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019fa:	e010      	b.n	8001a1e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d10c      	bne.n	8001a1e <osThreadNew+0xf6>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d108      	bne.n	8001a1e <osThreadNew+0xf6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d104      	bne.n	8001a1e <osThreadNew+0xf6>
          mem = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a18:	e001      	b.n	8001a1e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d110      	bne.n	8001a46 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001a2c:	9202      	str	r2, [sp, #8]
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f001 fa92 	bl	8002f64 <xTaskCreateStatic>
 8001a40:	4603      	mov	r3, r0
 8001a42:	617b      	str	r3, [r7, #20]
 8001a44:	e013      	b.n	8001a6e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d110      	bne.n	8001a6e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	9301      	str	r3, [sp, #4]
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f001 fadc 	bl	800301c <xTaskCreate>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <osThreadNew+0x146>
          hTask = NULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001a6e:	697b      	ldr	r3, [r7, #20]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3738      	adds	r7, #56	; 0x38
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000094 	.word	0x20000094

08001a7c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a84:	f3ef 8305 	mrs	r3, IPSR
 8001a88:	613b      	str	r3, [r7, #16]
  return(result);
 8001a8a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d10f      	bne.n	8001ab0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a90:	f3ef 8310 	mrs	r3, PRIMASK
 8001a94:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d109      	bne.n	8001ab0 <osDelay+0x34>
 8001a9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <osDelay+0x58>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d109      	bne.n	8001ab8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8001aa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <osDelay+0x3c>
    stat = osErrorISR;
 8001ab0:	f06f 0305 	mvn.w	r3, #5
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e007      	b.n	8001ac8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f001 fbe6 	bl	8003294 <vTaskDelay>
    }
  }

  return (stat);
 8001ac8:	697b      	ldr	r3, [r7, #20]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000094 	.word	0x20000094

08001ad8 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af02      	add	r7, sp, #8
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ae8:	f3ef 8305 	mrs	r3, IPSR
 8001aec:	61bb      	str	r3, [r7, #24]
  return(result);
 8001aee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f040 8086 	bne.w	8001c02 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001af6:	f3ef 8310 	mrs	r3, PRIMASK
 8001afa:	617b      	str	r3, [r7, #20]
  return(result);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d17f      	bne.n	8001c02 <osSemaphoreNew+0x12a>
 8001b02:	4b42      	ldr	r3, [pc, #264]	; (8001c0c <osSemaphoreNew+0x134>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d105      	bne.n	8001b16 <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001b0a:	f3ef 8311 	mrs	r3, BASEPRI
 8001b0e:	613b      	str	r3, [r7, #16]
  return(result);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d175      	bne.n	8001c02 <osSemaphoreNew+0x12a>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d072      	beq.n	8001c02 <osSemaphoreNew+0x12a>
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d86e      	bhi.n	8001c02 <osSemaphoreNew+0x12a>
    mem = -1;
 8001b24:	f04f 33ff 	mov.w	r3, #4294967295
 8001b28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d015      	beq.n	8001b5c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d006      	beq.n	8001b46 <osSemaphoreNew+0x6e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b4f      	cmp	r3, #79	; 0x4f
 8001b3e:	d902      	bls.n	8001b46 <osSemaphoreNew+0x6e>
        mem = 1;
 8001b40:	2301      	movs	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	e00c      	b.n	8001b60 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d108      	bne.n	8001b60 <osSemaphoreNew+0x88>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d104      	bne.n	8001b60 <osSemaphoreNew+0x88>
          mem = 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
 8001b5a:	e001      	b.n	8001b60 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b66:	d04c      	beq.n	8001c02 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d128      	bne.n	8001bc0 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8001b6e:	6a3b      	ldr	r3, [r7, #32]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d10a      	bne.n	8001b8a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	9200      	str	r2, [sp, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2100      	movs	r1, #0
 8001b80:	2001      	movs	r0, #1
 8001b82:	f000 fa4d 	bl	8002020 <xQueueGenericCreateStatic>
 8001b86:	6278      	str	r0, [r7, #36]	; 0x24
 8001b88:	e005      	b.n	8001b96 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2001      	movs	r0, #1
 8001b90:	f000 fabd 	bl	800210e <xQueueGenericCreate>
 8001b94:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d022      	beq.n	8001be2 <osSemaphoreNew+0x10a>
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d01f      	beq.n	8001be2 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001baa:	f000 fb7b 	bl	80022a4 <xQueueGenericSend>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d016      	beq.n	8001be2 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8001bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bb6:	f001 f805 	bl	8002bc4 <vQueueDelete>
            hSemaphore = NULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbe:	e010      	b.n	8001be2 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d108      	bne.n	8001bd8 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f000 fafe 	bl	80021d0 <xQueueCreateCountingSemaphoreStatic>
 8001bd4:	6278      	str	r0, [r7, #36]	; 0x24
 8001bd6:	e004      	b.n	8001be2 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fb2f 	bl	800223e <xQueueCreateCountingSemaphore>
 8001be0:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00c      	beq.n	8001c02 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <osSemaphoreNew+0x11e>
          name = attr->name;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	e001      	b.n	8001bfa <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001bfa:	69f9      	ldr	r1, [r7, #28]
 8001bfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001bfe:	f001 f92b 	bl	8002e58 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000094 	.word	0x20000094

08001c10 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d103      	bne.n	8001c30 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001c28:	f06f 0303 	mvn.w	r3, #3
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e04b      	b.n	8001cc8 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c30:	f3ef 8305 	mrs	r3, IPSR
 8001c34:	617b      	str	r3, [r7, #20]
  return(result);
 8001c36:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d10f      	bne.n	8001c5c <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8001c40:	613b      	str	r3, [r7, #16]
  return(result);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <osSemaphoreAcquire+0x4c>
 8001c48:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <osSemaphoreAcquire+0xc4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d128      	bne.n	8001ca2 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c50:	f3ef 8311 	mrs	r3, BASEPRI
 8001c54:	60fb      	str	r3, [r7, #12]
  return(result);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d022      	beq.n	8001ca2 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8001c62:	f06f 0303 	mvn.w	r3, #3
 8001c66:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001c68:	e02d      	b.n	8001cc6 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	461a      	mov	r2, r3
 8001c74:	2100      	movs	r1, #0
 8001c76:	69b8      	ldr	r0, [r7, #24]
 8001c78:	f000 ff24 	bl	8002ac4 <xQueueReceiveFromISR>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d003      	beq.n	8001c8a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8001c82:	f06f 0302 	mvn.w	r3, #2
 8001c86:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001c88:	e01d      	b.n	8001cc6 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d01a      	beq.n	8001cc6 <osSemaphoreAcquire+0xb6>
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <osSemaphoreAcquire+0xc8>)
 8001c92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	f3bf 8f4f 	dsb	sy
 8001c9c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8001ca0:	e011      	b.n	8001cc6 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8001ca2:	6839      	ldr	r1, [r7, #0]
 8001ca4:	69b8      	ldr	r0, [r7, #24]
 8001ca6:	f000 fe01 	bl	80028ac <xQueueSemaphoreTake>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d00b      	beq.n	8001cc8 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8001cb6:	f06f 0301 	mvn.w	r3, #1
 8001cba:	61fb      	str	r3, [r7, #28]
 8001cbc:	e004      	b.n	8001cc8 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8001cbe:	f06f 0302 	mvn.w	r3, #2
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	e000      	b.n	8001cc8 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8001cc6:	bf00      	nop
      }
    }
  }

  return (stat);
 8001cc8:	69fb      	ldr	r3, [r7, #28]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3720      	adds	r7, #32
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000094 	.word	0x20000094
 8001cd8:	e000ed04 	.word	0xe000ed04

08001cdc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8001cf2:	f06f 0303 	mvn.w	r3, #3
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	e03e      	b.n	8001d78 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cfa:	f3ef 8305 	mrs	r3, IPSR
 8001cfe:	617b      	str	r3, [r7, #20]
  return(result);
 8001d00:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d06:	f3ef 8310 	mrs	r3, PRIMASK
 8001d0a:	613b      	str	r3, [r7, #16]
  return(result);
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d109      	bne.n	8001d26 <osSemaphoreRelease+0x4a>
 8001d12:	4b1c      	ldr	r3, [pc, #112]	; (8001d84 <osSemaphoreRelease+0xa8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d120      	bne.n	8001d5c <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d1a:	f3ef 8311 	mrs	r3, BASEPRI
 8001d1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d01a      	beq.n	8001d5c <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4619      	mov	r1, r3
 8001d30:	69b8      	ldr	r0, [r7, #24]
 8001d32:	f000 fc4d 	bl	80025d0 <xQueueGiveFromISR>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d003      	beq.n	8001d44 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8001d3c:	f06f 0302 	mvn.w	r3, #2
 8001d40:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d42:	e018      	b.n	8001d76 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d015      	beq.n	8001d76 <osSemaphoreRelease+0x9a>
 8001d4a:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <osSemaphoreRelease+0xac>)
 8001d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	f3bf 8f4f 	dsb	sy
 8001d56:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d5a:	e00c      	b.n	8001d76 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2100      	movs	r1, #0
 8001d62:	69b8      	ldr	r0, [r7, #24]
 8001d64:	f000 fa9e 	bl	80022a4 <xQueueGenericSend>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d004      	beq.n	8001d78 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8001d6e:	f06f 0302 	mvn.w	r3, #2
 8001d72:	61fb      	str	r3, [r7, #28]
 8001d74:	e000      	b.n	8001d78 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001d76:	bf00      	nop
    }
  }

  return (stat);
 8001d78:	69fb      	ldr	r3, [r7, #28]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3720      	adds	r7, #32
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000094 	.word	0x20000094
 8001d88:	e000ed04 	.word	0xe000ed04

08001d8c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4a06      	ldr	r2, [pc, #24]	; (8001db4 <vApplicationGetIdleTaskMemory+0x28>)
 8001d9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	4a05      	ldr	r2, [pc, #20]	; (8001db8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001da2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2280      	movs	r2, #128	; 0x80
 8001da8:	601a      	str	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bc80      	pop	{r7}
 8001db2:	4770      	bx	lr
 8001db4:	20000098 	.word	0x20000098
 8001db8:	200000f4 	.word	0x200000f4

08001dbc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <vApplicationGetTimerTaskMemory+0x2c>)
 8001dcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	4a06      	ldr	r2, [pc, #24]	; (8001dec <vApplicationGetTimerTaskMemory+0x30>)
 8001dd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dda:	601a      	str	r2, [r3, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	200002f4 	.word	0x200002f4
 8001dec:	20000350 	.word	0x20000350

08001df0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f103 0208 	add.w	r2, r3, #8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f103 0208 	add.w	r2, r3, #8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f103 0208 	add.w	r2, r3, #8
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr

08001e46 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
 8001e4e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	601a      	str	r2, [r3, #0]
}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d103      	bne.n	8001eac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	60fb      	str	r3, [r7, #12]
 8001eaa:	e00c      	b.n	8001ec6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3308      	adds	r3, #8
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	e002      	b.n	8001eba <vListInsert+0x2e>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68ba      	ldr	r2, [r7, #8]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d2f6      	bcs.n	8001eb4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	601a      	str	r2, [r3, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6892      	ldr	r2, [r2, #8]
 8001f12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6852      	ldr	r2, [r2, #4]
 8001f1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d103      	bne.n	8001f30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	1e5a      	subs	r2, r3, #1
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3714      	adds	r7, #20
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr
	...

08001f50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d10a      	bne.n	8001f7a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f68:	f383 8811 	msr	BASEPRI, r3
 8001f6c:	f3bf 8f6f 	isb	sy
 8001f70:	f3bf 8f4f 	dsb	sy
 8001f74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f76:	bf00      	nop
 8001f78:	e7fe      	b.n	8001f78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001f7a:	f002 fbf7 	bl	800476c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	68f9      	ldr	r1, [r7, #12]
 8001f88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	441a      	add	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2200      	movs	r2, #0
 8001f98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	3b01      	subs	r3, #1
 8001fac:	68f9      	ldr	r1, [r7, #12]
 8001fae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	441a      	add	r2, r3
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	22ff      	movs	r2, #255	; 0xff
 8001fbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	22ff      	movs	r2, #255	; 0xff
 8001fc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d114      	bne.n	8001ffa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01a      	beq.n	800200e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	3310      	adds	r3, #16
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 fc17 	bl	8003810 <xTaskRemoveFromEventList>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d012      	beq.n	800200e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <xQueueGenericReset+0xcc>)
 8001fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	e009      	b.n	800200e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3310      	adds	r3, #16
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fef6 	bl	8001df0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3324      	adds	r3, #36	; 0x24
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fef1 	bl	8001df0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800200e:	f002 fbdd 	bl	80047cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002012:	2301      	movs	r3, #1
}
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	e000ed04 	.word	0xe000ed04

08002020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08e      	sub	sp, #56	; 0x38
 8002024:	af02      	add	r7, sp, #8
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002046:	bf00      	nop
 8002048:	e7fe      	b.n	8002048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	f3bf 8f6f 	isb	sy
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002062:	bf00      	nop
 8002064:	e7fe      	b.n	8002064 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d002      	beq.n	8002072 <xQueueGenericCreateStatic+0x52>
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <xQueueGenericCreateStatic+0x56>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <xQueueGenericCreateStatic+0x58>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800207c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	623b      	str	r3, [r7, #32]
}
 800208e:	bf00      	nop
 8002090:	e7fe      	b.n	8002090 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d102      	bne.n	800209e <xQueueGenericCreateStatic+0x7e>
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <xQueueGenericCreateStatic+0x82>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <xQueueGenericCreateStatic+0x84>
 80020a2:	2300      	movs	r3, #0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d10a      	bne.n	80020be <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80020a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ac:	f383 8811 	msr	BASEPRI, r3
 80020b0:	f3bf 8f6f 	isb	sy
 80020b4:	f3bf 8f4f 	dsb	sy
 80020b8:	61fb      	str	r3, [r7, #28]
}
 80020ba:	bf00      	nop
 80020bc:	e7fe      	b.n	80020bc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80020be:	2350      	movs	r3, #80	; 0x50
 80020c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b50      	cmp	r3, #80	; 0x50
 80020c6:	d00a      	beq.n	80020de <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80020c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020cc:	f383 8811 	msr	BASEPRI, r3
 80020d0:	f3bf 8f6f 	isb	sy
 80020d4:	f3bf 8f4f 	dsb	sy
 80020d8:	61bb      	str	r3, [r7, #24]
}
 80020da:	bf00      	nop
 80020dc:	e7fe      	b.n	80020dc <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80020e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d00d      	beq.n	8002104 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80020e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	68b9      	ldr	r1, [r7, #8]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f843 	bl	800218a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002106:	4618      	mov	r0, r3
 8002108:	3730      	adds	r7, #48	; 0x30
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800210e:	b580      	push	{r7, lr}
 8002110:	b08a      	sub	sp, #40	; 0x28
 8002112:	af02      	add	r7, sp, #8
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	4613      	mov	r3, r2
 800211a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002126:	f383 8811 	msr	BASEPRI, r3
 800212a:	f3bf 8f6f 	isb	sy
 800212e:	f3bf 8f4f 	dsb	sy
 8002132:	613b      	str	r3, [r7, #16]
}
 8002134:	bf00      	nop
 8002136:	e7fe      	b.n	8002136 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d102      	bne.n	8002144 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	e004      	b.n	800214e <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3350      	adds	r3, #80	; 0x50
 8002152:	4618      	mov	r0, r3
 8002154:	f002 fc0a 	bl	800496c <pvPortMalloc>
 8002158:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00f      	beq.n	8002180 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	3350      	adds	r3, #80	; 0x50
 8002164:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800216e:	79fa      	ldrb	r2, [r7, #7]
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	4613      	mov	r3, r2
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 f805 	bl	800218a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002180:	69bb      	ldr	r3, [r7, #24]
	}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d103      	bne.n	80021a6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e002      	b.n	80021ac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80021b8:	2101      	movs	r1, #1
 80021ba:	69b8      	ldr	r0, [r7, #24]
 80021bc:	f7ff fec8 	bl	8001f50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80021c8:	bf00      	nop
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af02      	add	r7, sp, #8
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10a      	bne.n	80021f8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80021e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e6:	f383 8811 	msr	BASEPRI, r3
 80021ea:	f3bf 8f6f 	isb	sy
 80021ee:	f3bf 8f4f 	dsb	sy
 80021f2:	61bb      	str	r3, [r7, #24]
}
 80021f4:	bf00      	nop
 80021f6:	e7fe      	b.n	80021f6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d90a      	bls.n	8002216 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002204:	f383 8811 	msr	BASEPRI, r3
 8002208:	f3bf 8f6f 	isb	sy
 800220c:	f3bf 8f4f 	dsb	sy
 8002210:	617b      	str	r3, [r7, #20]
}
 8002212:	bf00      	nop
 8002214:	e7fe      	b.n	8002214 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002216:	2302      	movs	r3, #2
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	2100      	movs	r1, #0
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f7ff fefd 	bl	8002020 <xQueueGenericCreateStatic>
 8002226:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002234:	69fb      	ldr	r3, [r7, #28]
	}
 8002236:	4618      	mov	r0, r3
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800223e:	b580      	push	{r7, lr}
 8002240:	b086      	sub	sp, #24
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d10a      	bne.n	8002264 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800224e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002252:	f383 8811 	msr	BASEPRI, r3
 8002256:	f3bf 8f6f 	isb	sy
 800225a:	f3bf 8f4f 	dsb	sy
 800225e:	613b      	str	r3, [r7, #16]
}
 8002260:	bf00      	nop
 8002262:	e7fe      	b.n	8002262 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	429a      	cmp	r2, r3
 800226a:	d90a      	bls.n	8002282 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	60fb      	str	r3, [r7, #12]
}
 800227e:	bf00      	nop
 8002280:	e7fe      	b.n	8002280 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002282:	2202      	movs	r2, #2
 8002284:	2100      	movs	r1, #0
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff ff41 	bl	800210e <xQueueGenericCreate>
 800228c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800229a:	697b      	ldr	r3, [r7, #20]
	}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08e      	sub	sp, #56	; 0x38
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80022b2:	2300      	movs	r3, #0
 80022b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80022ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <xQueueGenericSend+0x32>
	__asm volatile
 80022c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c4:	f383 8811 	msr	BASEPRI, r3
 80022c8:	f3bf 8f6f 	isb	sy
 80022cc:	f3bf 8f4f 	dsb	sy
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022d2:	bf00      	nop
 80022d4:	e7fe      	b.n	80022d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d103      	bne.n	80022e4 <xQueueGenericSend+0x40>
 80022dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <xQueueGenericSend+0x44>
 80022e4:	2301      	movs	r3, #1
 80022e6:	e000      	b.n	80022ea <xQueueGenericSend+0x46>
 80022e8:	2300      	movs	r3, #0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d10a      	bne.n	8002304 <xQueueGenericSend+0x60>
	__asm volatile
 80022ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002300:	bf00      	nop
 8002302:	e7fe      	b.n	8002302 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d103      	bne.n	8002312 <xQueueGenericSend+0x6e>
 800230a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <xQueueGenericSend+0x72>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <xQueueGenericSend+0x74>
 8002316:	2300      	movs	r3, #0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d10a      	bne.n	8002332 <xQueueGenericSend+0x8e>
	__asm volatile
 800231c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002320:	f383 8811 	msr	BASEPRI, r3
 8002324:	f3bf 8f6f 	isb	sy
 8002328:	f3bf 8f4f 	dsb	sy
 800232c:	623b      	str	r3, [r7, #32]
}
 800232e:	bf00      	nop
 8002330:	e7fe      	b.n	8002330 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002332:	f001 fc2f 	bl	8003b94 <xTaskGetSchedulerState>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <xQueueGenericSend+0x9e>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <xQueueGenericSend+0xa2>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <xQueueGenericSend+0xa4>
 8002346:	2300      	movs	r3, #0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10a      	bne.n	8002362 <xQueueGenericSend+0xbe>
	__asm volatile
 800234c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	61fb      	str	r3, [r7, #28]
}
 800235e:	bf00      	nop
 8002360:	e7fe      	b.n	8002360 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002362:	f002 fa03 	bl	800476c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800236c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236e:	429a      	cmp	r2, r3
 8002370:	d302      	bcc.n	8002378 <xQueueGenericSend+0xd4>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d129      	bne.n	80023cc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	68b9      	ldr	r1, [r7, #8]
 800237c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800237e:	f000 fc5b 	bl	8002c38 <prvCopyDataToQueue>
 8002382:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	d010      	beq.n	80023ae <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800238e:	3324      	adds	r3, #36	; 0x24
 8002390:	4618      	mov	r0, r3
 8002392:	f001 fa3d 	bl	8003810 <xTaskRemoveFromEventList>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800239c:	4b3f      	ldr	r3, [pc, #252]	; (800249c <xQueueGenericSend+0x1f8>)
 800239e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	e00a      	b.n	80023c4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d007      	beq.n	80023c4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80023b4:	4b39      	ldr	r3, [pc, #228]	; (800249c <xQueueGenericSend+0x1f8>)
 80023b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f3bf 8f4f 	dsb	sy
 80023c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80023c4:	f002 fa02 	bl	80047cc <vPortExitCritical>
				return pdPASS;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e063      	b.n	8002494 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d103      	bne.n	80023da <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80023d2:	f002 f9fb 	bl	80047cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	e05c      	b.n	8002494 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d106      	bne.n	80023ee <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023e0:	f107 0314 	add.w	r3, r7, #20
 80023e4:	4618      	mov	r0, r3
 80023e6:	f001 fa77 	bl	80038d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023ea:	2301      	movs	r3, #1
 80023ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023ee:	f002 f9ed 	bl	80047cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023f2:	f000 ffe9 	bl	80033c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023f6:	f002 f9b9 	bl	800476c <vPortEnterCritical>
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002400:	b25b      	sxtb	r3, r3
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d103      	bne.n	8002410 <xQueueGenericSend+0x16c>
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002416:	b25b      	sxtb	r3, r3
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d103      	bne.n	8002426 <xQueueGenericSend+0x182>
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002420:	2200      	movs	r2, #0
 8002422:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002426:	f002 f9d1 	bl	80047cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800242a:	1d3a      	adds	r2, r7, #4
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f001 fa66 	bl	8003904 <xTaskCheckForTimeOut>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d124      	bne.n	8002488 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800243e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002440:	f000 fcf2 	bl	8002e28 <prvIsQueueFull>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d018      	beq.n	800247c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244c:	3310      	adds	r3, #16
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f001 f98c 	bl	8003770 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800245a:	f000 fc7d 	bl	8002d58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800245e:	f000 ffc1 	bl	80033e4 <xTaskResumeAll>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	f47f af7c 	bne.w	8002362 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <xQueueGenericSend+0x1f8>)
 800246c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	f3bf 8f6f 	isb	sy
 800247a:	e772      	b.n	8002362 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800247c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800247e:	f000 fc6b 	bl	8002d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002482:	f000 ffaf 	bl	80033e4 <xTaskResumeAll>
 8002486:	e76c      	b.n	8002362 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800248a:	f000 fc65 	bl	8002d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800248e:	f000 ffa9 	bl	80033e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002492:	2300      	movs	r3, #0
		}
	}
}
 8002494:	4618      	mov	r0, r3
 8002496:	3738      	adds	r7, #56	; 0x38
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	e000ed04 	.word	0xe000ed04

080024a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b08e      	sub	sp, #56	; 0x38
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10a      	bne.n	80024ce <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024ca:	bf00      	nop
 80024cc:	e7fe      	b.n	80024cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d103      	bne.n	80024dc <xQueueGenericSendFromISR+0x3c>
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <xQueueGenericSendFromISR+0x40>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <xQueueGenericSendFromISR+0x42>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80024e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ea:	f383 8811 	msr	BASEPRI, r3
 80024ee:	f3bf 8f6f 	isb	sy
 80024f2:	f3bf 8f4f 	dsb	sy
 80024f6:	623b      	str	r3, [r7, #32]
}
 80024f8:	bf00      	nop
 80024fa:	e7fe      	b.n	80024fa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d103      	bne.n	800250a <xQueueGenericSendFromISR+0x6a>
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <xQueueGenericSendFromISR+0x6e>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <xQueueGenericSendFromISR+0x70>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	61fb      	str	r3, [r7, #28]
}
 8002526:	bf00      	nop
 8002528:	e7fe      	b.n	8002528 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800252a:	f002 f9e1 	bl	80048f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800252e:	f3ef 8211 	mrs	r2, BASEPRI
 8002532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002536:	f383 8811 	msr	BASEPRI, r3
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	61ba      	str	r2, [r7, #24]
 8002544:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002546:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <xQueueGenericSendFromISR+0xbc>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d12c      	bne.n	80025b6 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800256c:	f000 fb64 	bl	8002c38 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002570:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002578:	d112      	bne.n	80025a0 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2b00      	cmp	r3, #0
 8002580:	d016      	beq.n	80025b0 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002584:	3324      	adds	r3, #36	; 0x24
 8002586:	4618      	mov	r0, r3
 8002588:	f001 f942 	bl	8003810 <xTaskRemoveFromEventList>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00e      	beq.n	80025b0 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00b      	beq.n	80025b0 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e007      	b.n	80025b0 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80025a0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025a4:	3301      	adds	r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	b25a      	sxtb	r2, r3
 80025aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80025b0:	2301      	movs	r3, #1
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80025b4:	e001      	b.n	80025ba <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80025b6:	2300      	movs	r3, #0
 80025b8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025bc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80025c4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3738      	adds	r7, #56	; 0x38
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08e      	sub	sp, #56	; 0x38
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10a      	bne.n	80025fa <xQueueGiveFromISR+0x2a>
	__asm volatile
 80025e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e8:	f383 8811 	msr	BASEPRI, r3
 80025ec:	f3bf 8f6f 	isb	sy
 80025f0:	f3bf 8f4f 	dsb	sy
 80025f4:	623b      	str	r3, [r7, #32]
}
 80025f6:	bf00      	nop
 80025f8:	e7fe      	b.n	80025f8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80025fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002606:	f383 8811 	msr	BASEPRI, r3
 800260a:	f3bf 8f6f 	isb	sy
 800260e:	f3bf 8f4f 	dsb	sy
 8002612:	61fb      	str	r3, [r7, #28]
}
 8002614:	bf00      	nop
 8002616:	e7fe      	b.n	8002616 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d103      	bne.n	8002628 <xQueueGiveFromISR+0x58>
 8002620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <xQueueGiveFromISR+0x5c>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <xQueueGiveFromISR+0x5e>
 800262c:	2300      	movs	r3, #0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10a      	bne.n	8002648 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002636:	f383 8811 	msr	BASEPRI, r3
 800263a:	f3bf 8f6f 	isb	sy
 800263e:	f3bf 8f4f 	dsb	sy
 8002642:	61bb      	str	r3, [r7, #24]
}
 8002644:	bf00      	nop
 8002646:	e7fe      	b.n	8002646 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002648:	f002 f952 	bl	80048f0 <vPortValidateInterruptPriority>
	__asm volatile
 800264c:	f3ef 8211 	mrs	r2, BASEPRI
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	617a      	str	r2, [r7, #20]
 8002662:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002664:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002674:	429a      	cmp	r2, r3
 8002676:	d22b      	bcs.n	80026d0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800267e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800268a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800268e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002692:	d112      	bne.n	80026ba <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d016      	beq.n	80026ca <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269e:	3324      	adds	r3, #36	; 0x24
 80026a0:	4618      	mov	r0, r3
 80026a2:	f001 f8b5 	bl	8003810 <xTaskRemoveFromEventList>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00e      	beq.n	80026ca <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2201      	movs	r2, #1
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e007      	b.n	80026ca <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026be:	3301      	adds	r3, #1
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	b25a      	sxtb	r2, r3
 80026c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80026ca:	2301      	movs	r3, #1
 80026cc:	637b      	str	r3, [r7, #52]	; 0x34
 80026ce:	e001      	b.n	80026d4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f383 8811 	msr	BASEPRI, r3
}
 80026de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3738      	adds	r7, #56	; 0x38
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	; 0x30
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10a      	bne.n	800271c <xQueueReceive+0x30>
	__asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	623b      	str	r3, [r7, #32]
}
 8002718:	bf00      	nop
 800271a:	e7fe      	b.n	800271a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <xQueueReceive+0x3e>
 8002722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <xQueueReceive+0x42>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <xQueueReceive+0x44>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <xQueueReceive+0x5e>
	__asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	61fb      	str	r3, [r7, #28]
}
 8002746:	bf00      	nop
 8002748:	e7fe      	b.n	8002748 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800274a:	f001 fa23 	bl	8003b94 <xTaskGetSchedulerState>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <xQueueReceive+0x6e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <xQueueReceive+0x72>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <xQueueReceive+0x74>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <xQueueReceive+0x8e>
	__asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	61bb      	str	r3, [r7, #24]
}
 8002776:	bf00      	nop
 8002778:	e7fe      	b.n	8002778 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800277a:	f001 fff7 	bl	800476c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002782:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01f      	beq.n	80027ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800278e:	f000 fabd 	bl	8002d0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	1e5a      	subs	r2, r3, #1
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800279a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00f      	beq.n	80027c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a4:	3310      	adds	r3, #16
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 f832 	bl	8003810 <xTaskRemoveFromEventList>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80027b2:	4b3d      	ldr	r3, [pc, #244]	; (80028a8 <xQueueReceive+0x1bc>)
 80027b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80027c2:	f002 f803 	bl	80047cc <vPortExitCritical>
				return pdPASS;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e069      	b.n	800289e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d103      	bne.n	80027d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027d0:	f001 fffc 	bl	80047cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e062      	b.n	800289e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d106      	bne.n	80027ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027de:	f107 0310 	add.w	r3, r7, #16
 80027e2:	4618      	mov	r0, r3
 80027e4:	f001 f878 	bl	80038d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027e8:	2301      	movs	r3, #1
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027ec:	f001 ffee 	bl	80047cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027f0:	f000 fdea 	bl	80033c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027f4:	f001 ffba 	bl	800476c <vPortEnterCritical>
 80027f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d103      	bne.n	800280e <xQueueReceive+0x122>
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002814:	b25b      	sxtb	r3, r3
 8002816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281a:	d103      	bne.n	8002824 <xQueueReceive+0x138>
 800281c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002824:	f001 ffd2 	bl	80047cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002828:	1d3a      	adds	r2, r7, #4
 800282a:	f107 0310 	add.w	r3, r7, #16
 800282e:	4611      	mov	r1, r2
 8002830:	4618      	mov	r0, r3
 8002832:	f001 f867 	bl	8003904 <xTaskCheckForTimeOut>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d123      	bne.n	8002884 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800283c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800283e:	f000 fadd 	bl	8002dfc <prvIsQueueEmpty>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d017      	beq.n	8002878 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	3324      	adds	r3, #36	; 0x24
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	4611      	mov	r1, r2
 8002850:	4618      	mov	r0, r3
 8002852:	f000 ff8d 	bl	8003770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002858:	f000 fa7e 	bl	8002d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800285c:	f000 fdc2 	bl	80033e4 <xTaskResumeAll>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d189      	bne.n	800277a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <xQueueReceive+0x1bc>)
 8002868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286c:	601a      	str	r2, [r3, #0]
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	e780      	b.n	800277a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002878:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800287a:	f000 fa6d 	bl	8002d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800287e:	f000 fdb1 	bl	80033e4 <xTaskResumeAll>
 8002882:	e77a      	b.n	800277a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002884:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002886:	f000 fa67 	bl	8002d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800288a:	f000 fdab 	bl	80033e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800288e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002890:	f000 fab4 	bl	8002dfc <prvIsQueueEmpty>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	f43f af6f 	beq.w	800277a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800289c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3730      	adds	r7, #48	; 0x30
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000ed04 	.word	0xe000ed04

080028ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	; 0x38
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80028be:	2300      	movs	r3, #0
 80028c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10a      	bne.n	80028de <xQueueSemaphoreTake+0x32>
	__asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	623b      	str	r3, [r7, #32]
}
 80028da:	bf00      	nop
 80028dc:	e7fe      	b.n	80028dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	61fb      	str	r3, [r7, #28]
}
 80028f8:	bf00      	nop
 80028fa:	e7fe      	b.n	80028fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028fc:	f001 f94a 	bl	8003b94 <xTaskGetSchedulerState>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d102      	bne.n	800290c <xQueueSemaphoreTake+0x60>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <xQueueSemaphoreTake+0x64>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <xQueueSemaphoreTake+0x66>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	61bb      	str	r3, [r7, #24]
}
 8002928:	bf00      	nop
 800292a:	e7fe      	b.n	800292a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800292c:	f001 ff1e 	bl	800476c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d024      	beq.n	8002986 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800293c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002942:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d104      	bne.n	8002956 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800294c:	f001 faa2 	bl	8003e94 <pvTaskIncrementMutexHeldCount>
 8002950:	4602      	mov	r2, r0
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00f      	beq.n	800297e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800295e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002960:	3310      	adds	r3, #16
 8002962:	4618      	mov	r0, r3
 8002964:	f000 ff54 	bl	8003810 <xTaskRemoveFromEventList>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800296e:	4b54      	ldr	r3, [pc, #336]	; (8002ac0 <xQueueSemaphoreTake+0x214>)
 8002970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	f3bf 8f4f 	dsb	sy
 800297a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800297e:	f001 ff25 	bl	80047cc <vPortExitCritical>
				return pdPASS;
 8002982:	2301      	movs	r3, #1
 8002984:	e097      	b.n	8002ab6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d111      	bne.n	80029b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00a      	beq.n	80029a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002996:	f383 8811 	msr	BASEPRI, r3
 800299a:	f3bf 8f6f 	isb	sy
 800299e:	f3bf 8f4f 	dsb	sy
 80029a2:	617b      	str	r3, [r7, #20]
}
 80029a4:	bf00      	nop
 80029a6:	e7fe      	b.n	80029a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80029a8:	f001 ff10 	bl	80047cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e082      	b.n	8002ab6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 ff8c 	bl	80038d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029c4:	f001 ff02 	bl	80047cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029c8:	f000 fcfe 	bl	80033c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029cc:	f001 fece 	bl	800476c <vPortEnterCritical>
 80029d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029dc:	d103      	bne.n	80029e6 <xQueueSemaphoreTake+0x13a>
 80029de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f2:	d103      	bne.n	80029fc <xQueueSemaphoreTake+0x150>
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029fc:	f001 fee6 	bl	80047cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a00:	463a      	mov	r2, r7
 8002a02:	f107 030c 	add.w	r3, r7, #12
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 ff7b 	bl	8003904 <xTaskCheckForTimeOut>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d132      	bne.n	8002a7a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a16:	f000 f9f1 	bl	8002dfc <prvIsQueueEmpty>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d026      	beq.n	8002a6e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d109      	bne.n	8002a3c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002a28:	f001 fea0 	bl	800476c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f001 f8cd 	bl	8003bd0 <xTaskPriorityInherit>
 8002a36:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002a38:	f001 fec8 	bl	80047cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3e:	3324      	adds	r3, #36	; 0x24
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f000 fe93 	bl	8003770 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a4c:	f000 f984 	bl	8002d58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a50:	f000 fcc8 	bl	80033e4 <xTaskResumeAll>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f47f af68 	bne.w	800292c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <xQueueSemaphoreTake+0x214>)
 8002a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	e75e      	b.n	800292c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a70:	f000 f972 	bl	8002d58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a74:	f000 fcb6 	bl	80033e4 <xTaskResumeAll>
 8002a78:	e758      	b.n	800292c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002a7a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a7c:	f000 f96c 	bl	8002d58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a80:	f000 fcb0 	bl	80033e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a86:	f000 f9b9 	bl	8002dfc <prvIsQueueEmpty>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f43f af4d 	beq.w	800292c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00d      	beq.n	8002ab4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002a98:	f001 fe68 	bl	800476c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002a9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002a9e:	f000 f8b4 	bl	8002c0a <prvGetDisinheritPriorityAfterTimeout>
 8002aa2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f001 f96c 	bl	8003d88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002ab0:	f001 fe8c 	bl	80047cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ab4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3738      	adds	r7, #56	; 0x38
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	e000ed04 	.word	0xe000ed04

08002ac4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08e      	sub	sp, #56	; 0x38
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10a      	bne.n	8002af0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ade:	f383 8811 	msr	BASEPRI, r3
 8002ae2:	f3bf 8f6f 	isb	sy
 8002ae6:	f3bf 8f4f 	dsb	sy
 8002aea:	623b      	str	r3, [r7, #32]
}
 8002aec:	bf00      	nop
 8002aee:	e7fe      	b.n	8002aee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d103      	bne.n	8002afe <xQueueReceiveFromISR+0x3a>
 8002af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <xQueueReceiveFromISR+0x3e>
 8002afe:	2301      	movs	r3, #1
 8002b00:	e000      	b.n	8002b04 <xQueueReceiveFromISR+0x40>
 8002b02:	2300      	movs	r3, #0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10a      	bne.n	8002b1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0c:	f383 8811 	msr	BASEPRI, r3
 8002b10:	f3bf 8f6f 	isb	sy
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	61fb      	str	r3, [r7, #28]
}
 8002b1a:	bf00      	nop
 8002b1c:	e7fe      	b.n	8002b1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b1e:	f001 fee7 	bl	80048f0 <vPortValidateInterruptPriority>
	__asm volatile
 8002b22:	f3ef 8211 	mrs	r2, BASEPRI
 8002b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	61ba      	str	r2, [r7, #24]
 8002b38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002b3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d02f      	beq.n	8002baa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b54:	68b9      	ldr	r1, [r7, #8]
 8002b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b58:	f000 f8d8 	bl	8002d0c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5e:	1e5a      	subs	r2, r3, #1
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002b64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6c:	d112      	bne.n	8002b94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d016      	beq.n	8002ba4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	3310      	adds	r3, #16
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fe48 	bl	8003810 <xTaskRemoveFromEventList>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00b      	beq.n	8002ba4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e007      	b.n	8002ba4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002b94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	b25a      	sxtb	r2, r3
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba8:	e001      	b.n	8002bae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	637b      	str	r3, [r7, #52]	; 0x34
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f383 8811 	msr	BASEPRI, r3
}
 8002bb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3738      	adds	r7, #56	; 0x38
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10a      	bne.n	8002bec <vQueueDelete+0x28>
	__asm volatile
 8002bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bda:	f383 8811 	msr	BASEPRI, r3
 8002bde:	f3bf 8f6f 	isb	sy
 8002be2:	f3bf 8f4f 	dsb	sy
 8002be6:	60bb      	str	r3, [r7, #8]
}
 8002be8:	bf00      	nop
 8002bea:	e7fe      	b.n	8002bea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f95b 	bl	8002ea8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d102      	bne.n	8002c02 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8002bfc:	68f8      	ldr	r0, [r7, #12]
 8002bfe:	f001 ff79 	bl	8004af4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e001      	b.n	8002c2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
	}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3714      	adds	r7, #20
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b086      	sub	sp, #24
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d14d      	bne.n	8002cfa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f822 	bl	8003cac <xTaskPriorityDisinherit>
 8002c68:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	605a      	str	r2, [r3, #4]
 8002c70:	e043      	b.n	8002cfa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d119      	bne.n	8002cac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6898      	ldr	r0, [r3, #8]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	461a      	mov	r2, r3
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	f002 f86e 	bl	8004d64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	441a      	add	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d32b      	bcc.n	8002cfa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	e026      	b.n	8002cfa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	68d8      	ldr	r0, [r3, #12]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	f002 f854 	bl	8004d64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68da      	ldr	r2, [r3, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	441a      	add	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d207      	bcs.n	8002ce8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	425b      	negs	r3, r3
 8002ce2:	441a      	add	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d105      	bne.n	8002cfa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d002      	beq.n	8002cfa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002d02:	697b      	ldr	r3, [r7, #20]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d018      	beq.n	8002d50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68da      	ldr	r2, [r3, #12]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	441a      	add	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d303      	bcc.n	8002d40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68d9      	ldr	r1, [r3, #12]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	461a      	mov	r2, r3
 8002d4a:	6838      	ldr	r0, [r7, #0]
 8002d4c:	f002 f80a 	bl	8004d64 <memcpy>
	}
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002d60:	f001 fd04 	bl	800476c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d6c:	e011      	b.n	8002d92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d012      	beq.n	8002d9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3324      	adds	r3, #36	; 0x24
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f000 fd48 	bl	8003810 <xTaskRemoveFromEventList>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d86:	f000 fe1f 	bl	80039c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	dce9      	bgt.n	8002d6e <prvUnlockQueue+0x16>
 8002d9a:	e000      	b.n	8002d9e <prvUnlockQueue+0x46>
					break;
 8002d9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	22ff      	movs	r2, #255	; 0xff
 8002da2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002da6:	f001 fd11 	bl	80047cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002daa:	f001 fcdf 	bl	800476c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002db4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002db6:	e011      	b.n	8002ddc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d012      	beq.n	8002de6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3310      	adds	r3, #16
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 fd23 	bl	8003810 <xTaskRemoveFromEventList>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002dd0:	f000 fdfa 	bl	80039c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002dd4:	7bbb      	ldrb	r3, [r7, #14]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ddc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	dce9      	bgt.n	8002db8 <prvUnlockQueue+0x60>
 8002de4:	e000      	b.n	8002de8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002de6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	22ff      	movs	r2, #255	; 0xff
 8002dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002df0:	f001 fcec 	bl	80047cc <vPortExitCritical>
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e04:	f001 fcb2 	bl	800476c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e001      	b.n	8002e1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e1a:	f001 fcd7 	bl	80047cc <vPortExitCritical>

	return xReturn;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002e30:	f001 fc9c 	bl	800476c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d102      	bne.n	8002e46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002e40:	2301      	movs	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e001      	b.n	8002e4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002e4a:	f001 fcbf 	bl	80047cc <vPortExitCritical>

	return xReturn;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	e014      	b.n	8002e92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e68:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <vQueueAddToRegistry+0x4c>)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e74:	490b      	ldr	r1, [pc, #44]	; (8002ea4 <vQueueAddToRegistry+0x4c>)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e7e:	4a09      	ldr	r2, [pc, #36]	; (8002ea4 <vQueueAddToRegistry+0x4c>)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e8a:	e006      	b.n	8002e9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b07      	cmp	r3, #7
 8002e96:	d9e7      	bls.n	8002e68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	20000750 	.word	0x20000750

08002ea8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e016      	b.n	8002ee4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002eb6:	4a10      	ldr	r2, [pc, #64]	; (8002ef8 <vQueueUnregisterQueue+0x50>)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d10b      	bne.n	8002ede <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <vQueueUnregisterQueue+0x50>)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2100      	movs	r1, #0
 8002ecc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002ed0:	4a09      	ldr	r2, [pc, #36]	; (8002ef8 <vQueueUnregisterQueue+0x50>)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4413      	add	r3, r2
 8002ed8:	2200      	movs	r2, #0
 8002eda:	605a      	str	r2, [r3, #4]
				break;
 8002edc:	e006      	b.n	8002eec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b07      	cmp	r3, #7
 8002ee8:	d9e5      	bls.n	8002eb6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000750 	.word	0x20000750

08002efc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f0c:	f001 fc2e 	bl	800476c <vPortEnterCritical>
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f16:	b25b      	sxtb	r3, r3
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d103      	bne.n	8002f26 <vQueueWaitForMessageRestricted+0x2a>
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f2c:	b25b      	sxtb	r3, r3
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d103      	bne.n	8002f3c <vQueueWaitForMessageRestricted+0x40>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f3c:	f001 fc46 	bl	80047cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d106      	bne.n	8002f56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	3324      	adds	r3, #36	; 0x24
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 fc31 	bl	80037b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f7ff fefe 	bl	8002d58 <prvUnlockQueue>
	}
 8002f5c:	bf00      	nop
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b08e      	sub	sp, #56	; 0x38
 8002f68:	af04      	add	r7, sp, #16
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d10a      	bne.n	8002f8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	623b      	str	r3, [r7, #32]
}
 8002f8a:	bf00      	nop
 8002f8c:	e7fe      	b.n	8002f8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <xTaskCreateStatic+0x46>
	__asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	61fb      	str	r3, [r7, #28]
}
 8002fa6:	bf00      	nop
 8002fa8:	e7fe      	b.n	8002fa8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002faa:	235c      	movs	r3, #92	; 0x5c
 8002fac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b5c      	cmp	r3, #92	; 0x5c
 8002fb2:	d00a      	beq.n	8002fca <xTaskCreateStatic+0x66>
	__asm volatile
 8002fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	61bb      	str	r3, [r7, #24]
}
 8002fc6:	bf00      	nop
 8002fc8:	e7fe      	b.n	8002fc8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01e      	beq.n	800300e <xTaskCreateStatic+0xaa>
 8002fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01b      	beq.n	800300e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fe8:	2300      	movs	r3, #0
 8002fea:	9303      	str	r3, [sp, #12]
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	9302      	str	r3, [sp, #8]
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	68b9      	ldr	r1, [r7, #8]
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 f850 	bl	80030a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003006:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003008:	f000 f8d4 	bl	80031b4 <prvAddNewTaskToReadyList>
 800300c:	e001      	b.n	8003012 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003012:	697b      	ldr	r3, [r7, #20]
	}
 8003014:	4618      	mov	r0, r3
 8003016:	3728      	adds	r7, #40	; 0x28
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af04      	add	r7, sp, #16
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	603b      	str	r3, [r7, #0]
 8003028:	4613      	mov	r3, r2
 800302a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800302c:	88fb      	ldrh	r3, [r7, #6]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4618      	mov	r0, r3
 8003032:	f001 fc9b 	bl	800496c <pvPortMalloc>
 8003036:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00e      	beq.n	800305c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800303e:	205c      	movs	r0, #92	; 0x5c
 8003040:	f001 fc94 	bl	800496c <pvPortMalloc>
 8003044:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
 8003052:	e005      	b.n	8003060 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003054:	6978      	ldr	r0, [r7, #20]
 8003056:	f001 fd4d 	bl	8004af4 <vPortFree>
 800305a:	e001      	b.n	8003060 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d017      	beq.n	8003096 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800306e:	88fa      	ldrh	r2, [r7, #6]
 8003070:	2300      	movs	r3, #0
 8003072:	9303      	str	r3, [sp, #12]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	9302      	str	r3, [sp, #8]
 8003078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307a:	9301      	str	r3, [sp, #4]
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f80e 	bl	80030a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800308a:	69f8      	ldr	r0, [r7, #28]
 800308c:	f000 f892 	bl	80031b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003090:	2301      	movs	r3, #1
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	e002      	b.n	800309c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003096:	f04f 33ff 	mov.w	r3, #4294967295
 800309a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800309c:	69bb      	ldr	r3, [r7, #24]
	}
 800309e:	4618      	mov	r0, r3
 80030a0:	3720      	adds	r7, #32
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}

080030a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030a6:	b580      	push	{r7, lr}
 80030a8:	b088      	sub	sp, #32
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	60b9      	str	r1, [r7, #8]
 80030b0:	607a      	str	r2, [r7, #4]
 80030b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80030b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	461a      	mov	r2, r3
 80030be:	21a5      	movs	r1, #165	; 0xa5
 80030c0:	f001 fe5e 	bl	8004d80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030ce:	3b01      	subs	r3, #1
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f023 0307 	bic.w	r3, r3, #7
 80030dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <prvInitialiseNewTask+0x58>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	617b      	str	r3, [r7, #20]
}
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e012      	b.n	800312a <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	7819      	ldrb	r1, [r3, #0]
 800310c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	3334      	adds	r3, #52	; 0x34
 8003114:	460a      	mov	r2, r1
 8003116:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d006      	beq.n	8003132 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	3301      	adds	r3, #1
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d9e9      	bls.n	8003104 <prvInitialiseNewTask+0x5e>
 8003130:	e000      	b.n	8003134 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003132:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	2b37      	cmp	r3, #55	; 0x37
 8003140:	d901      	bls.n	8003146 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003142:	2337      	movs	r3, #55	; 0x37
 8003144:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800314a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800314e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003150:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003154:	2200      	movs	r2, #0
 8003156:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	3304      	adds	r3, #4
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe fe66 	bl	8001e2e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	3318      	adds	r3, #24
 8003166:	4618      	mov	r0, r3
 8003168:	f7fe fe61 	bl	8001e2e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003170:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003174:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003180:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	2200      	movs	r2, #0
 8003186:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	68f9      	ldr	r1, [r7, #12]
 8003194:	69b8      	ldr	r0, [r7, #24]
 8003196:	f001 f9f7 	bl	8004588 <pxPortInitialiseStack>
 800319a:	4602      	mov	r2, r0
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80031a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ac:	bf00      	nop
 80031ae:	3720      	adds	r7, #32
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031bc:	f001 fad6 	bl	800476c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031c0:	4b2d      	ldr	r3, [pc, #180]	; (8003278 <prvAddNewTaskToReadyList+0xc4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	4a2c      	ldr	r2, [pc, #176]	; (8003278 <prvAddNewTaskToReadyList+0xc4>)
 80031c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80031ca:	4b2c      	ldr	r3, [pc, #176]	; (800327c <prvAddNewTaskToReadyList+0xc8>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d109      	bne.n	80031e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80031d2:	4a2a      	ldr	r2, [pc, #168]	; (800327c <prvAddNewTaskToReadyList+0xc8>)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80031d8:	4b27      	ldr	r3, [pc, #156]	; (8003278 <prvAddNewTaskToReadyList+0xc4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d110      	bne.n	8003202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80031e0:	f000 fc16 	bl	8003a10 <prvInitialiseTaskLists>
 80031e4:	e00d      	b.n	8003202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80031e6:	4b26      	ldr	r3, [pc, #152]	; (8003280 <prvAddNewTaskToReadyList+0xcc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80031ee:	4b23      	ldr	r3, [pc, #140]	; (800327c <prvAddNewTaskToReadyList+0xc8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d802      	bhi.n	8003202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80031fc:	4a1f      	ldr	r2, [pc, #124]	; (800327c <prvAddNewTaskToReadyList+0xc8>)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <prvAddNewTaskToReadyList+0xd0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <prvAddNewTaskToReadyList+0xd0>)
 800320a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <prvAddNewTaskToReadyList+0xd0>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	4b1b      	ldr	r3, [pc, #108]	; (8003288 <prvAddNewTaskToReadyList+0xd4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d903      	bls.n	8003228 <prvAddNewTaskToReadyList+0x74>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	4a18      	ldr	r2, [pc, #96]	; (8003288 <prvAddNewTaskToReadyList+0xd4>)
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4a15      	ldr	r2, [pc, #84]	; (800328c <prvAddNewTaskToReadyList+0xd8>)
 8003236:	441a      	add	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3304      	adds	r3, #4
 800323c:	4619      	mov	r1, r3
 800323e:	4610      	mov	r0, r2
 8003240:	f7fe fe01 	bl	8001e46 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003244:	f001 fac2 	bl	80047cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003248:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <prvAddNewTaskToReadyList+0xcc>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003250:	4b0a      	ldr	r3, [pc, #40]	; (800327c <prvAddNewTaskToReadyList+0xc8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	429a      	cmp	r2, r3
 800325c:	d207      	bcs.n	800326e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800325e:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <prvAddNewTaskToReadyList+0xdc>)
 8003260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	f3bf 8f4f 	dsb	sy
 800326a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	20000c64 	.word	0x20000c64
 800327c:	20000790 	.word	0x20000790
 8003280:	20000c70 	.word	0x20000c70
 8003284:	20000c80 	.word	0x20000c80
 8003288:	20000c6c 	.word	0x20000c6c
 800328c:	20000794 	.word	0x20000794
 8003290:	e000ed04 	.word	0xe000ed04

08003294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d017      	beq.n	80032d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <vTaskDelay+0x60>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <vTaskDelay+0x30>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	60bb      	str	r3, [r7, #8]
}
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032c4:	f000 f880 	bl	80033c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032c8:	2100      	movs	r1, #0
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 fdf6 	bl	8003ebc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032d0:	f000 f888 	bl	80033e4 <xTaskResumeAll>
 80032d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d107      	bne.n	80032ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <vTaskDelay+0x64>)
 80032de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032ec:	bf00      	nop
 80032ee:	3710      	adds	r7, #16
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	20000c8c 	.word	0x20000c8c
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800330a:	463a      	mov	r2, r7
 800330c:	1d39      	adds	r1, r7, #4
 800330e:	f107 0308 	add.w	r3, r7, #8
 8003312:	4618      	mov	r0, r3
 8003314:	f7fe fd3a 	bl	8001d8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003318:	6839      	ldr	r1, [r7, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	9202      	str	r2, [sp, #8]
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	2300      	movs	r3, #0
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2300      	movs	r3, #0
 8003328:	460a      	mov	r2, r1
 800332a:	4921      	ldr	r1, [pc, #132]	; (80033b0 <vTaskStartScheduler+0xb4>)
 800332c:	4821      	ldr	r0, [pc, #132]	; (80033b4 <vTaskStartScheduler+0xb8>)
 800332e:	f7ff fe19 	bl	8002f64 <xTaskCreateStatic>
 8003332:	4603      	mov	r3, r0
 8003334:	4a20      	ldr	r2, [pc, #128]	; (80033b8 <vTaskStartScheduler+0xbc>)
 8003336:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003338:	4b1f      	ldr	r3, [pc, #124]	; (80033b8 <vTaskStartScheduler+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003340:	2301      	movs	r3, #1
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e001      	b.n	800334a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003350:	f000 fe08 	bl	8003f64 <xTimerCreateTimerTask>
 8003354:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d116      	bne.n	800338a <vTaskStartScheduler+0x8e>
	__asm volatile
 800335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003360:	f383 8811 	msr	BASEPRI, r3
 8003364:	f3bf 8f6f 	isb	sy
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	613b      	str	r3, [r7, #16]
}
 800336e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003370:	4b12      	ldr	r3, [pc, #72]	; (80033bc <vTaskStartScheduler+0xc0>)
 8003372:	f04f 32ff 	mov.w	r2, #4294967295
 8003376:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <vTaskStartScheduler+0xc4>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800337e:	4b11      	ldr	r3, [pc, #68]	; (80033c4 <vTaskStartScheduler+0xc8>)
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003384:	f001 f980 	bl	8004688 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003388:	e00e      	b.n	80033a8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003390:	d10a      	bne.n	80033a8 <vTaskStartScheduler+0xac>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	60fb      	str	r3, [r7, #12]
}
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <vTaskStartScheduler+0xaa>
}
 80033a8:	bf00      	nop
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	08004dd4 	.word	0x08004dd4
 80033b4:	080039e1 	.word	0x080039e1
 80033b8:	20000c88 	.word	0x20000c88
 80033bc:	20000c84 	.word	0x20000c84
 80033c0:	20000c70 	.word	0x20000c70
 80033c4:	20000c68 	.word	0x20000c68

080033c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80033cc:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <vTaskSuspendAll+0x18>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	4a03      	ldr	r2, [pc, #12]	; (80033e0 <vTaskSuspendAll+0x18>)
 80033d4:	6013      	str	r3, [r2, #0]
}
 80033d6:	bf00      	nop
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	20000c8c 	.word	0x20000c8c

080033e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033ee:	2300      	movs	r3, #0
 80033f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033f2:	4b42      	ldr	r3, [pc, #264]	; (80034fc <xTaskResumeAll+0x118>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10a      	bne.n	8003410 <xTaskResumeAll+0x2c>
	__asm volatile
 80033fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fe:	f383 8811 	msr	BASEPRI, r3
 8003402:	f3bf 8f6f 	isb	sy
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	603b      	str	r3, [r7, #0]
}
 800340c:	bf00      	nop
 800340e:	e7fe      	b.n	800340e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003410:	f001 f9ac 	bl	800476c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003414:	4b39      	ldr	r3, [pc, #228]	; (80034fc <xTaskResumeAll+0x118>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	3b01      	subs	r3, #1
 800341a:	4a38      	ldr	r2, [pc, #224]	; (80034fc <xTaskResumeAll+0x118>)
 800341c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800341e:	4b37      	ldr	r3, [pc, #220]	; (80034fc <xTaskResumeAll+0x118>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d162      	bne.n	80034ec <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003426:	4b36      	ldr	r3, [pc, #216]	; (8003500 <xTaskResumeAll+0x11c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d05e      	beq.n	80034ec <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800342e:	e02f      	b.n	8003490 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003430:	4b34      	ldr	r3, [pc, #208]	; (8003504 <xTaskResumeAll+0x120>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3318      	adds	r3, #24
 800343c:	4618      	mov	r0, r3
 800343e:	f7fe fd5d 	bl	8001efc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3304      	adds	r3, #4
 8003446:	4618      	mov	r0, r3
 8003448:	f7fe fd58 	bl	8001efc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <xTaskResumeAll+0x124>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d903      	bls.n	8003460 <xTaskResumeAll+0x7c>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	4a2a      	ldr	r2, [pc, #168]	; (8003508 <xTaskResumeAll+0x124>)
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	4613      	mov	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4a27      	ldr	r2, [pc, #156]	; (800350c <xTaskResumeAll+0x128>)
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3304      	adds	r3, #4
 8003474:	4619      	mov	r1, r3
 8003476:	4610      	mov	r0, r2
 8003478:	f7fe fce5 	bl	8001e46 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	4b23      	ldr	r3, [pc, #140]	; (8003510 <xTaskResumeAll+0x12c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	429a      	cmp	r2, r3
 8003488:	d302      	bcc.n	8003490 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800348a:	4b22      	ldr	r3, [pc, #136]	; (8003514 <xTaskResumeAll+0x130>)
 800348c:	2201      	movs	r2, #1
 800348e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003490:	4b1c      	ldr	r3, [pc, #112]	; (8003504 <xTaskResumeAll+0x120>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1cb      	bne.n	8003430 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800349e:	f000 fb55 	bl	8003b4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <xTaskResumeAll+0x134>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d010      	beq.n	80034d0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034ae:	f000 f845 	bl	800353c <xTaskIncrementTick>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d002      	beq.n	80034be <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80034b8:	4b16      	ldr	r3, [pc, #88]	; (8003514 <xTaskResumeAll+0x130>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	3b01      	subs	r3, #1
 80034c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f1      	bne.n	80034ae <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80034ca:	4b13      	ldr	r3, [pc, #76]	; (8003518 <xTaskResumeAll+0x134>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <xTaskResumeAll+0x130>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80034d8:	2301      	movs	r3, #1
 80034da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034dc:	4b0f      	ldr	r3, [pc, #60]	; (800351c <xTaskResumeAll+0x138>)
 80034de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	f3bf 8f4f 	dsb	sy
 80034e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034ec:	f001 f96e 	bl	80047cc <vPortExitCritical>

	return xAlreadyYielded;
 80034f0:	68bb      	ldr	r3, [r7, #8]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	20000c8c 	.word	0x20000c8c
 8003500:	20000c64 	.word	0x20000c64
 8003504:	20000c24 	.word	0x20000c24
 8003508:	20000c6c 	.word	0x20000c6c
 800350c:	20000794 	.word	0x20000794
 8003510:	20000790 	.word	0x20000790
 8003514:	20000c78 	.word	0x20000c78
 8003518:	20000c74 	.word	0x20000c74
 800351c:	e000ed04 	.word	0xe000ed04

08003520 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003526:	4b04      	ldr	r3, [pc, #16]	; (8003538 <xTaskGetTickCount+0x18>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800352c:	687b      	ldr	r3, [r7, #4]
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	bc80      	pop	{r7}
 8003536:	4770      	bx	lr
 8003538:	20000c68 	.word	0x20000c68

0800353c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003546:	4b51      	ldr	r3, [pc, #324]	; (800368c <xTaskIncrementTick+0x150>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 808e 	bne.w	800366c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <xTaskIncrementTick+0x154>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003558:	4a4d      	ldr	r2, [pc, #308]	; (8003690 <xTaskIncrementTick+0x154>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d120      	bne.n	80035a6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003564:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <xTaskIncrementTick+0x158>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <xTaskIncrementTick+0x48>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	603b      	str	r3, [r7, #0]
}
 8003580:	bf00      	nop
 8003582:	e7fe      	b.n	8003582 <xTaskIncrementTick+0x46>
 8003584:	4b43      	ldr	r3, [pc, #268]	; (8003694 <xTaskIncrementTick+0x158>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b43      	ldr	r3, [pc, #268]	; (8003698 <xTaskIncrementTick+0x15c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a41      	ldr	r2, [pc, #260]	; (8003694 <xTaskIncrementTick+0x158>)
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	4a41      	ldr	r2, [pc, #260]	; (8003698 <xTaskIncrementTick+0x15c>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b40      	ldr	r3, [pc, #256]	; (800369c <xTaskIncrementTick+0x160>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3301      	adds	r3, #1
 800359e:	4a3f      	ldr	r2, [pc, #252]	; (800369c <xTaskIncrementTick+0x160>)
 80035a0:	6013      	str	r3, [r2, #0]
 80035a2:	f000 fad3 	bl	8003b4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035a6:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <xTaskIncrementTick+0x164>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d34e      	bcc.n	800364e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b0:	4b38      	ldr	r3, [pc, #224]	; (8003694 <xTaskIncrementTick+0x158>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <xTaskIncrementTick+0x82>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <xTaskIncrementTick+0x84>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c4:	4b36      	ldr	r3, [pc, #216]	; (80036a0 <xTaskIncrementTick+0x164>)
 80035c6:	f04f 32ff 	mov.w	r2, #4294967295
 80035ca:	601a      	str	r2, [r3, #0]
					break;
 80035cc:	e03f      	b.n	800364e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035ce:	4b31      	ldr	r3, [pc, #196]	; (8003694 <xTaskIncrementTick+0x158>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d203      	bcs.n	80035ee <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035e6:	4a2e      	ldr	r2, [pc, #184]	; (80036a0 <xTaskIncrementTick+0x164>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6013      	str	r3, [r2, #0]
						break;
 80035ec:	e02f      	b.n	800364e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fe fc82 	bl	8001efc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d004      	beq.n	800360a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	3318      	adds	r3, #24
 8003604:	4618      	mov	r0, r3
 8003606:	f7fe fc79 	bl	8001efc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <xTaskIncrementTick+0x168>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d903      	bls.n	800361e <xTaskIncrementTick+0xe2>
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361a:	4a22      	ldr	r2, [pc, #136]	; (80036a4 <xTaskIncrementTick+0x168>)
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4a1f      	ldr	r2, [pc, #124]	; (80036a8 <xTaskIncrementTick+0x16c>)
 800362c:	441a      	add	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3304      	adds	r3, #4
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7fe fc06 	bl	8001e46 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363e:	4b1b      	ldr	r3, [pc, #108]	; (80036ac <xTaskIncrementTick+0x170>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	429a      	cmp	r2, r3
 8003646:	d3b3      	bcc.n	80035b0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003648:	2301      	movs	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800364c:	e7b0      	b.n	80035b0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800364e:	4b17      	ldr	r3, [pc, #92]	; (80036ac <xTaskIncrementTick+0x170>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	4914      	ldr	r1, [pc, #80]	; (80036a8 <xTaskIncrementTick+0x16c>)
 8003656:	4613      	mov	r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	4413      	add	r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d907      	bls.n	8003676 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003666:	2301      	movs	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e004      	b.n	8003676 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800366c:	4b10      	ldr	r3, [pc, #64]	; (80036b0 <xTaskIncrementTick+0x174>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3301      	adds	r3, #1
 8003672:	4a0f      	ldr	r2, [pc, #60]	; (80036b0 <xTaskIncrementTick+0x174>)
 8003674:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003676:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <xTaskIncrementTick+0x178>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800367e:	2301      	movs	r3, #1
 8003680:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003682:	697b      	ldr	r3, [r7, #20]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000c8c 	.word	0x20000c8c
 8003690:	20000c68 	.word	0x20000c68
 8003694:	20000c1c 	.word	0x20000c1c
 8003698:	20000c20 	.word	0x20000c20
 800369c:	20000c7c 	.word	0x20000c7c
 80036a0:	20000c84 	.word	0x20000c84
 80036a4:	20000c6c 	.word	0x20000c6c
 80036a8:	20000794 	.word	0x20000794
 80036ac:	20000790 	.word	0x20000790
 80036b0:	20000c74 	.word	0x20000c74
 80036b4:	20000c78 	.word	0x20000c78

080036b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036be:	4b27      	ldr	r3, [pc, #156]	; (800375c <vTaskSwitchContext+0xa4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036c6:	4b26      	ldr	r3, [pc, #152]	; (8003760 <vTaskSwitchContext+0xa8>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036cc:	e041      	b.n	8003752 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80036ce:	4b24      	ldr	r3, [pc, #144]	; (8003760 <vTaskSwitchContext+0xa8>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036d4:	4b23      	ldr	r3, [pc, #140]	; (8003764 <vTaskSwitchContext+0xac>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e010      	b.n	80036fe <vTaskSwitchContext+0x46>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <vTaskSwitchContext+0x40>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	607b      	str	r3, [r7, #4]
}
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <vTaskSwitchContext+0x3e>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	60fb      	str	r3, [r7, #12]
 80036fe:	491a      	ldr	r1, [pc, #104]	; (8003768 <vTaskSwitchContext+0xb0>)
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0e4      	beq.n	80036dc <vTaskSwitchContext+0x24>
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4a12      	ldr	r2, [pc, #72]	; (8003768 <vTaskSwitchContext+0xb0>)
 800371e:	4413      	add	r3, r2
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	605a      	str	r2, [r3, #4]
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	3308      	adds	r3, #8
 8003734:	429a      	cmp	r2, r3
 8003736:	d104      	bne.n	8003742 <vTaskSwitchContext+0x8a>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a08      	ldr	r2, [pc, #32]	; (800376c <vTaskSwitchContext+0xb4>)
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4a05      	ldr	r2, [pc, #20]	; (8003764 <vTaskSwitchContext+0xac>)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6013      	str	r3, [r2, #0]
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	20000c8c 	.word	0x20000c8c
 8003760:	20000c78 	.word	0x20000c78
 8003764:	20000c6c 	.word	0x20000c6c
 8003768:	20000794 	.word	0x20000794
 800376c:	20000790 	.word	0x20000790

08003770 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10a      	bne.n	8003796 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	60fb      	str	r3, [r7, #12]
}
 8003792:	bf00      	nop
 8003794:	e7fe      	b.n	8003794 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003796:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <vTaskPlaceOnEventList+0x44>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	3318      	adds	r3, #24
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7fe fb74 	bl	8001e8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037a4:	2101      	movs	r1, #1
 80037a6:	6838      	ldr	r0, [r7, #0]
 80037a8:	f000 fb88 	bl	8003ebc <prvAddCurrentTaskToDelayedList>
}
 80037ac:	bf00      	nop
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	20000790 	.word	0x20000790

080037b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af00      	add	r7, sp, #0
 80037be:	60f8      	str	r0, [r7, #12]
 80037c0:	60b9      	str	r1, [r7, #8]
 80037c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10a      	bne.n	80037e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	617b      	str	r3, [r7, #20]
}
 80037dc:	bf00      	nop
 80037de:	e7fe      	b.n	80037de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037e0:	4b0a      	ldr	r3, [pc, #40]	; (800380c <vTaskPlaceOnEventListRestricted+0x54>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3318      	adds	r3, #24
 80037e6:	4619      	mov	r1, r3
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7fe fb2c 	bl	8001e46 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d002      	beq.n	80037fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80037f4:	f04f 33ff 	mov.w	r3, #4294967295
 80037f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	68b8      	ldr	r0, [r7, #8]
 80037fe:	f000 fb5d 	bl	8003ebc <prvAddCurrentTaskToDelayedList>
	}
 8003802:	bf00      	nop
 8003804:	3718      	adds	r7, #24
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000790 	.word	0x20000790

08003810 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	60fb      	str	r3, [r7, #12]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	3318      	adds	r3, #24
 8003840:	4618      	mov	r0, r3
 8003842:	f7fe fb5b 	bl	8001efc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003846:	4b1e      	ldr	r3, [pc, #120]	; (80038c0 <xTaskRemoveFromEventList+0xb0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11d      	bne.n	800388a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	3304      	adds	r3, #4
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fb52 	bl	8001efc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <xTaskRemoveFromEventList+0xb4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d903      	bls.n	800386c <xTaskRemoveFromEventList+0x5c>
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	4a16      	ldr	r2, [pc, #88]	; (80038c4 <xTaskRemoveFromEventList+0xb4>)
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <xTaskRemoveFromEventList+0xb8>)
 800387a:	441a      	add	r2, r3
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	3304      	adds	r3, #4
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f7fe fadf 	bl	8001e46 <vListInsertEnd>
 8003888:	e005      	b.n	8003896 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	3318      	adds	r3, #24
 800388e:	4619      	mov	r1, r3
 8003890:	480e      	ldr	r0, [pc, #56]	; (80038cc <xTaskRemoveFromEventList+0xbc>)
 8003892:	f7fe fad8 	bl	8001e46 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <xTaskRemoveFromEventList+0xc0>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d905      	bls.n	80038b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038a8:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <xTaskRemoveFromEventList+0xc4>)
 80038aa:	2201      	movs	r2, #1
 80038ac:	601a      	str	r2, [r3, #0]
 80038ae:	e001      	b.n	80038b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80038b4:	697b      	ldr	r3, [r7, #20]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000c8c 	.word	0x20000c8c
 80038c4:	20000c6c 	.word	0x20000c6c
 80038c8:	20000794 	.word	0x20000794
 80038cc:	20000c24 	.word	0x20000c24
 80038d0:	20000790 	.word	0x20000790
 80038d4:	20000c78 	.word	0x20000c78

080038d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038e0:	4b06      	ldr	r3, [pc, #24]	; (80038fc <vTaskInternalSetTimeOutState+0x24>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <vTaskInternalSetTimeOutState+0x28>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	605a      	str	r2, [r3, #4]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000c7c 	.word	0x20000c7c
 8003900:	20000c68 	.word	0x20000c68

08003904 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d10a      	bne.n	800392a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	613b      	str	r3, [r7, #16]
}
 8003926:	bf00      	nop
 8003928:	e7fe      	b.n	8003928 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60fb      	str	r3, [r7, #12]
}
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003946:	f000 ff11 	bl	800476c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <xTaskCheckForTimeOut+0xbc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d102      	bne.n	800396a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003964:	2300      	movs	r3, #0
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e023      	b.n	80039b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <xTaskCheckForTimeOut+0xc0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	429a      	cmp	r2, r3
 8003974:	d007      	beq.n	8003986 <xTaskCheckForTimeOut+0x82>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	429a      	cmp	r2, r3
 800397e:	d302      	bcc.n	8003986 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003980:	2301      	movs	r3, #1
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	e015      	b.n	80039b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	429a      	cmp	r2, r3
 800398e:	d20b      	bcs.n	80039a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	1ad2      	subs	r2, r2, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ff9b 	bl	80038d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	e004      	b.n	80039b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039ae:	2301      	movs	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039b2:	f000 ff0b 	bl	80047cc <vPortExitCritical>

	return xReturn;
 80039b6:	69fb      	ldr	r3, [r7, #28]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3720      	adds	r7, #32
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	20000c68 	.word	0x20000c68
 80039c4:	20000c7c 	.word	0x20000c7c

080039c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039cc:	4b03      	ldr	r3, [pc, #12]	; (80039dc <vTaskMissedYield+0x14>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]
}
 80039d2:	bf00      	nop
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000c78 	.word	0x20000c78

080039e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039e8:	f000 f852 	bl	8003a90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <prvIdleTask+0x28>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d9f9      	bls.n	80039e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039f4:	4b05      	ldr	r3, [pc, #20]	; (8003a0c <prvIdleTask+0x2c>)
 80039f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a04:	e7f0      	b.n	80039e8 <prvIdleTask+0x8>
 8003a06:	bf00      	nop
 8003a08:	20000794 	.word	0x20000794
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	e00c      	b.n	8003a36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <prvInitialiseTaskLists+0x60>)
 8003a28:	4413      	add	r3, r2
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe f9e0 	bl	8001df0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	3301      	adds	r3, #1
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b37      	cmp	r3, #55	; 0x37
 8003a3a:	d9ef      	bls.n	8003a1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a3c:	480d      	ldr	r0, [pc, #52]	; (8003a74 <prvInitialiseTaskLists+0x64>)
 8003a3e:	f7fe f9d7 	bl	8001df0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a42:	480d      	ldr	r0, [pc, #52]	; (8003a78 <prvInitialiseTaskLists+0x68>)
 8003a44:	f7fe f9d4 	bl	8001df0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a48:	480c      	ldr	r0, [pc, #48]	; (8003a7c <prvInitialiseTaskLists+0x6c>)
 8003a4a:	f7fe f9d1 	bl	8001df0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a4e:	480c      	ldr	r0, [pc, #48]	; (8003a80 <prvInitialiseTaskLists+0x70>)
 8003a50:	f7fe f9ce 	bl	8001df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a54:	480b      	ldr	r0, [pc, #44]	; (8003a84 <prvInitialiseTaskLists+0x74>)
 8003a56:	f7fe f9cb 	bl	8001df0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <prvInitialiseTaskLists+0x78>)
 8003a5c:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <prvInitialiseTaskLists+0x64>)
 8003a5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <prvInitialiseTaskLists+0x7c>)
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <prvInitialiseTaskLists+0x68>)
 8003a64:	601a      	str	r2, [r3, #0]
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	20000794 	.word	0x20000794
 8003a74:	20000bf4 	.word	0x20000bf4
 8003a78:	20000c08 	.word	0x20000c08
 8003a7c:	20000c24 	.word	0x20000c24
 8003a80:	20000c38 	.word	0x20000c38
 8003a84:	20000c50 	.word	0x20000c50
 8003a88:	20000c1c 	.word	0x20000c1c
 8003a8c:	20000c20 	.word	0x20000c20

08003a90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a96:	e019      	b.n	8003acc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a98:	f000 fe68 	bl	800476c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a9c:	4b10      	ldr	r3, [pc, #64]	; (8003ae0 <prvCheckTasksWaitingTermination+0x50>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3304      	adds	r3, #4
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe fa27 	bl	8001efc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <prvCheckTasksWaitingTermination+0x54>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	4a0b      	ldr	r2, [pc, #44]	; (8003ae4 <prvCheckTasksWaitingTermination+0x54>)
 8003ab6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <prvCheckTasksWaitingTermination+0x58>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	3b01      	subs	r3, #1
 8003abe:	4a0a      	ldr	r2, [pc, #40]	; (8003ae8 <prvCheckTasksWaitingTermination+0x58>)
 8003ac0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ac2:	f000 fe83 	bl	80047cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f810 	bl	8003aec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003acc:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <prvCheckTasksWaitingTermination+0x58>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e1      	bne.n	8003a98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ad4:	bf00      	nop
 8003ad6:	bf00      	nop
 8003ad8:	3708      	adds	r7, #8
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	20000c38 	.word	0x20000c38
 8003ae4:	20000c64 	.word	0x20000c64
 8003ae8:	20000c4c 	.word	0x20000c4c

08003aec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d108      	bne.n	8003b10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fff6 	bl	8004af4 <vPortFree>
				vPortFree( pxTCB );
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 fff3 	bl	8004af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b0e:	e018      	b.n	8003b42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d103      	bne.n	8003b22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 ffea 	bl	8004af4 <vPortFree>
	}
 8003b20:	e00f      	b.n	8003b42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d00a      	beq.n	8003b42 <prvDeleteTCB+0x56>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	60fb      	str	r3, [r7, #12]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <prvDeleteTCB+0x54>
	}
 8003b42:	bf00      	nop
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b52:	4b0e      	ldr	r3, [pc, #56]	; (8003b8c <prvResetNextTaskUnblockTime+0x40>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d101      	bne.n	8003b60 <prvResetNextTaskUnblockTime+0x14>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <prvResetNextTaskUnblockTime+0x16>
 8003b60:	2300      	movs	r3, #0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d004      	beq.n	8003b70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b66:	4b0a      	ldr	r3, [pc, #40]	; (8003b90 <prvResetNextTaskUnblockTime+0x44>)
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b6e:	e008      	b.n	8003b82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <prvResetNextTaskUnblockTime+0x40>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4a04      	ldr	r2, [pc, #16]	; (8003b90 <prvResetNextTaskUnblockTime+0x44>)
 8003b80:	6013      	str	r3, [r2, #0]
}
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	20000c1c 	.word	0x20000c1c
 8003b90:	20000c84 	.word	0x20000c84

08003b94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b9a:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <xTaskGetSchedulerState+0x34>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d102      	bne.n	8003ba8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	e008      	b.n	8003bba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba8:	4b08      	ldr	r3, [pc, #32]	; (8003bcc <xTaskGetSchedulerState+0x38>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	607b      	str	r3, [r7, #4]
 8003bb4:	e001      	b.n	8003bba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bba:	687b      	ldr	r3, [r7, #4]
	}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000c70 	.word	0x20000c70
 8003bcc:	20000c8c 	.word	0x20000c8c

08003bd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d056      	beq.n	8003c94 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <xTaskPriorityInherit+0xd0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d246      	bcs.n	8003c82 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	db06      	blt.n	8003c0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bfc:	4b28      	ldr	r3, [pc, #160]	; (8003ca0 <xTaskPriorityInherit+0xd0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	6959      	ldr	r1, [r3, #20]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c12:	4613      	mov	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4a22      	ldr	r2, [pc, #136]	; (8003ca4 <xTaskPriorityInherit+0xd4>)
 8003c1c:	4413      	add	r3, r2
 8003c1e:	4299      	cmp	r1, r3
 8003c20:	d101      	bne.n	8003c26 <xTaskPriorityInherit+0x56>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <xTaskPriorityInherit+0x58>
 8003c26:	2300      	movs	r3, #0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d022      	beq.n	8003c72 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe f963 	bl	8001efc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c36:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <xTaskPriorityInherit+0xd0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	4b18      	ldr	r3, [pc, #96]	; (8003ca8 <xTaskPriorityInherit+0xd8>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d903      	bls.n	8003c54 <xTaskPriorityInherit+0x84>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <xTaskPriorityInherit+0xd8>)
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4a10      	ldr	r2, [pc, #64]	; (8003ca4 <xTaskPriorityInherit+0xd4>)
 8003c62:	441a      	add	r2, r3
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f7fe f8eb 	bl	8001e46 <vListInsertEnd>
 8003c70:	e004      	b.n	8003c7c <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c72:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <xTaskPriorityInherit+0xd0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	60fb      	str	r3, [r7, #12]
 8003c80:	e008      	b.n	8003c94 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <xTaskPriorityInherit+0xd0>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d201      	bcs.n	8003c94 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003c90:	2301      	movs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c94:	68fb      	ldr	r3, [r7, #12]
	}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000790 	.word	0x20000790
 8003ca4:	20000794 	.word	0x20000794
 8003ca8:	20000c6c 	.word	0x20000c6c

08003cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d056      	beq.n	8003d70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003cc2:	4b2e      	ldr	r3, [pc, #184]	; (8003d7c <xTaskPriorityDisinherit+0xd0>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d00a      	beq.n	8003ce2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60fb      	str	r3, [r7, #12]
}
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cee:	f383 8811 	msr	BASEPRI, r3
 8003cf2:	f3bf 8f6f 	isb	sy
 8003cf6:	f3bf 8f4f 	dsb	sy
 8003cfa:	60bb      	str	r3, [r7, #8]
}
 8003cfc:	bf00      	nop
 8003cfe:	e7fe      	b.n	8003cfe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d04:	1e5a      	subs	r2, r3, #1
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d02c      	beq.n	8003d70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d128      	bne.n	8003d70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe f8ea 	bl	8001efc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <xTaskPriorityDisinherit+0xd4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d903      	bls.n	8003d50 <xTaskPriorityDisinherit+0xa4>
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	4a0c      	ldr	r2, [pc, #48]	; (8003d80 <xTaskPriorityDisinherit+0xd4>)
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4a09      	ldr	r2, [pc, #36]	; (8003d84 <xTaskPriorityDisinherit+0xd8>)
 8003d5e:	441a      	add	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4610      	mov	r0, r2
 8003d68:	f7fe f86d 	bl	8001e46 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d70:	697b      	ldr	r3, [r7, #20]
	}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3718      	adds	r7, #24
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000790 	.word	0x20000790
 8003d80:	20000c6c 	.word	0x20000c6c
 8003d84:	20000794 	.word	0x20000794

08003d88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d06f      	beq.n	8003e80 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	60fb      	str	r3, [r7, #12]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d902      	bls.n	8003dce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	61fb      	str	r3, [r7, #28]
 8003dcc:	e002      	b.n	8003dd4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d050      	beq.n	8003e80 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d14b      	bne.n	8003e80 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003de8:	4b27      	ldr	r3, [pc, #156]	; (8003e88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10a      	bne.n	8003e08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	60bb      	str	r3, [r7, #8]
}
 8003e04:	bf00      	nop
 8003e06:	e7fe      	b.n	8003e06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	69fa      	ldr	r2, [r7, #28]
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	db04      	blt.n	8003e26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	6959      	ldr	r1, [r3, #20]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003e36:	4413      	add	r3, r2
 8003e38:	4299      	cmp	r1, r3
 8003e3a:	d101      	bne.n	8003e40 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003e40:	2300      	movs	r3, #0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01c      	beq.n	8003e80 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7fe f856 	bl	8001efc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d903      	bls.n	8003e64 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e60:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4a06      	ldr	r2, [pc, #24]	; (8003e8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8003e72:	441a      	add	r2, r3
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4610      	mov	r0, r2
 8003e7c:	f7fd ffe3 	bl	8001e46 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e80:	bf00      	nop
 8003e82:	3720      	adds	r7, #32
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000790 	.word	0x20000790
 8003e8c:	20000794 	.word	0x20000794
 8003e90:	20000c6c 	.word	0x20000c6c

08003e94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ea6:	3201      	adds	r2, #1
 8003ea8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003eaa:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8003eac:	681b      	ldr	r3, [r3, #0]
	}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	20000790 	.word	0x20000790

08003ebc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ec6:	4b21      	ldr	r3, [pc, #132]	; (8003f4c <prvAddCurrentTaskToDelayedList+0x90>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ecc:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe f812 	bl	8001efc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d10a      	bne.n	8003ef6 <prvAddCurrentTaskToDelayedList+0x3a>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d007      	beq.n	8003ef6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ee6:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	3304      	adds	r3, #4
 8003eec:	4619      	mov	r1, r3
 8003eee:	4819      	ldr	r0, [pc, #100]	; (8003f54 <prvAddCurrentTaskToDelayedList+0x98>)
 8003ef0:	f7fd ffa9 	bl	8001e46 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ef4:	e026      	b.n	8003f44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4413      	add	r3, r2
 8003efc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003efe:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d209      	bcs.n	8003f22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3304      	adds	r3, #4
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4610      	mov	r0, r2
 8003f1c:	f7fd ffb6 	bl	8001e8c <vListInsert>
}
 8003f20:	e010      	b.n	8003f44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f22:	4b0e      	ldr	r3, [pc, #56]	; (8003f5c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4610      	mov	r0, r2
 8003f30:	f7fd ffac 	bl	8001e8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f34:	4b0a      	ldr	r3, [pc, #40]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68ba      	ldr	r2, [r7, #8]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d202      	bcs.n	8003f44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f3e:	4a08      	ldr	r2, [pc, #32]	; (8003f60 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	6013      	str	r3, [r2, #0]
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	20000c68 	.word	0x20000c68
 8003f50:	20000790 	.word	0x20000790
 8003f54:	20000c50 	.word	0x20000c50
 8003f58:	20000c20 	.word	0x20000c20
 8003f5c:	20000c1c 	.word	0x20000c1c
 8003f60:	20000c84 	.word	0x20000c84

08003f64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b08a      	sub	sp, #40	; 0x28
 8003f68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f6e:	f000 facb 	bl	8004508 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f72:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <xTimerCreateTimerTask+0x80>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d021      	beq.n	8003fbe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f82:	1d3a      	adds	r2, r7, #4
 8003f84:	f107 0108 	add.w	r1, r7, #8
 8003f88:	f107 030c 	add.w	r3, r7, #12
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fd ff15 	bl	8001dbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	9202      	str	r2, [sp, #8]
 8003f9a:	9301      	str	r3, [sp, #4]
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	460a      	mov	r2, r1
 8003fa4:	4910      	ldr	r1, [pc, #64]	; (8003fe8 <xTimerCreateTimerTask+0x84>)
 8003fa6:	4811      	ldr	r0, [pc, #68]	; (8003fec <xTimerCreateTimerTask+0x88>)
 8003fa8:	f7fe ffdc 	bl	8002f64 <xTaskCreateStatic>
 8003fac:	4603      	mov	r3, r0
 8003fae:	4a10      	ldr	r2, [pc, #64]	; (8003ff0 <xTimerCreateTimerTask+0x8c>)
 8003fb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <xTimerCreateTimerTask+0x8c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	613b      	str	r3, [r7, #16]
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003fda:	697b      	ldr	r3, [r7, #20]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	20000cc0 	.word	0x20000cc0
 8003fe8:	08004ddc 	.word	0x08004ddc
 8003fec:	08004111 	.word	0x08004111
 8003ff0:	20000cc4 	.word	0x20000cc4

08003ff4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08a      	sub	sp, #40	; 0x28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
 8004000:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xTimerGenericCommand+0x2e>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	623b      	str	r3, [r7, #32]
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004022:	4b1a      	ldr	r3, [pc, #104]	; (800408c <xTimerGenericCommand+0x98>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d02a      	beq.n	8004080 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b05      	cmp	r3, #5
 800403a:	dc18      	bgt.n	800406e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800403c:	f7ff fdaa 	bl	8003b94 <xTaskGetSchedulerState>
 8004040:	4603      	mov	r3, r0
 8004042:	2b02      	cmp	r3, #2
 8004044:	d109      	bne.n	800405a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004046:	4b11      	ldr	r3, [pc, #68]	; (800408c <xTimerGenericCommand+0x98>)
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	f107 0110 	add.w	r1, r7, #16
 800404e:	2300      	movs	r3, #0
 8004050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004052:	f7fe f927 	bl	80022a4 <xQueueGenericSend>
 8004056:	6278      	str	r0, [r7, #36]	; 0x24
 8004058:	e012      	b.n	8004080 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800405a:	4b0c      	ldr	r3, [pc, #48]	; (800408c <xTimerGenericCommand+0x98>)
 800405c:	6818      	ldr	r0, [r3, #0]
 800405e:	f107 0110 	add.w	r1, r7, #16
 8004062:	2300      	movs	r3, #0
 8004064:	2200      	movs	r2, #0
 8004066:	f7fe f91d 	bl	80022a4 <xQueueGenericSend>
 800406a:	6278      	str	r0, [r7, #36]	; 0x24
 800406c:	e008      	b.n	8004080 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800406e:	4b07      	ldr	r3, [pc, #28]	; (800408c <xTimerGenericCommand+0x98>)
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	f107 0110 	add.w	r1, r7, #16
 8004076:	2300      	movs	r3, #0
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	f7fe fa11 	bl	80024a0 <xQueueGenericSendFromISR>
 800407e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004082:	4618      	mov	r0, r3
 8004084:	3728      	adds	r7, #40	; 0x28
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000cc0 	.word	0x20000cc0

08004090 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b088      	sub	sp, #32
 8004094:	af02      	add	r7, sp, #8
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800409a:	4b1c      	ldr	r3, [pc, #112]	; (800410c <prvProcessExpiredTimer+0x7c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fd ff27 	bl	8001efc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d122      	bne.n	80040fc <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	18d1      	adds	r1, r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	6978      	ldr	r0, [r7, #20]
 80040c4:	f000 f8c8 	bl	8004258 <prvInsertTimerInActiveList>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d016      	beq.n	80040fc <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040ce:	2300      	movs	r3, #0
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	2300      	movs	r3, #0
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	2100      	movs	r1, #0
 80040d8:	6978      	ldr	r0, [r7, #20]
 80040da:	f7ff ff8b 	bl	8003ff4 <xTimerGenericCommand>
 80040de:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10a      	bne.n	80040fc <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	60fb      	str	r3, [r7, #12]
}
 80040f8:	bf00      	nop
 80040fa:	e7fe      	b.n	80040fa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	4798      	blx	r3
}
 8004104:	bf00      	nop
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20000cb8 	.word	0x20000cb8

08004110 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004118:	f107 0308 	add.w	r3, r7, #8
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f857 	bl	80041d0 <prvGetNextExpireTime>
 8004122:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4619      	mov	r1, r3
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f803 	bl	8004134 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800412e:	f000 f8d5 	bl	80042dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004132:	e7f1      	b.n	8004118 <prvTimerTask+0x8>

08004134 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800413e:	f7ff f943 	bl	80033c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004142:	f107 0308 	add.w	r3, r7, #8
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f866 	bl	8004218 <prvSampleTimeNow>
 800414c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d130      	bne.n	80041b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10a      	bne.n	8004170 <prvProcessTimerOrBlockTask+0x3c>
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	429a      	cmp	r2, r3
 8004160:	d806      	bhi.n	8004170 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004162:	f7ff f93f 	bl	80033e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004166:	68f9      	ldr	r1, [r7, #12]
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff ff91 	bl	8004090 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800416e:	e024      	b.n	80041ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d008      	beq.n	8004188 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004176:	4b13      	ldr	r3, [pc, #76]	; (80041c4 <prvProcessTimerOrBlockTask+0x90>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	bf0c      	ite	eq
 8004180:	2301      	moveq	r3, #1
 8004182:	2300      	movne	r3, #0
 8004184:	b2db      	uxtb	r3, r3
 8004186:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <prvProcessTimerOrBlockTask+0x94>)
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	4619      	mov	r1, r3
 8004196:	f7fe feb1 	bl	8002efc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800419a:	f7ff f923 	bl	80033e4 <xTaskResumeAll>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041a4:	4b09      	ldr	r3, [pc, #36]	; (80041cc <prvProcessTimerOrBlockTask+0x98>)
 80041a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	f3bf 8f6f 	isb	sy
}
 80041b4:	e001      	b.n	80041ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041b6:	f7ff f915 	bl	80033e4 <xTaskResumeAll>
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000cbc 	.word	0x20000cbc
 80041c8:	20000cc0 	.word	0x20000cc0
 80041cc:	e000ed04 	.word	0xe000ed04

080041d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <prvGetNextExpireTime+0x44>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041f6:	4b07      	ldr	r3, [pc, #28]	; (8004214 <prvGetNextExpireTime+0x44>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	e001      	b.n	8004206 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004206:	68fb      	ldr	r3, [r7, #12]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	bc80      	pop	{r7}
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000cb8 	.word	0x20000cb8

08004218 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004220:	f7ff f97e 	bl	8003520 <xTaskGetTickCount>
 8004224:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <prvSampleTimeNow+0x3c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	429a      	cmp	r2, r3
 800422e:	d205      	bcs.n	800423c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004230:	f000 f908 	bl	8004444 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e002      	b.n	8004242 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004242:	4a04      	ldr	r2, [pc, #16]	; (8004254 <prvSampleTimeNow+0x3c>)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004248:	68fb      	ldr	r3, [r7, #12]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000cc8 	.word	0x20000cc8

08004258 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	429a      	cmp	r2, r3
 800427c:	d812      	bhi.n	80042a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427e:	687a      	ldr	r2, [r7, #4]
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	1ad2      	subs	r2, r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	699b      	ldr	r3, [r3, #24]
 8004288:	429a      	cmp	r2, r3
 800428a:	d302      	bcc.n	8004292 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800428c:	2301      	movs	r3, #1
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e01b      	b.n	80042ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <prvInsertTimerInActiveList+0x7c>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	3304      	adds	r3, #4
 800429a:	4619      	mov	r1, r3
 800429c:	4610      	mov	r0, r2
 800429e:	f7fd fdf5 	bl	8001e8c <vListInsert>
 80042a2:	e012      	b.n	80042ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d206      	bcs.n	80042ba <prvInsertTimerInActiveList+0x62>
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d302      	bcc.n	80042ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042b4:	2301      	movs	r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	e007      	b.n	80042ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <prvInsertTimerInActiveList+0x80>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3304      	adds	r3, #4
 80042c2:	4619      	mov	r1, r3
 80042c4:	4610      	mov	r0, r2
 80042c6:	f7fd fde1 	bl	8001e8c <vListInsert>
		}
	}

	return xProcessTimerNow;
 80042ca:	697b      	ldr	r3, [r7, #20]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	20000cbc 	.word	0x20000cbc
 80042d8:	20000cb8 	.word	0x20000cb8

080042dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08e      	sub	sp, #56	; 0x38
 80042e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042e2:	e09d      	b.n	8004420 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	da18      	bge.n	800431c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042ea:	1d3b      	adds	r3, r7, #4
 80042ec:	3304      	adds	r3, #4
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10a      	bne.n	800430c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	61fb      	str	r3, [r7, #28]
}
 8004308:	bf00      	nop
 800430a:	e7fe      	b.n	800430a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800430c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004312:	6850      	ldr	r0, [r2, #4]
 8004314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004316:	6892      	ldr	r2, [r2, #8]
 8004318:	4611      	mov	r1, r2
 800431a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	db7d      	blt.n	800441e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d004      	beq.n	8004338 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	3304      	adds	r3, #4
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd fde2 	bl	8001efc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004338:	463b      	mov	r3, r7
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff6c 	bl	8004218 <prvSampleTimeNow>
 8004340:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b09      	cmp	r3, #9
 8004346:	d86b      	bhi.n	8004420 <prvProcessReceivedCommands+0x144>
 8004348:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <prvProcessReceivedCommands+0x74>)
 800434a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434e:	bf00      	nop
 8004350:	08004379 	.word	0x08004379
 8004354:	08004379 	.word	0x08004379
 8004358:	08004379 	.word	0x08004379
 800435c:	08004421 	.word	0x08004421
 8004360:	080043d5 	.word	0x080043d5
 8004364:	0800440d 	.word	0x0800440d
 8004368:	08004379 	.word	0x08004379
 800436c:	08004379 	.word	0x08004379
 8004370:	08004421 	.word	0x08004421
 8004374:	080043d5 	.word	0x080043d5
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	18d1      	adds	r1, r2, r3
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004386:	f7ff ff67 	bl	8004258 <prvInsertTimerInActiveList>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d047      	beq.n	8004420 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004396:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d13f      	bne.n	8004420 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	441a      	add	r2, r3
 80043a8:	2300      	movs	r3, #0
 80043aa:	9300      	str	r3, [sp, #0]
 80043ac:	2300      	movs	r3, #0
 80043ae:	2100      	movs	r1, #0
 80043b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043b2:	f7ff fe1f 	bl	8003ff4 <xTimerGenericCommand>
 80043b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80043b8:	6a3b      	ldr	r3, [r7, #32]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d130      	bne.n	8004420 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	61bb      	str	r3, [r7, #24]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10a      	bne.n	80043f8 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	617b      	str	r3, [r7, #20]
}
 80043f4:	bf00      	nop
 80043f6:	e7fe      	b.n	80043f6 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	18d1      	adds	r1, r2, r3
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004406:	f7ff ff27 	bl	8004258 <prvInsertTimerInActiveList>
					break;
 800440a:	e009      	b.n	8004420 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800440c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d104      	bne.n	8004420 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004418:	f000 fb6c 	bl	8004af4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800441c:	e000      	b.n	8004420 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800441e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004420:	4b07      	ldr	r3, [pc, #28]	; (8004440 <prvProcessReceivedCommands+0x164>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	1d39      	adds	r1, r7, #4
 8004426:	2200      	movs	r2, #0
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe f95f 	bl	80026ec <xQueueReceive>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	f47f af57 	bne.w	80042e4 <prvProcessReceivedCommands+0x8>
	}
}
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	3730      	adds	r7, #48	; 0x30
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	20000cc0 	.word	0x20000cc0

08004444 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b088      	sub	sp, #32
 8004448:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800444a:	e045      	b.n	80044d8 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800444c:	4b2c      	ldr	r3, [pc, #176]	; (8004500 <prvSwitchTimerLists+0xbc>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004456:	4b2a      	ldr	r3, [pc, #168]	; (8004500 <prvSwitchTimerLists+0xbc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3304      	adds	r3, #4
 8004464:	4618      	mov	r0, r3
 8004466:	f7fd fd49 	bl	8001efc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	68f8      	ldr	r0, [r7, #12]
 8004470:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d12e      	bne.n	80044d8 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4413      	add	r3, r2
 8004482:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	429a      	cmp	r2, r3
 800448a:	d90e      	bls.n	80044aa <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004498:	4b19      	ldr	r3, [pc, #100]	; (8004500 <prvSwitchTimerLists+0xbc>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3304      	adds	r3, #4
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f7fd fcf2 	bl	8001e8c <vListInsert>
 80044a8:	e016      	b.n	80044d8 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044aa:	2300      	movs	r3, #0
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	2300      	movs	r3, #0
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	2100      	movs	r1, #0
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff fd9d 	bl	8003ff4 <xTimerGenericCommand>
 80044ba:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <prvSwitchTimerLists+0x94>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	603b      	str	r3, [r7, #0]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044d8:	4b09      	ldr	r3, [pc, #36]	; (8004500 <prvSwitchTimerLists+0xbc>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1b4      	bne.n	800444c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044e2:	4b07      	ldr	r3, [pc, #28]	; (8004500 <prvSwitchTimerLists+0xbc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044e8:	4b06      	ldr	r3, [pc, #24]	; (8004504 <prvSwitchTimerLists+0xc0>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a04      	ldr	r2, [pc, #16]	; (8004500 <prvSwitchTimerLists+0xbc>)
 80044ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044f0:	4a04      	ldr	r2, [pc, #16]	; (8004504 <prvSwitchTimerLists+0xc0>)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	6013      	str	r3, [r2, #0]
}
 80044f6:	bf00      	nop
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	20000cb8 	.word	0x20000cb8
 8004504:	20000cbc 	.word	0x20000cbc

08004508 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800450e:	f000 f92d 	bl	800476c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004512:	4b15      	ldr	r3, [pc, #84]	; (8004568 <prvCheckForValidListAndQueue+0x60>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d120      	bne.n	800455c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800451a:	4814      	ldr	r0, [pc, #80]	; (800456c <prvCheckForValidListAndQueue+0x64>)
 800451c:	f7fd fc68 	bl	8001df0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004520:	4813      	ldr	r0, [pc, #76]	; (8004570 <prvCheckForValidListAndQueue+0x68>)
 8004522:	f7fd fc65 	bl	8001df0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <prvCheckForValidListAndQueue+0x6c>)
 8004528:	4a10      	ldr	r2, [pc, #64]	; (800456c <prvCheckForValidListAndQueue+0x64>)
 800452a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800452c:	4b12      	ldr	r3, [pc, #72]	; (8004578 <prvCheckForValidListAndQueue+0x70>)
 800452e:	4a10      	ldr	r2, [pc, #64]	; (8004570 <prvCheckForValidListAndQueue+0x68>)
 8004530:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004532:	2300      	movs	r3, #0
 8004534:	9300      	str	r3, [sp, #0]
 8004536:	4b11      	ldr	r3, [pc, #68]	; (800457c <prvCheckForValidListAndQueue+0x74>)
 8004538:	4a11      	ldr	r2, [pc, #68]	; (8004580 <prvCheckForValidListAndQueue+0x78>)
 800453a:	2110      	movs	r1, #16
 800453c:	200a      	movs	r0, #10
 800453e:	f7fd fd6f 	bl	8002020 <xQueueGenericCreateStatic>
 8004542:	4603      	mov	r3, r0
 8004544:	4a08      	ldr	r2, [pc, #32]	; (8004568 <prvCheckForValidListAndQueue+0x60>)
 8004546:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004548:	4b07      	ldr	r3, [pc, #28]	; (8004568 <prvCheckForValidListAndQueue+0x60>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d005      	beq.n	800455c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <prvCheckForValidListAndQueue+0x60>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	490b      	ldr	r1, [pc, #44]	; (8004584 <prvCheckForValidListAndQueue+0x7c>)
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe fc7e 	bl	8002e58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800455c:	f000 f936 	bl	80047cc <vPortExitCritical>
}
 8004560:	bf00      	nop
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000cc0 	.word	0x20000cc0
 800456c:	20000c90 	.word	0x20000c90
 8004570:	20000ca4 	.word	0x20000ca4
 8004574:	20000cb8 	.word	0x20000cb8
 8004578:	20000cbc 	.word	0x20000cbc
 800457c:	20000d6c 	.word	0x20000d6c
 8004580:	20000ccc 	.word	0x20000ccc
 8004584:	08004de4 	.word	0x08004de4

08004588 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3b04      	subs	r3, #4
 8004598:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	3b04      	subs	r3, #4
 80045a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b04      	subs	r3, #4
 80045b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045b8:	4a08      	ldr	r2, [pc, #32]	; (80045dc <pxPortInitialiseStack+0x54>)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	3b14      	subs	r3, #20
 80045c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3b20      	subs	r3, #32
 80045ce:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045d0:	68fb      	ldr	r3, [r7, #12]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr
 80045dc:	080045e1 	.word	0x080045e1

080045e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045ea:	4b12      	ldr	r3, [pc, #72]	; (8004634 <prvTaskExitError+0x54>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d00a      	beq.n	800460a <prvTaskExitError+0x2a>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	60fb      	str	r3, [r7, #12]
}
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <prvTaskExitError+0x28>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60bb      	str	r3, [r7, #8]
}
 800461c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800461e:	bf00      	nop
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0fc      	beq.n	8004620 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004626:	bf00      	nop
 8004628:	bf00      	nop
 800462a:	3714      	adds	r7, #20
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	20000014 	.word	0x20000014
	...

08004640 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <pxCurrentTCBConst2>)
 8004642:	6819      	ldr	r1, [r3, #0]
 8004644:	6808      	ldr	r0, [r1, #0]
 8004646:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800464a:	f380 8809 	msr	PSP, r0
 800464e:	f3bf 8f6f 	isb	sy
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8811 	msr	BASEPRI, r0
 800465a:	f04e 0e0d 	orr.w	lr, lr, #13
 800465e:	4770      	bx	lr

08004660 <pxCurrentTCBConst2>:
 8004660:	20000790 	.word	0x20000790
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004664:	bf00      	nop
 8004666:	bf00      	nop

08004668 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004668:	4806      	ldr	r0, [pc, #24]	; (8004684 <prvPortStartFirstTask+0x1c>)
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	6800      	ldr	r0, [r0, #0]
 800466e:	f380 8808 	msr	MSP, r0
 8004672:	b662      	cpsie	i
 8004674:	b661      	cpsie	f
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	f3bf 8f6f 	isb	sy
 800467e:	df00      	svc	0
 8004680:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004682:	bf00      	nop
 8004684:	e000ed08 	.word	0xe000ed08

08004688 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800468e:	4b32      	ldr	r3, [pc, #200]	; (8004758 <xPortStartScheduler+0xd0>)
 8004690:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	22ff      	movs	r2, #255	; 0xff
 800469e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046b0:	b2da      	uxtb	r2, r3
 80046b2:	4b2a      	ldr	r3, [pc, #168]	; (800475c <xPortStartScheduler+0xd4>)
 80046b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <xPortStartScheduler+0xd8>)
 80046b8:	2207      	movs	r2, #7
 80046ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046bc:	e009      	b.n	80046d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80046be:	4b28      	ldr	r3, [pc, #160]	; (8004760 <xPortStartScheduler+0xd8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	4a26      	ldr	r2, [pc, #152]	; (8004760 <xPortStartScheduler+0xd8>)
 80046c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046d2:	78fb      	ldrb	r3, [r7, #3]
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046da:	2b80      	cmp	r3, #128	; 0x80
 80046dc:	d0ef      	beq.n	80046be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046de:	4b20      	ldr	r3, [pc, #128]	; (8004760 <xPortStartScheduler+0xd8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1c3 0307 	rsb	r3, r3, #7
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d00a      	beq.n	8004700 <xPortStartScheduler+0x78>
	__asm volatile
 80046ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ee:	f383 8811 	msr	BASEPRI, r3
 80046f2:	f3bf 8f6f 	isb	sy
 80046f6:	f3bf 8f4f 	dsb	sy
 80046fa:	60bb      	str	r3, [r7, #8]
}
 80046fc:	bf00      	nop
 80046fe:	e7fe      	b.n	80046fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004700:	4b17      	ldr	r3, [pc, #92]	; (8004760 <xPortStartScheduler+0xd8>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	021b      	lsls	r3, r3, #8
 8004706:	4a16      	ldr	r2, [pc, #88]	; (8004760 <xPortStartScheduler+0xd8>)
 8004708:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800470a:	4b15      	ldr	r3, [pc, #84]	; (8004760 <xPortStartScheduler+0xd8>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004712:	4a13      	ldr	r2, [pc, #76]	; (8004760 <xPortStartScheduler+0xd8>)
 8004714:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800471e:	4b11      	ldr	r3, [pc, #68]	; (8004764 <xPortStartScheduler+0xdc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a10      	ldr	r2, [pc, #64]	; (8004764 <xPortStartScheduler+0xdc>)
 8004724:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800472a:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <xPortStartScheduler+0xdc>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a0d      	ldr	r2, [pc, #52]	; (8004764 <xPortStartScheduler+0xdc>)
 8004730:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004734:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004736:	f000 f8b9 	bl	80048ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <xPortStartScheduler+0xe0>)
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004740:	f7ff ff92 	bl	8004668 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004744:	f7fe ffb8 	bl	80036b8 <vTaskSwitchContext>
	prvTaskExitError();
 8004748:	f7ff ff4a 	bl	80045e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	e000e400 	.word	0xe000e400
 800475c:	20000dbc 	.word	0x20000dbc
 8004760:	20000dc0 	.word	0x20000dc0
 8004764:	e000ed20 	.word	0xe000ed20
 8004768:	20000014 	.word	0x20000014

0800476c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
	__asm volatile
 8004772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004776:	f383 8811 	msr	BASEPRI, r3
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	f3bf 8f4f 	dsb	sy
 8004782:	607b      	str	r3, [r7, #4]
}
 8004784:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004786:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <vPortEnterCritical+0x58>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a0d      	ldr	r2, [pc, #52]	; (80047c4 <vPortEnterCritical+0x58>)
 800478e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <vPortEnterCritical+0x58>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d10f      	bne.n	80047b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004798:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <vPortEnterCritical+0x5c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00a      	beq.n	80047b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	603b      	str	r3, [r7, #0]
}
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <vPortEnterCritical+0x4a>
	}
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000014 	.word	0x20000014
 80047c8:	e000ed04 	.word	0xe000ed04

080047cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80047d2:	4b11      	ldr	r3, [pc, #68]	; (8004818 <vPortExitCritical+0x4c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <vPortExitCritical+0x24>
	__asm volatile
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	607b      	str	r3, [r7, #4]
}
 80047ec:	bf00      	nop
 80047ee:	e7fe      	b.n	80047ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <vPortExitCritical+0x4c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3b01      	subs	r3, #1
 80047f6:	4a08      	ldr	r2, [pc, #32]	; (8004818 <vPortExitCritical+0x4c>)
 80047f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047fa:	4b07      	ldr	r3, [pc, #28]	; (8004818 <vPortExitCritical+0x4c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d105      	bne.n	800480e <vPortExitCritical+0x42>
 8004802:	2300      	movs	r3, #0
 8004804:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f383 8811 	msr	BASEPRI, r3
}
 800480c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	20000014 	.word	0x20000014
 800481c:	00000000 	.word	0x00000000

08004820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004820:	f3ef 8009 	mrs	r0, PSP
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	4b0d      	ldr	r3, [pc, #52]	; (8004860 <pxCurrentTCBConst>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004830:	6010      	str	r0, [r2, #0]
 8004832:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004836:	f04f 0050 	mov.w	r0, #80	; 0x50
 800483a:	f380 8811 	msr	BASEPRI, r0
 800483e:	f7fe ff3b 	bl	80036b8 <vTaskSwitchContext>
 8004842:	f04f 0000 	mov.w	r0, #0
 8004846:	f380 8811 	msr	BASEPRI, r0
 800484a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800484e:	6819      	ldr	r1, [r3, #0]
 8004850:	6808      	ldr	r0, [r1, #0]
 8004852:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004856:	f380 8809 	msr	PSP, r0
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	4770      	bx	lr

08004860 <pxCurrentTCBConst>:
 8004860:	20000790 	.word	0x20000790
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop

08004868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	607b      	str	r3, [r7, #4]
}
 8004880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004882:	f7fe fe5b 	bl	800353c <xTaskIncrementTick>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d003      	beq.n	8004894 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800488c:	4b06      	ldr	r3, [pc, #24]	; (80048a8 <SysTick_Handler+0x40>)
 800488e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004892:	601a      	str	r2, [r3, #0]
 8004894:	2300      	movs	r3, #0
 8004896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	f383 8811 	msr	BASEPRI, r3
}
 800489e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80048a0:	bf00      	nop
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	e000ed04 	.word	0xe000ed04

080048ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80048b0:	4b0a      	ldr	r3, [pc, #40]	; (80048dc <vPortSetupTimerInterrupt+0x30>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048b6:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <vPortSetupTimerInterrupt+0x34>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <vPortSetupTimerInterrupt+0x38>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a09      	ldr	r2, [pc, #36]	; (80048e8 <vPortSetupTimerInterrupt+0x3c>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	099b      	lsrs	r3, r3, #6
 80048c8:	4a08      	ldr	r2, [pc, #32]	; (80048ec <vPortSetupTimerInterrupt+0x40>)
 80048ca:	3b01      	subs	r3, #1
 80048cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ce:	4b03      	ldr	r3, [pc, #12]	; (80048dc <vPortSetupTimerInterrupt+0x30>)
 80048d0:	2207      	movs	r2, #7
 80048d2:	601a      	str	r2, [r3, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	e000e010 	.word	0xe000e010
 80048e0:	e000e018 	.word	0xe000e018
 80048e4:	20000008 	.word	0x20000008
 80048e8:	10624dd3 	.word	0x10624dd3
 80048ec:	e000e014 	.word	0xe000e014

080048f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048f6:	f3ef 8305 	mrs	r3, IPSR
 80048fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b0f      	cmp	r3, #15
 8004900:	d914      	bls.n	800492c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004902:	4a16      	ldr	r2, [pc, #88]	; (800495c <vPortValidateInterruptPriority+0x6c>)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800490c:	4b14      	ldr	r3, [pc, #80]	; (8004960 <vPortValidateInterruptPriority+0x70>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	7afa      	ldrb	r2, [r7, #11]
 8004912:	429a      	cmp	r2, r3
 8004914:	d20a      	bcs.n	800492c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	607b      	str	r3, [r7, #4]
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800492c:	4b0d      	ldr	r3, [pc, #52]	; (8004964 <vPortValidateInterruptPriority+0x74>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004934:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <vPortValidateInterruptPriority+0x78>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d90a      	bls.n	8004952 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	603b      	str	r3, [r7, #0]
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <vPortValidateInterruptPriority+0x60>
	}
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	e000e3f0 	.word	0xe000e3f0
 8004960:	20000dbc 	.word	0x20000dbc
 8004964:	e000ed0c 	.word	0xe000ed0c
 8004968:	20000dc0 	.word	0x20000dc0

0800496c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b08a      	sub	sp, #40	; 0x28
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004978:	f7fe fd26 	bl	80033c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800497c:	4b58      	ldr	r3, [pc, #352]	; (8004ae0 <pvPortMalloc+0x174>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004984:	f000 f910 	bl	8004ba8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004988:	4b56      	ldr	r3, [pc, #344]	; (8004ae4 <pvPortMalloc+0x178>)
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4013      	ands	r3, r2
 8004990:	2b00      	cmp	r3, #0
 8004992:	f040 808e 	bne.w	8004ab2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01d      	beq.n	80049d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800499c:	2208      	movs	r2, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4413      	add	r3, r2
 80049a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d014      	beq.n	80049d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f023 0307 	bic.w	r3, r3, #7
 80049b4:	3308      	adds	r3, #8
 80049b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <pvPortMalloc+0x6c>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	617b      	str	r3, [r7, #20]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d069      	beq.n	8004ab2 <pvPortMalloc+0x146>
 80049de:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <pvPortMalloc+0x17c>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d864      	bhi.n	8004ab2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049e8:	4b40      	ldr	r3, [pc, #256]	; (8004aec <pvPortMalloc+0x180>)
 80049ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049ec:	4b3f      	ldr	r3, [pc, #252]	; (8004aec <pvPortMalloc+0x180>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049f2:	e004      	b.n	80049fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d903      	bls.n	8004a10 <pvPortMalloc+0xa4>
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f1      	bne.n	80049f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a10:	4b33      	ldr	r3, [pc, #204]	; (8004ae0 <pvPortMalloc+0x174>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d04b      	beq.n	8004ab2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2208      	movs	r2, #8
 8004a20:	4413      	add	r3, r2
 8004a22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	6a3b      	ldr	r3, [r7, #32]
 8004a2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	2308      	movs	r3, #8
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d91f      	bls.n	8004a7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4413      	add	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <pvPortMalloc+0xf8>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	613b      	str	r3, [r7, #16]
}
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1ad2      	subs	r2, r2, r3
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a76:	69b8      	ldr	r0, [r7, #24]
 8004a78:	f000 f8f8 	bl	8004c6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <pvPortMalloc+0x17c>)
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <pvPortMalloc+0x17c>)
 8004a88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a8a:	4b17      	ldr	r3, [pc, #92]	; (8004ae8 <pvPortMalloc+0x17c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4b18      	ldr	r3, [pc, #96]	; (8004af0 <pvPortMalloc+0x184>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d203      	bcs.n	8004a9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a96:	4b14      	ldr	r3, [pc, #80]	; (8004ae8 <pvPortMalloc+0x17c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <pvPortMalloc+0x184>)
 8004a9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <pvPortMalloc+0x178>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004ab2:	f7fe fc97 	bl	80033e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00a      	beq.n	8004ad6 <pvPortMalloc+0x16a>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	60fb      	str	r3, [r7, #12]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <pvPortMalloc+0x168>
	return pvReturn;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3728      	adds	r7, #40	; 0x28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	200019cc 	.word	0x200019cc
 8004ae4:	200019d8 	.word	0x200019d8
 8004ae8:	200019d0 	.word	0x200019d0
 8004aec:	200019c4 	.word	0x200019c4
 8004af0:	200019d4 	.word	0x200019d4

08004af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d048      	beq.n	8004b98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004b06:	2308      	movs	r3, #8
 8004b08:	425b      	negs	r3, r3
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <vPortFree+0xac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <vPortFree+0x44>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60fb      	str	r3, [r7, #12]
}
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <vPortFree+0x62>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	60bb      	str	r3, [r7, #8]
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <vPortFree+0xac>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d019      	beq.n	8004b98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d115      	bne.n	8004b98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <vPortFree+0xac>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	43db      	mvns	r3, r3
 8004b76:	401a      	ands	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b7c:	f7fe fc24 	bl	80033c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	4b07      	ldr	r3, [pc, #28]	; (8004ba4 <vPortFree+0xb0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4413      	add	r3, r2
 8004b8a:	4a06      	ldr	r2, [pc, #24]	; (8004ba4 <vPortFree+0xb0>)
 8004b8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b8e:	6938      	ldr	r0, [r7, #16]
 8004b90:	f000 f86c 	bl	8004c6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b94:	f7fe fc26 	bl	80033e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b98:	bf00      	nop
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	200019d8 	.word	0x200019d8
 8004ba4:	200019d0 	.word	0x200019d0

08004ba8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004bb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <prvHeapInit+0xac>)
 8004bb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	3307      	adds	r3, #7
 8004bc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f023 0307 	bic.w	r3, r3, #7
 8004bce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <prvHeapInit+0xac>)
 8004bd8:	4413      	add	r3, r2
 8004bda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004be0:	4a1d      	ldr	r2, [pc, #116]	; (8004c58 <prvHeapInit+0xb0>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004be6:	4b1c      	ldr	r3, [pc, #112]	; (8004c58 <prvHeapInit+0xb0>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bf4:	2208      	movs	r2, #8
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	1a9b      	subs	r3, r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <prvHeapInit+0xb4>)
 8004c08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004c0a:	4b14      	ldr	r3, [pc, #80]	; (8004c5c <prvHeapInit+0xb4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <prvHeapInit+0xb4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c28:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <prvHeapInit+0xb4>)
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a0a      	ldr	r2, [pc, #40]	; (8004c60 <prvHeapInit+0xb8>)
 8004c36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <prvHeapInit+0xbc>)
 8004c3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c40:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <prvHeapInit+0xc0>)
 8004c42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c46:	601a      	str	r2, [r3, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	3714      	adds	r7, #20
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bc80      	pop	{r7}
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000dc4 	.word	0x20000dc4
 8004c58:	200019c4 	.word	0x200019c4
 8004c5c:	200019cc 	.word	0x200019cc
 8004c60:	200019d4 	.word	0x200019d4
 8004c64:	200019d0 	.word	0x200019d0
 8004c68:	200019d8 	.word	0x200019d8

08004c6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c74:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <prvInsertBlockIntoFreeList+0xa8>)
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	e002      	b.n	8004c80 <prvInsertBlockIntoFreeList+0x14>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d8f7      	bhi.n	8004c7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	4413      	add	r3, r2
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d108      	bne.n	8004cae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	441a      	add	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	441a      	add	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d118      	bne.n	8004cf4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <prvInsertBlockIntoFreeList+0xac>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d00d      	beq.n	8004cea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	441a      	add	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	e008      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <prvInsertBlockIntoFreeList+0xac>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e003      	b.n	8004cfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d002      	beq.n	8004d0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	200019c4 	.word	0x200019c4
 8004d18:	200019cc 	.word	0x200019cc

08004d1c <__libc_init_array>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	2600      	movs	r6, #0
 8004d20:	4d0c      	ldr	r5, [pc, #48]	; (8004d54 <__libc_init_array+0x38>)
 8004d22:	4c0d      	ldr	r4, [pc, #52]	; (8004d58 <__libc_init_array+0x3c>)
 8004d24:	1b64      	subs	r4, r4, r5
 8004d26:	10a4      	asrs	r4, r4, #2
 8004d28:	42a6      	cmp	r6, r4
 8004d2a:	d109      	bne.n	8004d40 <__libc_init_array+0x24>
 8004d2c:	f000 f830 	bl	8004d90 <_init>
 8004d30:	2600      	movs	r6, #0
 8004d32:	4d0a      	ldr	r5, [pc, #40]	; (8004d5c <__libc_init_array+0x40>)
 8004d34:	4c0a      	ldr	r4, [pc, #40]	; (8004d60 <__libc_init_array+0x44>)
 8004d36:	1b64      	subs	r4, r4, r5
 8004d38:	10a4      	asrs	r4, r4, #2
 8004d3a:	42a6      	cmp	r6, r4
 8004d3c:	d105      	bne.n	8004d4a <__libc_init_array+0x2e>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d44:	4798      	blx	r3
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7ee      	b.n	8004d28 <__libc_init_array+0xc>
 8004d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4e:	4798      	blx	r3
 8004d50:	3601      	adds	r6, #1
 8004d52:	e7f2      	b.n	8004d3a <__libc_init_array+0x1e>
 8004d54:	08004e70 	.word	0x08004e70
 8004d58:	08004e70 	.word	0x08004e70
 8004d5c:	08004e70 	.word	0x08004e70
 8004d60:	08004e74 	.word	0x08004e74

08004d64 <memcpy>:
 8004d64:	440a      	add	r2, r1
 8004d66:	4291      	cmp	r1, r2
 8004d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d6c:	d100      	bne.n	8004d70 <memcpy+0xc>
 8004d6e:	4770      	bx	lr
 8004d70:	b510      	push	{r4, lr}
 8004d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d76:	4291      	cmp	r1, r2
 8004d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d7c:	d1f9      	bne.n	8004d72 <memcpy+0xe>
 8004d7e:	bd10      	pop	{r4, pc}

08004d80 <memset>:
 8004d80:	4603      	mov	r3, r0
 8004d82:	4402      	add	r2, r0
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d100      	bne.n	8004d8a <memset+0xa>
 8004d88:	4770      	bx	lr
 8004d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8e:	e7f9      	b.n	8004d84 <memset+0x4>

08004d90 <_init>:
 8004d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d92:	bf00      	nop
 8004d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d96:	bc08      	pop	{r3}
 8004d98:	469e      	mov	lr, r3
 8004d9a:	4770      	bx	lr

08004d9c <_fini>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	bf00      	nop
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr
