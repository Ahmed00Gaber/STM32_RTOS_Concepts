
RTOS_semaphores.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004698  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004888  08004888  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004888  08004888  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004888  08004888  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004888  08004888  00014888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800488c  0800488c  0001488c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004890  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001978  20000010  080048a0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001988  080048a0  00021988  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce6a  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002469  00000000  00000000  0002cea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b78  00000000  00000000  0002f310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  0002fe88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001759b  00000000  00000000  000308e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d136  00000000  00000000  00047e83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000863d2  00000000  00000000  00054fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000db38b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d08  00000000  00000000  000db3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004790 	.word	0x08004790

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004790 	.word	0x08004790

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 8000154:	4a10      	ldr	r2, [pc, #64]	; (8000198 <MX_FREERTOS_Init+0x48>)
 8000156:	2100      	movs	r1, #0
 8000158:	2002      	movs	r0, #2
 800015a:	f001 f9c1 	bl	80014e0 <osSemaphoreNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a0e      	ldr	r2, [pc, #56]	; (800019c <MX_FREERTOS_Init+0x4c>)
 8000162:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(Task_one, NULL, &Task1_attributes);
 8000164:	4a0e      	ldr	r2, [pc, #56]	; (80001a0 <MX_FREERTOS_Init+0x50>)
 8000166:	2100      	movs	r1, #0
 8000168:	480e      	ldr	r0, [pc, #56]	; (80001a4 <MX_FREERTOS_Init+0x54>)
 800016a:	f001 f8e1 	bl	8001330 <osThreadNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0d      	ldr	r2, [pc, #52]	; (80001a8 <MX_FREERTOS_Init+0x58>)
 8000172:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(Task_Two, NULL, &Task2_attributes);
 8000174:	4a0d      	ldr	r2, [pc, #52]	; (80001ac <MX_FREERTOS_Init+0x5c>)
 8000176:	2100      	movs	r1, #0
 8000178:	480d      	ldr	r0, [pc, #52]	; (80001b0 <MX_FREERTOS_Init+0x60>)
 800017a:	f001 f8d9 	bl	8001330 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0c      	ldr	r2, [pc, #48]	; (80001b4 <MX_FREERTOS_Init+0x64>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(Task_Three, NULL, &Task3_attributes);
 8000184:	4a0c      	ldr	r2, [pc, #48]	; (80001b8 <MX_FREERTOS_Init+0x68>)
 8000186:	2100      	movs	r1, #0
 8000188:	480c      	ldr	r0, [pc, #48]	; (80001bc <MX_FREERTOS_Init+0x6c>)
 800018a:	f001 f8d1 	bl	8001330 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0b      	ldr	r2, [pc, #44]	; (80001c0 <MX_FREERTOS_Init+0x70>)
 8000192:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000194:	bf00      	nop
 8000196:	bd80      	pop	{r7, pc}
 8000198:	08004854 	.word	0x08004854
 800019c:	20000038 	.word	0x20000038
 80001a0:	080047e8 	.word	0x080047e8
 80001a4:	080001c5 	.word	0x080001c5
 80001a8:	2000002c 	.word	0x2000002c
 80001ac:	0800480c 	.word	0x0800480c
 80001b0:	080001f1 	.word	0x080001f1
 80001b4:	20000030 	.word	0x20000030
 80001b8:	08004830 	.word	0x08004830
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	20000034 	.word	0x20000034

080001c4 <Task_one>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_one */
void Task_one(void *argument)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b084      	sub	sp, #16
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_one */
	uint8_t counter_Task1=0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreRelease(myCountingSem01Handle);
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <Task_one+0x28>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 fa85 	bl	80016e4 <osSemaphoreRelease>
	  counter_Task1++;
 80001da:	7bfb      	ldrb	r3, [r7, #15]
 80001dc:	3301      	adds	r3, #1
 80001de:	73fb      	strb	r3, [r7, #15]
	  osDelay(1000);
 80001e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001e4:	f001 f94e 	bl	8001484 <osDelay>
	  osSemaphoreRelease(myCountingSem01Handle);
 80001e8:	e7f2      	b.n	80001d0 <Task_one+0xc>
 80001ea:	bf00      	nop
 80001ec:	20000038 	.word	0x20000038

080001f0 <Task_Two>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Two */
void Task_Two(void *argument)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b084      	sub	sp, #16
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Two */
	uint8_t counter_Task2=0;
 80001f8:	2300      	movs	r3, #0
 80001fa:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreRelease(myCountingSem01Handle);
 80001fc:	4b06      	ldr	r3, [pc, #24]	; (8000218 <Task_Two+0x28>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fa6f 	bl	80016e4 <osSemaphoreRelease>
    counter_Task2++;
 8000206:	7bfb      	ldrb	r3, [r7, #15]
 8000208:	3301      	adds	r3, #1
 800020a:	73fb      	strb	r3, [r7, #15]
    osDelay(1000);
 800020c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000210:	f001 f938 	bl	8001484 <osDelay>
	osSemaphoreRelease(myCountingSem01Handle);
 8000214:	e7f2      	b.n	80001fc <Task_Two+0xc>
 8000216:	bf00      	nop
 8000218:	20000038 	.word	0x20000038

0800021c <Task_Three>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Three */
void Task_Three(void *argument)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Three */
	uint8_t counter_Task3=0;
 8000224:	2300      	movs	r3, #0
 8000226:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myCountingSem01Handle,4000);
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <Task_Three+0x30>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000230:	4618      	mov	r0, r3
 8000232:	f001 f9f1 	bl	8001618 <osSemaphoreAcquire>
	  osSemaphoreAcquire(myCountingSem01Handle,4000);
 8000236:	4b05      	ldr	r3, [pc, #20]	; (800024c <Task_Three+0x30>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 800023e:	4618      	mov	r0, r3
 8000240:	f001 f9ea 	bl	8001618 <osSemaphoreAcquire>
	  counter_Task3++;
 8000244:	7bfb      	ldrb	r3, [r7, #15]
 8000246:	3301      	adds	r3, #1
 8000248:	73fb      	strb	r3, [r7, #15]
	  osSemaphoreAcquire(myCountingSem01Handle,4000);
 800024a:	e7ed      	b.n	8000228 <Task_Three+0xc>
 800024c:	20000038 	.word	0x20000038

08000250 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0308 	add.w	r3, r7, #8
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <MX_GPIO_Init+0x74>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a16      	ldr	r2, [pc, #88]	; (80002c4 <MX_GPIO_Init+0x74>)
 800026a:	f043 0320 	orr.w	r3, r3, #32
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <MX_GPIO_Init+0x74>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0320 	and.w	r3, r3, #32
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <MX_GPIO_Init+0x74>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a10      	ldr	r2, [pc, #64]	; (80002c4 <MX_GPIO_Init+0x74>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b0e      	ldr	r3, [pc, #56]	; (80002c4 <MX_GPIO_Init+0x74>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	603b      	str	r3, [r7, #0]
 8000292:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000294:	2301      	movs	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <MX_GPIO_Init+0x78>)
 800029a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	2300      	movs	r3, #0
 800029e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002a0:	f107 0308 	add.w	r3, r7, #8
 80002a4:	4619      	mov	r1, r3
 80002a6:	4809      	ldr	r0, [pc, #36]	; (80002cc <MX_GPIO_Init+0x7c>)
 80002a8:	f000 fa60 	bl	800076c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2105      	movs	r1, #5
 80002b0:	2006      	movs	r0, #6
 80002b2:	f000 fa24 	bl	80006fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002b6:	2006      	movs	r0, #6
 80002b8:	f000 fa3d 	bl	8000736 <HAL_NVIC_EnableIRQ>

}
 80002bc:	bf00      	nop
 80002be:	3718      	adds	r7, #24
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40021000 	.word	0x40021000
 80002c8:	10110000 	.word	0x10110000
 80002cc:	40010800 	.word	0x40010800

080002d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d4:	f000 f8da 	bl	800048c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002d8:	f000 f809 	bl	80002ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002dc:	f7ff ffb8 	bl	8000250 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80002e0:	f000 ffc0 	bl	8001264 <osKernelInitialize>
  MX_FREERTOS_Init();
 80002e4:	f7ff ff34 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80002e8:	f000 ffee 	bl	80012c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ec:	e7fe      	b.n	80002ec <main+0x1c>

080002ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b090      	sub	sp, #64	; 0x40
 80002f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f4:	f107 0318 	add.w	r3, r7, #24
 80002f8:	2228      	movs	r2, #40	; 0x28
 80002fa:	2100      	movs	r1, #0
 80002fc:	4618      	mov	r0, r3
 80002fe:	f004 fa3f 	bl	8004780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000310:	2302      	movs	r3, #2
 8000312:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000314:	2301      	movs	r3, #1
 8000316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000318:	2310      	movs	r3, #16
 800031a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031c:	2300      	movs	r3, #0
 800031e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	f107 0318 	add.w	r3, r7, #24
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fbbf 	bl	8000aa8 <HAL_RCC_OscConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000330:	f000 f818 	bl	8000364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000334:	230f      	movs	r3, #15
 8000336:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000338:	2300      	movs	r3, #0
 800033a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033c:	2300      	movs	r3, #0
 800033e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2100      	movs	r1, #0
 800034c:	4618      	mov	r0, r3
 800034e:	f000 fe2d 	bl	8000fac <HAL_RCC_ClockConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000358:	f000 f804 	bl	8000364 <Error_Handler>
  }
}
 800035c:	bf00      	nop
 800035e:	3740      	adds	r7, #64	; 0x40
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000368:	b672      	cpsid	i
}
 800036a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800036c:	e7fe      	b.n	800036c <Error_Handler+0x8>
	...

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <HAL_MspInit+0x68>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <HAL_MspInit+0x68>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]
 8000382:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_MspInit+0x68>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	f003 0301 	and.w	r3, r3, #1
 800038a:	60bb      	str	r3, [r7, #8]
 800038c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800038e:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_MspInit+0x68>)
 8000390:	69db      	ldr	r3, [r3, #28]
 8000392:	4a11      	ldr	r2, [pc, #68]	; (80003d8 <HAL_MspInit+0x68>)
 8000394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000398:	61d3      	str	r3, [r2, #28]
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <HAL_MspInit+0x68>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a2:	607b      	str	r3, [r7, #4]
 80003a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	210f      	movs	r1, #15
 80003aa:	f06f 0001 	mvn.w	r0, #1
 80003ae:	f000 f9a6 	bl	80006fe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <HAL_MspInit+0x6c>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003be:	60fb      	str	r3, [r7, #12]
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	4a04      	ldr	r2, [pc, #16]	; (80003dc <HAL_MspInit+0x6c>)
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ce:	bf00      	nop
 80003d0:	3710      	adds	r7, #16
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	40021000 	.word	0x40021000
 80003dc:	40010000 	.word	0x40010000

080003e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e4:	e7fe      	b.n	80003e4 <NMI_Handler+0x4>

080003e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003ea:	e7fe      	b.n	80003ea <HardFault_Handler+0x4>

080003ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f0:	e7fe      	b.n	80003f0 <MemManage_Handler+0x4>

080003f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003f2:	b480      	push	{r7}
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f6:	e7fe      	b.n	80003f6 <BusFault_Handler+0x4>

080003f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003fc:	e7fe      	b.n	80003fc <UsageFault_Handler+0x4>

080003fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040e:	f000 f883 	bl	8000518 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000412:	f003 f8c3 	bl	800359c <xTaskGetSchedulerState>
 8000416:	4603      	mov	r3, r0
 8000418:	2b01      	cmp	r3, #1
 800041a:	d001      	beq.n	8000420 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800041c:	f003 ff24 	bl	8004268 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	bd80      	pop	{r7, pc}

08000424 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000428:	2001      	movs	r0, #1
 800042a:	f000 fb1b 	bl	8000a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
//  osSemaphoreRelease(BinarySem01Handle);
  /* USER CODE END EXTI0_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}

08000432 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000432:	b480      	push	{r7}
 8000434:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
	...

08000440 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000440:	f7ff fff7 	bl	8000432 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000444:	480b      	ldr	r0, [pc, #44]	; (8000474 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000446:	490c      	ldr	r1, [pc, #48]	; (8000478 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000448:	4a0c      	ldr	r2, [pc, #48]	; (800047c <LoopFillZerobss+0x16>)
  movs r3, #0
 800044a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800044c:	e002      	b.n	8000454 <LoopCopyDataInit>

0800044e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800044e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000452:	3304      	adds	r3, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000458:	d3f9      	bcc.n	800044e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045a:	4a09      	ldr	r2, [pc, #36]	; (8000480 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800045c:	4c09      	ldr	r4, [pc, #36]	; (8000484 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000460:	e001      	b.n	8000466 <LoopFillZerobss>

08000462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000464:	3204      	adds	r2, #4

08000466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000468:	d3fb      	bcc.n	8000462 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800046a:	f004 f957 	bl	800471c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800046e:	f7ff ff2f 	bl	80002d0 <main>
  bx lr
 8000472:	4770      	bx	lr
  ldr r0, =_sdata
 8000474:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000478:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800047c:	08004890 	.word	0x08004890
  ldr r2, =_sbss
 8000480:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000484:	20001988 	.word	0x20001988

08000488 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000488:	e7fe      	b.n	8000488 <ADC1_2_IRQHandler>
	...

0800048c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <HAL_Init+0x28>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <HAL_Init+0x28>)
 8000496:	f043 0310 	orr.w	r3, r3, #16
 800049a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800049c:	2003      	movs	r0, #3
 800049e:	f000 f923 	bl	80006e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004a2:	200f      	movs	r0, #15
 80004a4:	f000 f808 	bl	80004b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004a8:	f7ff ff62 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40022000 	.word	0x40022000

080004b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004c0:	4b12      	ldr	r3, [pc, #72]	; (800050c <HAL_InitTick+0x54>)
 80004c2:	681a      	ldr	r2, [r3, #0]
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <HAL_InitTick+0x58>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	4619      	mov	r1, r3
 80004ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80004d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f000 f93b 	bl	8000752 <HAL_SYSTICK_Config>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004e2:	2301      	movs	r3, #1
 80004e4:	e00e      	b.n	8000504 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2b0f      	cmp	r3, #15
 80004ea:	d80a      	bhi.n	8000502 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ec:	2200      	movs	r2, #0
 80004ee:	6879      	ldr	r1, [r7, #4]
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f000 f903 	bl	80006fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <HAL_InitTick+0x5c>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	e000      	b.n	8000504 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000502:	2301      	movs	r3, #1
}
 8000504:	4618      	mov	r0, r3
 8000506:	3708      	adds	r7, #8
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000000 	.word	0x20000000
 8000510:	20000008 	.word	0x20000008
 8000514:	20000004 	.word	0x20000004

08000518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_IncTick+0x1c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	461a      	mov	r2, r3
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <HAL_IncTick+0x20>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4413      	add	r3, r2
 8000528:	4a03      	ldr	r2, [pc, #12]	; (8000538 <HAL_IncTick+0x20>)
 800052a:	6013      	str	r3, [r2, #0]
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	20000008 	.word	0x20000008
 8000538:	2000003c 	.word	0x2000003c

0800053c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b02      	ldr	r3, [pc, #8]	; (800054c <HAL_GetTick+0x10>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	2000003c 	.word	0x2000003c

08000550 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000550:	b480      	push	{r7}
 8000552:	b085      	sub	sp, #20
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f003 0307 	and.w	r3, r3, #7
 800055e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <__NVIC_SetPriorityGrouping+0x44>)
 8000562:	68db      	ldr	r3, [r3, #12]
 8000564:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000566:	68ba      	ldr	r2, [r7, #8]
 8000568:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800056c:	4013      	ands	r3, r2
 800056e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000578:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800057c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000580:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000582:	4a04      	ldr	r2, [pc, #16]	; (8000594 <__NVIC_SetPriorityGrouping+0x44>)
 8000584:	68bb      	ldr	r3, [r7, #8]
 8000586:	60d3      	str	r3, [r2, #12]
}
 8000588:	bf00      	nop
 800058a:	3714      	adds	r7, #20
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <__NVIC_GetPriorityGrouping+0x18>)
 800059e:	68db      	ldr	r3, [r3, #12]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	f003 0307 	and.w	r3, r3, #7
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	e000ed00 	.word	0xe000ed00

080005b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	db0b      	blt.n	80005de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c6:	79fb      	ldrb	r3, [r7, #7]
 80005c8:	f003 021f 	and.w	r2, r3, #31
 80005cc:	4906      	ldr	r1, [pc, #24]	; (80005e8 <__NVIC_EnableIRQ+0x34>)
 80005ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005d2:	095b      	lsrs	r3, r3, #5
 80005d4:	2001      	movs	r0, #1
 80005d6:	fa00 f202 	lsl.w	r2, r0, r2
 80005da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr
 80005e8:	e000e100 	.word	0xe000e100

080005ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b083      	sub	sp, #12
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	6039      	str	r1, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	db0a      	blt.n	8000616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	b2da      	uxtb	r2, r3
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__NVIC_SetPriority+0x4c>)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	0112      	lsls	r2, r2, #4
 800060c:	b2d2      	uxtb	r2, r2
 800060e:	440b      	add	r3, r1
 8000610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000614:	e00a      	b.n	800062c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	b2da      	uxtb	r2, r3
 800061a:	4908      	ldr	r1, [pc, #32]	; (800063c <__NVIC_SetPriority+0x50>)
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	f003 030f 	and.w	r3, r3, #15
 8000622:	3b04      	subs	r3, #4
 8000624:	0112      	lsls	r2, r2, #4
 8000626:	b2d2      	uxtb	r2, r2
 8000628:	440b      	add	r3, r1
 800062a:	761a      	strb	r2, [r3, #24]
}
 800062c:	bf00      	nop
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000e100 	.word	0xe000e100
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000640:	b480      	push	{r7}
 8000642:	b089      	sub	sp, #36	; 0x24
 8000644:	af00      	add	r7, sp, #0
 8000646:	60f8      	str	r0, [r7, #12]
 8000648:	60b9      	str	r1, [r7, #8]
 800064a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	f1c3 0307 	rsb	r3, r3, #7
 800065a:	2b04      	cmp	r3, #4
 800065c:	bf28      	it	cs
 800065e:	2304      	movcs	r3, #4
 8000660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	3304      	adds	r3, #4
 8000666:	2b06      	cmp	r3, #6
 8000668:	d902      	bls.n	8000670 <NVIC_EncodePriority+0x30>
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	3b03      	subs	r3, #3
 800066e:	e000      	b.n	8000672 <NVIC_EncodePriority+0x32>
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000674:	f04f 32ff 	mov.w	r2, #4294967295
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	fa02 f303 	lsl.w	r3, r2, r3
 800067e:	43da      	mvns	r2, r3
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	401a      	ands	r2, r3
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000688:	f04f 31ff 	mov.w	r1, #4294967295
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	fa01 f303 	lsl.w	r3, r1, r3
 8000692:	43d9      	mvns	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000698:	4313      	orrs	r3, r2
         );
}
 800069a:	4618      	mov	r0, r3
 800069c:	3724      	adds	r7, #36	; 0x24
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006b4:	d301      	bcc.n	80006ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006b6:	2301      	movs	r3, #1
 80006b8:	e00f      	b.n	80006da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <SysTick_Config+0x40>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3b01      	subs	r3, #1
 80006c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006c2:	210f      	movs	r1, #15
 80006c4:	f04f 30ff 	mov.w	r0, #4294967295
 80006c8:	f7ff ff90 	bl	80005ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <SysTick_Config+0x40>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006d2:	4b04      	ldr	r3, [pc, #16]	; (80006e4 <SysTick_Config+0x40>)
 80006d4:	2207      	movs	r2, #7
 80006d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80006d8:	2300      	movs	r3, #0
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	e000e010 	.word	0xe000e010

080006e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f7ff ff2d 	bl	8000550 <__NVIC_SetPriorityGrouping>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006fe:	b580      	push	{r7, lr}
 8000700:	b086      	sub	sp, #24
 8000702:	af00      	add	r7, sp, #0
 8000704:	4603      	mov	r3, r0
 8000706:	60b9      	str	r1, [r7, #8]
 8000708:	607a      	str	r2, [r7, #4]
 800070a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000710:	f7ff ff42 	bl	8000598 <__NVIC_GetPriorityGrouping>
 8000714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	68b9      	ldr	r1, [r7, #8]
 800071a:	6978      	ldr	r0, [r7, #20]
 800071c:	f7ff ff90 	bl	8000640 <NVIC_EncodePriority>
 8000720:	4602      	mov	r2, r0
 8000722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000726:	4611      	mov	r1, r2
 8000728:	4618      	mov	r0, r3
 800072a:	f7ff ff5f 	bl	80005ec <__NVIC_SetPriority>
}
 800072e:	bf00      	nop
 8000730:	3718      	adds	r7, #24
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	4603      	mov	r3, r0
 800073e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ff35 	bl	80005b4 <__NVIC_EnableIRQ>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f7ff ffa2 	bl	80006a4 <SysTick_Config>
 8000760:	4603      	mov	r3, r0
}
 8000762:	4618      	mov	r0, r3
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800076c:	b480      	push	{r7}
 800076e:	b08b      	sub	sp, #44	; 0x2c
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000776:	2300      	movs	r3, #0
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800077e:	e161      	b.n	8000a44 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000780:	2201      	movs	r2, #1
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	69fa      	ldr	r2, [r7, #28]
 8000790:	4013      	ands	r3, r2
 8000792:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000794:	69ba      	ldr	r2, [r7, #24]
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	429a      	cmp	r2, r3
 800079a:	f040 8150 	bne.w	8000a3e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	4a97      	ldr	r2, [pc, #604]	; (8000a00 <HAL_GPIO_Init+0x294>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d05e      	beq.n	8000866 <HAL_GPIO_Init+0xfa>
 80007a8:	4a95      	ldr	r2, [pc, #596]	; (8000a00 <HAL_GPIO_Init+0x294>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d875      	bhi.n	800089a <HAL_GPIO_Init+0x12e>
 80007ae:	4a95      	ldr	r2, [pc, #596]	; (8000a04 <HAL_GPIO_Init+0x298>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d058      	beq.n	8000866 <HAL_GPIO_Init+0xfa>
 80007b4:	4a93      	ldr	r2, [pc, #588]	; (8000a04 <HAL_GPIO_Init+0x298>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d86f      	bhi.n	800089a <HAL_GPIO_Init+0x12e>
 80007ba:	4a93      	ldr	r2, [pc, #588]	; (8000a08 <HAL_GPIO_Init+0x29c>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d052      	beq.n	8000866 <HAL_GPIO_Init+0xfa>
 80007c0:	4a91      	ldr	r2, [pc, #580]	; (8000a08 <HAL_GPIO_Init+0x29c>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d869      	bhi.n	800089a <HAL_GPIO_Init+0x12e>
 80007c6:	4a91      	ldr	r2, [pc, #580]	; (8000a0c <HAL_GPIO_Init+0x2a0>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d04c      	beq.n	8000866 <HAL_GPIO_Init+0xfa>
 80007cc:	4a8f      	ldr	r2, [pc, #572]	; (8000a0c <HAL_GPIO_Init+0x2a0>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d863      	bhi.n	800089a <HAL_GPIO_Init+0x12e>
 80007d2:	4a8f      	ldr	r2, [pc, #572]	; (8000a10 <HAL_GPIO_Init+0x2a4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d046      	beq.n	8000866 <HAL_GPIO_Init+0xfa>
 80007d8:	4a8d      	ldr	r2, [pc, #564]	; (8000a10 <HAL_GPIO_Init+0x2a4>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d85d      	bhi.n	800089a <HAL_GPIO_Init+0x12e>
 80007de:	2b12      	cmp	r3, #18
 80007e0:	d82a      	bhi.n	8000838 <HAL_GPIO_Init+0xcc>
 80007e2:	2b12      	cmp	r3, #18
 80007e4:	d859      	bhi.n	800089a <HAL_GPIO_Init+0x12e>
 80007e6:	a201      	add	r2, pc, #4	; (adr r2, 80007ec <HAL_GPIO_Init+0x80>)
 80007e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ec:	08000867 	.word	0x08000867
 80007f0:	08000841 	.word	0x08000841
 80007f4:	08000853 	.word	0x08000853
 80007f8:	08000895 	.word	0x08000895
 80007fc:	0800089b 	.word	0x0800089b
 8000800:	0800089b 	.word	0x0800089b
 8000804:	0800089b 	.word	0x0800089b
 8000808:	0800089b 	.word	0x0800089b
 800080c:	0800089b 	.word	0x0800089b
 8000810:	0800089b 	.word	0x0800089b
 8000814:	0800089b 	.word	0x0800089b
 8000818:	0800089b 	.word	0x0800089b
 800081c:	0800089b 	.word	0x0800089b
 8000820:	0800089b 	.word	0x0800089b
 8000824:	0800089b 	.word	0x0800089b
 8000828:	0800089b 	.word	0x0800089b
 800082c:	0800089b 	.word	0x0800089b
 8000830:	08000849 	.word	0x08000849
 8000834:	0800085d 	.word	0x0800085d
 8000838:	4a76      	ldr	r2, [pc, #472]	; (8000a14 <HAL_GPIO_Init+0x2a8>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d013      	beq.n	8000866 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800083e:	e02c      	b.n	800089a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	623b      	str	r3, [r7, #32]
          break;
 8000846:	e029      	b.n	800089c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	3304      	adds	r3, #4
 800084e:	623b      	str	r3, [r7, #32]
          break;
 8000850:	e024      	b.n	800089c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	68db      	ldr	r3, [r3, #12]
 8000856:	3308      	adds	r3, #8
 8000858:	623b      	str	r3, [r7, #32]
          break;
 800085a:	e01f      	b.n	800089c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	68db      	ldr	r3, [r3, #12]
 8000860:	330c      	adds	r3, #12
 8000862:	623b      	str	r3, [r7, #32]
          break;
 8000864:	e01a      	b.n	800089c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d102      	bne.n	8000874 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800086e:	2304      	movs	r3, #4
 8000870:	623b      	str	r3, [r7, #32]
          break;
 8000872:	e013      	b.n	800089c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d105      	bne.n	8000888 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800087c:	2308      	movs	r3, #8
 800087e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	69fa      	ldr	r2, [r7, #28]
 8000884:	611a      	str	r2, [r3, #16]
          break;
 8000886:	e009      	b.n	800089c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000888:	2308      	movs	r3, #8
 800088a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	69fa      	ldr	r2, [r7, #28]
 8000890:	615a      	str	r2, [r3, #20]
          break;
 8000892:	e003      	b.n	800089c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
          break;
 8000898:	e000      	b.n	800089c <HAL_GPIO_Init+0x130>
          break;
 800089a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	2bff      	cmp	r3, #255	; 0xff
 80008a0:	d801      	bhi.n	80008a6 <HAL_GPIO_Init+0x13a>
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	e001      	b.n	80008aa <HAL_GPIO_Init+0x13e>
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3304      	adds	r3, #4
 80008aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	2bff      	cmp	r3, #255	; 0xff
 80008b0:	d802      	bhi.n	80008b8 <HAL_GPIO_Init+0x14c>
 80008b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008b4:	009b      	lsls	r3, r3, #2
 80008b6:	e002      	b.n	80008be <HAL_GPIO_Init+0x152>
 80008b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008ba:	3b08      	subs	r3, #8
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	210f      	movs	r1, #15
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	fa01 f303 	lsl.w	r3, r1, r3
 80008cc:	43db      	mvns	r3, r3
 80008ce:	401a      	ands	r2, r3
 80008d0:	6a39      	ldr	r1, [r7, #32]
 80008d2:	693b      	ldr	r3, [r7, #16]
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	431a      	orrs	r2, r3
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 80a9 	beq.w	8000a3e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80008ec:	4b4a      	ldr	r3, [pc, #296]	; (8000a18 <HAL_GPIO_Init+0x2ac>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a49      	ldr	r2, [pc, #292]	; (8000a18 <HAL_GPIO_Init+0x2ac>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b47      	ldr	r3, [pc, #284]	; (8000a18 <HAL_GPIO_Init+0x2ac>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000904:	4a45      	ldr	r2, [pc, #276]	; (8000a1c <HAL_GPIO_Init+0x2b0>)
 8000906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000908:	089b      	lsrs	r3, r3, #2
 800090a:	3302      	adds	r3, #2
 800090c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000910:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000914:	f003 0303 	and.w	r3, r3, #3
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	220f      	movs	r2, #15
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a3d      	ldr	r2, [pc, #244]	; (8000a20 <HAL_GPIO_Init+0x2b4>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d00d      	beq.n	800094c <HAL_GPIO_Init+0x1e0>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	4a3c      	ldr	r2, [pc, #240]	; (8000a24 <HAL_GPIO_Init+0x2b8>)
 8000934:	4293      	cmp	r3, r2
 8000936:	d007      	beq.n	8000948 <HAL_GPIO_Init+0x1dc>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a3b      	ldr	r2, [pc, #236]	; (8000a28 <HAL_GPIO_Init+0x2bc>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d101      	bne.n	8000944 <HAL_GPIO_Init+0x1d8>
 8000940:	2302      	movs	r3, #2
 8000942:	e004      	b.n	800094e <HAL_GPIO_Init+0x1e2>
 8000944:	2303      	movs	r3, #3
 8000946:	e002      	b.n	800094e <HAL_GPIO_Init+0x1e2>
 8000948:	2301      	movs	r3, #1
 800094a:	e000      	b.n	800094e <HAL_GPIO_Init+0x1e2>
 800094c:	2300      	movs	r3, #0
 800094e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000950:	f002 0203 	and.w	r2, r2, #3
 8000954:	0092      	lsls	r2, r2, #2
 8000956:	4093      	lsls	r3, r2
 8000958:	68fa      	ldr	r2, [r7, #12]
 800095a:	4313      	orrs	r3, r2
 800095c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800095e:	492f      	ldr	r1, [pc, #188]	; (8000a1c <HAL_GPIO_Init+0x2b0>)
 8000960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000962:	089b      	lsrs	r3, r3, #2
 8000964:	3302      	adds	r3, #2
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000974:	2b00      	cmp	r3, #0
 8000976:	d006      	beq.n	8000986 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000978:	4b2c      	ldr	r3, [pc, #176]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	492b      	ldr	r1, [pc, #172]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	4313      	orrs	r3, r2
 8000982:	608b      	str	r3, [r1, #8]
 8000984:	e006      	b.n	8000994 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000986:	4b29      	ldr	r3, [pc, #164]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 8000988:	689a      	ldr	r2, [r3, #8]
 800098a:	69bb      	ldr	r3, [r7, #24]
 800098c:	43db      	mvns	r3, r3
 800098e:	4927      	ldr	r1, [pc, #156]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 8000990:	4013      	ands	r3, r2
 8000992:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d006      	beq.n	80009ae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009a2:	68da      	ldr	r2, [r3, #12]
 80009a4:	4921      	ldr	r1, [pc, #132]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	4313      	orrs	r3, r2
 80009aa:	60cb      	str	r3, [r1, #12]
 80009ac:	e006      	b.n	80009bc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80009ae:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009b0:	68da      	ldr	r2, [r3, #12]
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	491d      	ldr	r1, [pc, #116]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009b8:	4013      	ands	r3, r2
 80009ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d006      	beq.n	80009d6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	4917      	ldr	r1, [pc, #92]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	604b      	str	r3, [r1, #4]
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	69bb      	ldr	r3, [r7, #24]
 80009dc:	43db      	mvns	r3, r3
 80009de:	4913      	ldr	r1, [pc, #76]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009e0:	4013      	ands	r3, r2
 80009e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d01f      	beq.n	8000a30 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80009f0:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	490d      	ldr	r1, [pc, #52]	; (8000a2c <HAL_GPIO_Init+0x2c0>)
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	600b      	str	r3, [r1, #0]
 80009fc:	e01f      	b.n	8000a3e <HAL_GPIO_Init+0x2d2>
 80009fe:	bf00      	nop
 8000a00:	10320000 	.word	0x10320000
 8000a04:	10310000 	.word	0x10310000
 8000a08:	10220000 	.word	0x10220000
 8000a0c:	10210000 	.word	0x10210000
 8000a10:	10120000 	.word	0x10120000
 8000a14:	10110000 	.word	0x10110000
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010000 	.word	0x40010000
 8000a20:	40010800 	.word	0x40010800
 8000a24:	40010c00 	.word	0x40010c00
 8000a28:	40011000 	.word	0x40011000
 8000a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <HAL_GPIO_Init+0x2f4>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	69bb      	ldr	r3, [r7, #24]
 8000a36:	43db      	mvns	r3, r3
 8000a38:	4909      	ldr	r1, [pc, #36]	; (8000a60 <HAL_GPIO_Init+0x2f4>)
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	3301      	adds	r3, #1
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	f47f ae96 	bne.w	8000780 <HAL_GPIO_Init+0x14>
  }
}
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	372c      	adds	r7, #44	; 0x2c
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40010400 	.word	0x40010400

08000a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000a70:	695a      	ldr	r2, [r3, #20]
 8000a72:	88fb      	ldrh	r3, [r7, #6]
 8000a74:	4013      	ands	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d006      	beq.n	8000a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000a7c:	88fb      	ldrh	r3, [r7, #6]
 8000a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 f806 	bl	8000a94 <HAL_GPIO_EXTI_Callback>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40010400 	.word	0x40010400

08000a94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000a9e:	bf00      	nop
 8000aa0:	370c      	adds	r7, #12
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e272      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f000 8087 	beq.w	8000bd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ac8:	4b92      	ldr	r3, [pc, #584]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f003 030c 	and.w	r3, r3, #12
 8000ad0:	2b04      	cmp	r3, #4
 8000ad2:	d00c      	beq.n	8000aee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ad4:	4b8f      	ldr	r3, [pc, #572]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	f003 030c 	and.w	r3, r3, #12
 8000adc:	2b08      	cmp	r3, #8
 8000ade:	d112      	bne.n	8000b06 <HAL_RCC_OscConfig+0x5e>
 8000ae0:	4b8c      	ldr	r3, [pc, #560]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000aec:	d10b      	bne.n	8000b06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aee:	4b89      	ldr	r3, [pc, #548]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d06c      	beq.n	8000bd4 <HAL_RCC_OscConfig+0x12c>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d168      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e24c      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b0e:	d106      	bne.n	8000b1e <HAL_RCC_OscConfig+0x76>
 8000b10:	4b80      	ldr	r3, [pc, #512]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a7f      	ldr	r2, [pc, #508]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	e02e      	b.n	8000b7c <HAL_RCC_OscConfig+0xd4>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10c      	bne.n	8000b40 <HAL_RCC_OscConfig+0x98>
 8000b26:	4b7b      	ldr	r3, [pc, #492]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a7a      	ldr	r2, [pc, #488]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	4b78      	ldr	r3, [pc, #480]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a77      	ldr	r2, [pc, #476]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3c:	6013      	str	r3, [r2, #0]
 8000b3e:	e01d      	b.n	8000b7c <HAL_RCC_OscConfig+0xd4>
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	685b      	ldr	r3, [r3, #4]
 8000b44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b48:	d10c      	bne.n	8000b64 <HAL_RCC_OscConfig+0xbc>
 8000b4a:	4b72      	ldr	r3, [pc, #456]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a71      	ldr	r2, [pc, #452]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b54:	6013      	str	r3, [r2, #0]
 8000b56:	4b6f      	ldr	r3, [pc, #444]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a6e      	ldr	r2, [pc, #440]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b60:	6013      	str	r3, [r2, #0]
 8000b62:	e00b      	b.n	8000b7c <HAL_RCC_OscConfig+0xd4>
 8000b64:	4b6b      	ldr	r3, [pc, #428]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a6a      	ldr	r2, [pc, #424]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b68      	ldr	r3, [pc, #416]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a67      	ldr	r2, [pc, #412]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d013      	beq.n	8000bac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b84:	f7ff fcda 	bl	800053c <HAL_GetTick>
 8000b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b8a:	e008      	b.n	8000b9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b8c:	f7ff fcd6 	bl	800053c <HAL_GetTick>
 8000b90:	4602      	mov	r2, r0
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	2b64      	cmp	r3, #100	; 0x64
 8000b98:	d901      	bls.n	8000b9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	e200      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b9e:	4b5d      	ldr	r3, [pc, #372]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d0f0      	beq.n	8000b8c <HAL_RCC_OscConfig+0xe4>
 8000baa:	e014      	b.n	8000bd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bac:	f7ff fcc6 	bl	800053c <HAL_GetTick>
 8000bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bb2:	e008      	b.n	8000bc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bb4:	f7ff fcc2 	bl	800053c <HAL_GetTick>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	2b64      	cmp	r3, #100	; 0x64
 8000bc0:	d901      	bls.n	8000bc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	e1ec      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc6:	4b53      	ldr	r3, [pc, #332]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1f0      	bne.n	8000bb4 <HAL_RCC_OscConfig+0x10c>
 8000bd2:	e000      	b.n	8000bd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d063      	beq.n	8000caa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000be2:	4b4c      	ldr	r3, [pc, #304]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d00b      	beq.n	8000c06 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000bee:	4b49      	ldr	r3, [pc, #292]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	f003 030c 	and.w	r3, r3, #12
 8000bf6:	2b08      	cmp	r3, #8
 8000bf8:	d11c      	bne.n	8000c34 <HAL_RCC_OscConfig+0x18c>
 8000bfa:	4b46      	ldr	r3, [pc, #280]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d116      	bne.n	8000c34 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c06:	4b43      	ldr	r3, [pc, #268]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d005      	beq.n	8000c1e <HAL_RCC_OscConfig+0x176>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	691b      	ldr	r3, [r3, #16]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d001      	beq.n	8000c1e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	e1c0      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c1e:	4b3d      	ldr	r3, [pc, #244]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	4939      	ldr	r1, [pc, #228]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c32:	e03a      	b.n	8000caa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d020      	beq.n	8000c7e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c3c:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <HAL_RCC_OscConfig+0x270>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c42:	f7ff fc7b 	bl	800053c <HAL_GetTick>
 8000c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c48:	e008      	b.n	8000c5c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c4a:	f7ff fc77 	bl	800053c <HAL_GetTick>
 8000c4e:	4602      	mov	r2, r0
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	1ad3      	subs	r3, r2, r3
 8000c54:	2b02      	cmp	r3, #2
 8000c56:	d901      	bls.n	8000c5c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	e1a1      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5c:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0302 	and.w	r3, r3, #2
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d0f0      	beq.n	8000c4a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c68:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	695b      	ldr	r3, [r3, #20]
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4927      	ldr	r1, [pc, #156]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	600b      	str	r3, [r1, #0]
 8000c7c:	e015      	b.n	8000caa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <HAL_RCC_OscConfig+0x270>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c84:	f7ff fc5a 	bl	800053c <HAL_GetTick>
 8000c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c8a:	e008      	b.n	8000c9e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c8c:	f7ff fc56 	bl	800053c <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	693b      	ldr	r3, [r7, #16]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d901      	bls.n	8000c9e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000c9a:	2303      	movs	r3, #3
 8000c9c:	e180      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c9e:	4b1d      	ldr	r3, [pc, #116]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d1f0      	bne.n	8000c8c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0308 	and.w	r3, r3, #8
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d03a      	beq.n	8000d2c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d019      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <HAL_RCC_OscConfig+0x274>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cc4:	f7ff fc3a 	bl	800053c <HAL_GetTick>
 8000cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cca:	e008      	b.n	8000cde <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ccc:	f7ff fc36 	bl	800053c <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d901      	bls.n	8000cde <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e160      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f0      	beq.n	8000ccc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f000 fa9c 	bl	8001228 <RCC_Delay>
 8000cf0:	e01c      	b.n	8000d2c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_RCC_OscConfig+0x274>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cf8:	f7ff fc20 	bl	800053c <HAL_GetTick>
 8000cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000cfe:	e00f      	b.n	8000d20 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d00:	f7ff fc1c 	bl	800053c <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d908      	bls.n	8000d20 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	e146      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
 8000d12:	bf00      	nop
 8000d14:	40021000 	.word	0x40021000
 8000d18:	42420000 	.word	0x42420000
 8000d1c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d20:	4b92      	ldr	r3, [pc, #584]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d24:	f003 0302 	and.w	r3, r3, #2
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d1e9      	bne.n	8000d00 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	f000 80a6 	beq.w	8000e86 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d3e:	4b8b      	ldr	r3, [pc, #556]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d10d      	bne.n	8000d66 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d4a:	4b88      	ldr	r3, [pc, #544]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a87      	ldr	r2, [pc, #540]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b85      	ldr	r3, [pc, #532]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	60bb      	str	r3, [r7, #8]
 8000d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d62:	2301      	movs	r3, #1
 8000d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d66:	4b82      	ldr	r3, [pc, #520]	; (8000f70 <HAL_RCC_OscConfig+0x4c8>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d118      	bne.n	8000da4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d72:	4b7f      	ldr	r3, [pc, #508]	; (8000f70 <HAL_RCC_OscConfig+0x4c8>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a7e      	ldr	r2, [pc, #504]	; (8000f70 <HAL_RCC_OscConfig+0x4c8>)
 8000d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d7e:	f7ff fbdd 	bl	800053c <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d86:	f7ff fbd9 	bl	800053c <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b64      	cmp	r3, #100	; 0x64
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e103      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d98:	4b75      	ldr	r3, [pc, #468]	; (8000f70 <HAL_RCC_OscConfig+0x4c8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f0      	beq.n	8000d86 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d106      	bne.n	8000dba <HAL_RCC_OscConfig+0x312>
 8000dac:	4b6f      	ldr	r3, [pc, #444]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000dae:	6a1b      	ldr	r3, [r3, #32]
 8000db0:	4a6e      	ldr	r2, [pc, #440]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6213      	str	r3, [r2, #32]
 8000db8:	e02d      	b.n	8000e16 <HAL_RCC_OscConfig+0x36e>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x334>
 8000dc2:	4b6a      	ldr	r3, [pc, #424]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000dc4:	6a1b      	ldr	r3, [r3, #32]
 8000dc6:	4a69      	ldr	r2, [pc, #420]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	6213      	str	r3, [r2, #32]
 8000dce:	4b67      	ldr	r3, [pc, #412]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	4a66      	ldr	r2, [pc, #408]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000dd4:	f023 0304 	bic.w	r3, r3, #4
 8000dd8:	6213      	str	r3, [r2, #32]
 8000dda:	e01c      	b.n	8000e16 <HAL_RCC_OscConfig+0x36e>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d10c      	bne.n	8000dfe <HAL_RCC_OscConfig+0x356>
 8000de4:	4b61      	ldr	r3, [pc, #388]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	4a60      	ldr	r2, [pc, #384]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6213      	str	r3, [r2, #32]
 8000df0:	4b5e      	ldr	r3, [pc, #376]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000df2:	6a1b      	ldr	r3, [r3, #32]
 8000df4:	4a5d      	ldr	r2, [pc, #372]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	6213      	str	r3, [r2, #32]
 8000dfc:	e00b      	b.n	8000e16 <HAL_RCC_OscConfig+0x36e>
 8000dfe:	4b5b      	ldr	r3, [pc, #364]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e00:	6a1b      	ldr	r3, [r3, #32]
 8000e02:	4a5a      	ldr	r2, [pc, #360]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	f023 0301 	bic.w	r3, r3, #1
 8000e08:	6213      	str	r3, [r2, #32]
 8000e0a:	4b58      	ldr	r3, [pc, #352]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	4a57      	ldr	r2, [pc, #348]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e10:	f023 0304 	bic.w	r3, r3, #4
 8000e14:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d015      	beq.n	8000e4a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e1e:	f7ff fb8d 	bl	800053c <HAL_GetTick>
 8000e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e24:	e00a      	b.n	8000e3c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e26:	f7ff fb89 	bl	800053c <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e0b1      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	4b4b      	ldr	r3, [pc, #300]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0ee      	beq.n	8000e26 <HAL_RCC_OscConfig+0x37e>
 8000e48:	e014      	b.n	8000e74 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e4a:	f7ff fb77 	bl	800053c <HAL_GetTick>
 8000e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e50:	e00a      	b.n	8000e68 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e52:	f7ff fb73 	bl	800053c <HAL_GetTick>
 8000e56:	4602      	mov	r2, r0
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e09b      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e68:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e6a:	6a1b      	ldr	r3, [r3, #32]
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1ee      	bne.n	8000e52 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000e74:	7dfb      	ldrb	r3, [r7, #23]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d105      	bne.n	8000e86 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e7a:	4b3c      	ldr	r3, [pc, #240]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	4a3b      	ldr	r2, [pc, #236]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e84:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 8087 	beq.w	8000f9e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e90:	4b36      	ldr	r3, [pc, #216]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f003 030c 	and.w	r3, r3, #12
 8000e98:	2b08      	cmp	r3, #8
 8000e9a:	d061      	beq.n	8000f60 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	69db      	ldr	r3, [r3, #28]
 8000ea0:	2b02      	cmp	r3, #2
 8000ea2:	d146      	bne.n	8000f32 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ea4:	4b33      	ldr	r3, [pc, #204]	; (8000f74 <HAL_RCC_OscConfig+0x4cc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eaa:	f7ff fb47 	bl	800053c <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eb2:	f7ff fb43 	bl	800053c <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e06d      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f0      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6a1b      	ldr	r3, [r3, #32]
 8000ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed8:	d108      	bne.n	8000eec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	4921      	ldr	r1, [pc, #132]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6a19      	ldr	r1, [r3, #32]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	430b      	orrs	r3, r1
 8000efe:	491b      	ldr	r1, [pc, #108]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	4313      	orrs	r3, r2
 8000f02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_RCC_OscConfig+0x4cc>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0a:	f7ff fb17 	bl	800053c <HAL_GetTick>
 8000f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f10:	e008      	b.n	8000f24 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f12:	f7ff fb13 	bl	800053c <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d901      	bls.n	8000f24 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e03d      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d0f0      	beq.n	8000f12 <HAL_RCC_OscConfig+0x46a>
 8000f30:	e035      	b.n	8000f9e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <HAL_RCC_OscConfig+0x4cc>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f38:	f7ff fb00 	bl	800053c <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f3e:	e008      	b.n	8000f52 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f40:	f7ff fafc 	bl	800053c <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d901      	bls.n	8000f52 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e026      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f0      	bne.n	8000f40 <HAL_RCC_OscConfig+0x498>
 8000f5e:	e01e      	b.n	8000f9e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	69db      	ldr	r3, [r3, #28]
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d107      	bne.n	8000f78 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e019      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40007000 	.word	0x40007000
 8000f74:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_RCC_OscConfig+0x500>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d106      	bne.n	8000f9a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f96:	429a      	cmp	r2, r3
 8000f98:	d001      	beq.n	8000f9e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d101      	bne.n	8000fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e0d0      	b.n	8001162 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000fc0:	4b6a      	ldr	r3, [pc, #424]	; (800116c <HAL_RCC_ClockConfig+0x1c0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 0307 	and.w	r3, r3, #7
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	429a      	cmp	r2, r3
 8000fcc:	d910      	bls.n	8000ff0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fce:	4b67      	ldr	r3, [pc, #412]	; (800116c <HAL_RCC_ClockConfig+0x1c0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 0207 	bic.w	r2, r3, #7
 8000fd6:	4965      	ldr	r1, [pc, #404]	; (800116c <HAL_RCC_ClockConfig+0x1c0>)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fde:	4b63      	ldr	r3, [pc, #396]	; (800116c <HAL_RCC_ClockConfig+0x1c0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d001      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e0b8      	b.n	8001162 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d020      	beq.n	800103e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001008:	4b59      	ldr	r3, [pc, #356]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4a58      	ldr	r2, [pc, #352]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 800100e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001012:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d005      	beq.n	800102c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001020:	4b53      	ldr	r3, [pc, #332]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	4a52      	ldr	r2, [pc, #328]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 8001026:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800102a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800102c:	4b50      	ldr	r3, [pc, #320]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	494d      	ldr	r1, [pc, #308]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 800103a:	4313      	orrs	r3, r2
 800103c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d040      	beq.n	80010cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d107      	bne.n	8001062 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	4b47      	ldr	r3, [pc, #284]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d115      	bne.n	800108a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e07f      	b.n	8001162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d107      	bne.n	800107a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e073      	b.n	8001162 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e06b      	b.n	8001162 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800108a:	4b39      	ldr	r3, [pc, #228]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f023 0203 	bic.w	r2, r3, #3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4936      	ldr	r1, [pc, #216]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800109c:	f7ff fa4e 	bl	800053c <HAL_GetTick>
 80010a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010a2:	e00a      	b.n	80010ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010a4:	f7ff fa4a 	bl	800053c <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e053      	b.n	8001162 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 020c 	and.w	r2, r3, #12
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d1eb      	bne.n	80010a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80010cc:	4b27      	ldr	r3, [pc, #156]	; (800116c <HAL_RCC_ClockConfig+0x1c0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d210      	bcs.n	80010fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <HAL_RCC_ClockConfig+0x1c0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 0207 	bic.w	r2, r3, #7
 80010e2:	4922      	ldr	r1, [pc, #136]	; (800116c <HAL_RCC_ClockConfig+0x1c0>)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e032      	b.n	8001162 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0304 	and.w	r3, r3, #4
 8001104:	2b00      	cmp	r3, #0
 8001106:	d008      	beq.n	800111a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	4916      	ldr	r1, [pc, #88]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 8001116:	4313      	orrs	r3, r2
 8001118:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	2b00      	cmp	r3, #0
 8001124:	d009      	beq.n	800113a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	00db      	lsls	r3, r3, #3
 8001134:	490e      	ldr	r1, [pc, #56]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 8001136:	4313      	orrs	r3, r2
 8001138:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800113a:	f000 f821 	bl	8001180 <HAL_RCC_GetSysClockFreq>
 800113e:	4602      	mov	r2, r0
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	490a      	ldr	r1, [pc, #40]	; (8001174 <HAL_RCC_ClockConfig+0x1c8>)
 800114c:	5ccb      	ldrb	r3, [r1, r3]
 800114e:	fa22 f303 	lsr.w	r3, r2, r3
 8001152:	4a09      	ldr	r2, [pc, #36]	; (8001178 <HAL_RCC_ClockConfig+0x1cc>)
 8001154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_RCC_ClockConfig+0x1d0>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9ac 	bl	80004b8 <HAL_InitTick>

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40022000 	.word	0x40022000
 8001170:	40021000 	.word	0x40021000
 8001174:	08004864 	.word	0x08004864
 8001178:	20000000 	.word	0x20000000
 800117c:	20000004 	.word	0x20000004

08001180 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800119a:	4b1e      	ldr	r3, [pc, #120]	; (8001214 <HAL_RCC_GetSysClockFreq+0x94>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f003 030c 	and.w	r3, r3, #12
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	d002      	beq.n	80011b0 <HAL_RCC_GetSysClockFreq+0x30>
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d003      	beq.n	80011b6 <HAL_RCC_GetSysClockFreq+0x36>
 80011ae:	e027      	b.n	8001200 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80011b0:	4b19      	ldr	r3, [pc, #100]	; (8001218 <HAL_RCC_GetSysClockFreq+0x98>)
 80011b2:	613b      	str	r3, [r7, #16]
      break;
 80011b4:	e027      	b.n	8001206 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	0c9b      	lsrs	r3, r3, #18
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_RCC_GetSysClockFreq+0x9c>)
 80011c0:	5cd3      	ldrb	r3, [r2, r3]
 80011c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d010      	beq.n	80011f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <HAL_RCC_GetSysClockFreq+0x94>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	0c5b      	lsrs	r3, r3, #17
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	4a11      	ldr	r2, [pc, #68]	; (8001220 <HAL_RCC_GetSysClockFreq+0xa0>)
 80011da:	5cd3      	ldrb	r3, [r2, r3]
 80011dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_RCC_GetSysClockFreq+0x98>)
 80011e2:	fb03 f202 	mul.w	r2, r3, r2
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ec:	617b      	str	r3, [r7, #20]
 80011ee:	e004      	b.n	80011fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a0c      	ldr	r2, [pc, #48]	; (8001224 <HAL_RCC_GetSysClockFreq+0xa4>)
 80011f4:	fb02 f303 	mul.w	r3, r2, r3
 80011f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	613b      	str	r3, [r7, #16]
      break;
 80011fe:	e002      	b.n	8001206 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_RCC_GetSysClockFreq+0x98>)
 8001202:	613b      	str	r3, [r7, #16]
      break;
 8001204:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001206:	693b      	ldr	r3, [r7, #16]
}
 8001208:	4618      	mov	r0, r3
 800120a:	371c      	adds	r7, #28
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000
 8001218:	007a1200 	.word	0x007a1200
 800121c:	08004874 	.word	0x08004874
 8001220:	08004884 	.word	0x08004884
 8001224:	003d0900 	.word	0x003d0900

08001228 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <RCC_Delay+0x34>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <RCC_Delay+0x38>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0a5b      	lsrs	r3, r3, #9
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001244:	bf00      	nop
  }
  while (Delay --);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	60fa      	str	r2, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f9      	bne.n	8001244 <RCC_Delay+0x1c>
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	20000000 	.word	0x20000000
 8001260:	10624dd3 	.word	0x10624dd3

08001264 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800126a:	f3ef 8305 	mrs	r3, IPSR
 800126e:	60bb      	str	r3, [r7, #8]
  return(result);
 8001270:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001272:	2b00      	cmp	r3, #0
 8001274:	d10f      	bne.n	8001296 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001276:	f3ef 8310 	mrs	r3, PRIMASK
 800127a:	607b      	str	r3, [r7, #4]
  return(result);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <osKernelInitialize+0x32>
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <osKernelInitialize+0x60>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d109      	bne.n	800129e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800128a:	f3ef 8311 	mrs	r3, BASEPRI
 800128e:	603b      	str	r3, [r7, #0]
  return(result);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8001296:	f06f 0305 	mvn.w	r3, #5
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	e00c      	b.n	80012b8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <osKernelInitialize+0x60>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <osKernelInitialize+0x60>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e002      	b.n	80012b8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80012b2:	f04f 33ff 	mov.w	r3, #4294967295
 80012b6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80012b8:	68fb      	ldr	r3, [r7, #12]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3714      	adds	r7, #20
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	20000040 	.word	0x20000040

080012c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80012ce:	f3ef 8305 	mrs	r3, IPSR
 80012d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80012d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d10f      	bne.n	80012fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012da:	f3ef 8310 	mrs	r3, PRIMASK
 80012de:	607b      	str	r3, [r7, #4]
  return(result);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d109      	bne.n	80012fa <osKernelStart+0x32>
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <osKernelStart+0x64>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d109      	bne.n	8001302 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80012ee:	f3ef 8311 	mrs	r3, BASEPRI
 80012f2:	603b      	str	r3, [r7, #0]
  return(result);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <osKernelStart+0x3a>
    stat = osErrorISR;
 80012fa:	f06f 0305 	mvn.w	r3, #5
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e00e      	b.n	8001320 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001302:	4b0a      	ldr	r3, [pc, #40]	; (800132c <osKernelStart+0x64>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d107      	bne.n	800131a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <osKernelStart+0x64>)
 800130c:	2202      	movs	r2, #2
 800130e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001310:	f001 fcf8 	bl	8002d04 <vTaskStartScheduler>
      stat = osOK;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	e002      	b.n	8001320 <osKernelStart+0x58>
    } else {
      stat = osError;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001320:	68fb      	ldr	r3, [r7, #12]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000040 	.word	0x20000040

08001330 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001330:	b580      	push	{r7, lr}
 8001332:	b092      	sub	sp, #72	; 0x48
 8001334:	af04      	add	r7, sp, #16
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001340:	f3ef 8305 	mrs	r3, IPSR
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001348:	2b00      	cmp	r3, #0
 800134a:	f040 8094 	bne.w	8001476 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800134e:	f3ef 8310 	mrs	r3, PRIMASK
 8001352:	623b      	str	r3, [r7, #32]
  return(result);
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	2b00      	cmp	r3, #0
 8001358:	f040 808d 	bne.w	8001476 <osThreadNew+0x146>
 800135c:	4b48      	ldr	r3, [pc, #288]	; (8001480 <osThreadNew+0x150>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b02      	cmp	r3, #2
 8001362:	d106      	bne.n	8001372 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001364:	f3ef 8311 	mrs	r3, BASEPRI
 8001368:	61fb      	str	r3, [r7, #28]
  return(result);
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 8082 	bne.w	8001476 <osThreadNew+0x146>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d07e      	beq.n	8001476 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800137c:	2318      	movs	r3, #24
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001380:	2300      	movs	r3, #0
 8001382:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001384:	f107 031b 	add.w	r3, r7, #27
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d045      	beq.n	8001422 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d002      	beq.n	80013a4 <osThreadNew+0x74>
        name = attr->name;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d008      	beq.n	80013ca <osThreadNew+0x9a>
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	2b38      	cmp	r3, #56	; 0x38
 80013bc:	d805      	bhi.n	80013ca <osThreadNew+0x9a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <osThreadNew+0x9e>
        return (NULL);
 80013ca:	2300      	movs	r3, #0
 80013cc:	e054      	b.n	8001478 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00e      	beq.n	8001404 <osThreadNew+0xd4>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
 80013ea:	2b5b      	cmp	r3, #91	; 0x5b
 80013ec:	d90a      	bls.n	8001404 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d002      	beq.n	8001404 <osThreadNew+0xd4>
        mem = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	62bb      	str	r3, [r7, #40]	; 0x28
 8001402:	e010      	b.n	8001426 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d10c      	bne.n	8001426 <osThreadNew+0xf6>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d108      	bne.n	8001426 <osThreadNew+0xf6>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	691b      	ldr	r3, [r3, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d104      	bne.n	8001426 <osThreadNew+0xf6>
          mem = 0;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001420:	e001      	b.n	8001426 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001428:	2b01      	cmp	r3, #1
 800142a:	d110      	bne.n	800144e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001434:	9202      	str	r2, [sp, #8]
 8001436:	9301      	str	r3, [sp, #4]
 8001438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800143a:	9300      	str	r3, [sp, #0]
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001440:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f001 fa92 	bl	800296c <xTaskCreateStatic>
 8001448:	4603      	mov	r3, r0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e013      	b.n	8001476 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	2b00      	cmp	r3, #0
 8001452:	d110      	bne.n	8001476 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001456:	b29a      	uxth	r2, r3
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	9301      	str	r3, [sp, #4]
 800145e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f001 fadc 	bl	8002a24 <xTaskCreate>
 800146c:	4603      	mov	r3, r0
 800146e:	2b01      	cmp	r3, #1
 8001470:	d001      	beq.n	8001476 <osThreadNew+0x146>
          hTask = NULL;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001476:	697b      	ldr	r3, [r7, #20]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3738      	adds	r7, #56	; 0x38
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000040 	.word	0x20000040

08001484 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800148c:	f3ef 8305 	mrs	r3, IPSR
 8001490:	613b      	str	r3, [r7, #16]
  return(result);
 8001492:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10f      	bne.n	80014b8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001498:	f3ef 8310 	mrs	r3, PRIMASK
 800149c:	60fb      	str	r3, [r7, #12]
  return(result);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d109      	bne.n	80014b8 <osDelay+0x34>
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <osDelay+0x58>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d109      	bne.n	80014c0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80014ac:	f3ef 8311 	mrs	r3, BASEPRI
 80014b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d003      	beq.n	80014c0 <osDelay+0x3c>
    stat = osErrorISR;
 80014b8:	f06f 0305 	mvn.w	r3, #5
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e007      	b.n	80014d0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d002      	beq.n	80014d0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f001 fbe6 	bl	8002c9c <vTaskDelay>
    }
  }

  return (stat);
 80014d0:	697b      	ldr	r3, [r7, #20]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000040 	.word	0x20000040

080014e0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08c      	sub	sp, #48	; 0x30
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80014f0:	f3ef 8305 	mrs	r3, IPSR
 80014f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80014f6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 8086 	bne.w	800160a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014fe:	f3ef 8310 	mrs	r3, PRIMASK
 8001502:	617b      	str	r3, [r7, #20]
  return(result);
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d17f      	bne.n	800160a <osSemaphoreNew+0x12a>
 800150a:	4b42      	ldr	r3, [pc, #264]	; (8001614 <osSemaphoreNew+0x134>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	2b02      	cmp	r3, #2
 8001510:	d105      	bne.n	800151e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001512:	f3ef 8311 	mrs	r3, BASEPRI
 8001516:	613b      	str	r3, [r7, #16]
  return(result);
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d175      	bne.n	800160a <osSemaphoreNew+0x12a>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d072      	beq.n	800160a <osSemaphoreNew+0x12a>
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	429a      	cmp	r2, r3
 800152a:	d86e      	bhi.n	800160a <osSemaphoreNew+0x12a>
    mem = -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d015      	beq.n	8001564 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <osSemaphoreNew+0x6e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b4f      	cmp	r3, #79	; 0x4f
 8001546:	d902      	bls.n	800154e <osSemaphoreNew+0x6e>
        mem = 1;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
 800154c:	e00c      	b.n	8001568 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d108      	bne.n	8001568 <osSemaphoreNew+0x88>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68db      	ldr	r3, [r3, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d104      	bne.n	8001568 <osSemaphoreNew+0x88>
          mem = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	e001      	b.n	8001568 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8001568:	6a3b      	ldr	r3, [r7, #32]
 800156a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156e:	d04c      	beq.n	800160a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d128      	bne.n	80015c8 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8001576:	6a3b      	ldr	r3, [r7, #32]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d10a      	bne.n	8001592 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	2203      	movs	r2, #3
 8001582:	9200      	str	r2, [sp, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	2001      	movs	r0, #1
 800158a:	f000 fa4d 	bl	8001a28 <xQueueGenericCreateStatic>
 800158e:	6278      	str	r0, [r7, #36]	; 0x24
 8001590:	e005      	b.n	800159e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8001592:	2203      	movs	r2, #3
 8001594:	2100      	movs	r1, #0
 8001596:	2001      	movs	r0, #1
 8001598:	f000 fabd 	bl	8001b16 <xQueueGenericCreate>
 800159c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d022      	beq.n	80015ea <osSemaphoreNew+0x10a>
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d01f      	beq.n	80015ea <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015b2:	f000 fb7b 	bl	8001cac <xQueueGenericSend>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d016      	beq.n	80015ea <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80015bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80015be:	f001 f805 	bl	80025cc <vQueueDelete>
            hSemaphore = NULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
 80015c6:	e010      	b.n	80015ea <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d108      	bne.n	80015e0 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 fafe 	bl	8001bd8 <xQueueCreateCountingSemaphoreStatic>
 80015dc:	6278      	str	r0, [r7, #36]	; 0x24
 80015de:	e004      	b.n	80015ea <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80015e0:	68b9      	ldr	r1, [r7, #8]
 80015e2:	68f8      	ldr	r0, [r7, #12]
 80015e4:	f000 fb2f 	bl	8001c46 <xQueueCreateCountingSemaphore>
 80015e8:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00c      	beq.n	800160a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <osSemaphoreNew+0x11e>
          name = attr->name;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	61fb      	str	r3, [r7, #28]
 80015fc:	e001      	b.n	8001602 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001602:	69f9      	ldr	r1, [r7, #28]
 8001604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001606:	f001 f92b 	bl	8002860 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800160c:	4618      	mov	r0, r3
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000040 	.word	0x20000040

08001618 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d103      	bne.n	8001638 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001630:	f06f 0303 	mvn.w	r3, #3
 8001634:	61fb      	str	r3, [r7, #28]
 8001636:	e04b      	b.n	80016d0 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001638:	f3ef 8305 	mrs	r3, IPSR
 800163c:	617b      	str	r3, [r7, #20]
  return(result);
 800163e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10f      	bne.n	8001664 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001644:	f3ef 8310 	mrs	r3, PRIMASK
 8001648:	613b      	str	r3, [r7, #16]
  return(result);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d109      	bne.n	8001664 <osSemaphoreAcquire+0x4c>
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <osSemaphoreAcquire+0xc4>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d128      	bne.n	80016aa <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001658:	f3ef 8311 	mrs	r3, BASEPRI
 800165c:	60fb      	str	r3, [r7, #12]
  return(result);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d022      	beq.n	80016aa <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800166a:	f06f 0303 	mvn.w	r3, #3
 800166e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001670:	e02d      	b.n	80016ce <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001676:	f107 0308 	add.w	r3, r7, #8
 800167a:	461a      	mov	r2, r3
 800167c:	2100      	movs	r1, #0
 800167e:	69b8      	ldr	r0, [r7, #24]
 8001680:	f000 ff24 	bl	80024cc <xQueueReceiveFromISR>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d003      	beq.n	8001692 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800168a:	f06f 0302 	mvn.w	r3, #2
 800168e:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8001690:	e01d      	b.n	80016ce <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d01a      	beq.n	80016ce <osSemaphoreAcquire+0xb6>
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <osSemaphoreAcquire+0xc8>)
 800169a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	f3bf 8f4f 	dsb	sy
 80016a4:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80016a8:	e011      	b.n	80016ce <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	69b8      	ldr	r0, [r7, #24]
 80016ae:	f000 fe01 	bl	80022b4 <xQueueSemaphoreTake>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d00b      	beq.n	80016d0 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d003      	beq.n	80016c6 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80016be:	f06f 0301 	mvn.w	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
 80016c4:	e004      	b.n	80016d0 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80016c6:	f06f 0302 	mvn.w	r3, #2
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	e000      	b.n	80016d0 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80016ce:	bf00      	nop
      }
    }
  }

  return (stat);
 80016d0:	69fb      	ldr	r3, [r7, #28]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000040 	.word	0x20000040
 80016e0:	e000ed04 	.word	0xe000ed04

080016e4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d103      	bne.n	8001702 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80016fa:	f06f 0303 	mvn.w	r3, #3
 80016fe:	61fb      	str	r3, [r7, #28]
 8001700:	e03e      	b.n	8001780 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001702:	f3ef 8305 	mrs	r3, IPSR
 8001706:	617b      	str	r3, [r7, #20]
  return(result);
 8001708:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10f      	bne.n	800172e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800170e:	f3ef 8310 	mrs	r3, PRIMASK
 8001712:	613b      	str	r3, [r7, #16]
  return(result);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d109      	bne.n	800172e <osSemaphoreRelease+0x4a>
 800171a:	4b1c      	ldr	r3, [pc, #112]	; (800178c <osSemaphoreRelease+0xa8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d120      	bne.n	8001764 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001722:	f3ef 8311 	mrs	r3, BASEPRI
 8001726:	60fb      	str	r3, [r7, #12]
  return(result);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01a      	beq.n	8001764 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	4619      	mov	r1, r3
 8001738:	69b8      	ldr	r0, [r7, #24]
 800173a:	f000 fc4d 	bl	8001fd8 <xQueueGiveFromISR>
 800173e:	4603      	mov	r3, r0
 8001740:	2b01      	cmp	r3, #1
 8001742:	d003      	beq.n	800174c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8001744:	f06f 0302 	mvn.w	r3, #2
 8001748:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800174a:	e018      	b.n	800177e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d015      	beq.n	800177e <osSemaphoreRelease+0x9a>
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <osSemaphoreRelease+0xac>)
 8001754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	f3bf 8f4f 	dsb	sy
 800175e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8001762:	e00c      	b.n	800177e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001764:	2300      	movs	r3, #0
 8001766:	2200      	movs	r2, #0
 8001768:	2100      	movs	r1, #0
 800176a:	69b8      	ldr	r0, [r7, #24]
 800176c:	f000 fa9e 	bl	8001cac <xQueueGenericSend>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d004      	beq.n	8001780 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8001776:	f06f 0302 	mvn.w	r3, #2
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	e000      	b.n	8001780 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800177e:	bf00      	nop
    }
  }

  return (stat);
 8001780:	69fb      	ldr	r3, [r7, #28]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3720      	adds	r7, #32
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000040 	.word	0x20000040
 8001790:	e000ed04 	.word	0xe000ed04

08001794 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4a06      	ldr	r2, [pc, #24]	; (80017bc <vApplicationGetIdleTaskMemory+0x28>)
 80017a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80017aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	601a      	str	r2, [r3, #0]
}
 80017b2:	bf00      	nop
 80017b4:	3714      	adds	r7, #20
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr
 80017bc:	20000044 	.word	0x20000044
 80017c0:	200000a0 	.word	0x200000a0

080017c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80017d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <vApplicationGetTimerTaskMemory+0x30>)
 80017da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	200002a0 	.word	0x200002a0
 80017f4:	200002fc 	.word	0x200002fc

080017f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f103 0208 	add.w	r2, r3, #8
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f103 0208 	add.w	r2, r3, #8
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f103 0208 	add.w	r2, r3, #8
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	bc80      	pop	{r7}
 8001834:	4770      	bx	lr

08001836 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800184e:	b480      	push	{r7}
 8001850:	b085      	sub	sp, #20
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	1c5a      	adds	r2, r3, #1
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018aa:	d103      	bne.n	80018b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e00c      	b.n	80018ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	3308      	adds	r3, #8
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	e002      	b.n	80018c2 <vListInsert+0x2e>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d2f6      	bcs.n	80018bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	1c5a      	adds	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	601a      	str	r2, [r3, #0]
}
 80018fa:	bf00      	nop
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6892      	ldr	r2, [r2, #8]
 800191a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6852      	ldr	r2, [r2, #4]
 8001924:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	d103      	bne.n	8001938 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
	...

08001958 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10a      	bne.n	8001982 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800196c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001970:	f383 8811 	msr	BASEPRI, r3
 8001974:	f3bf 8f6f 	isb	sy
 8001978:	f3bf 8f4f 	dsb	sy
 800197c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800197e:	bf00      	nop
 8001980:	e7fe      	b.n	8001980 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001982:	f002 fbf3 	bl	800416c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800198e:	68f9      	ldr	r1, [r7, #12]
 8001990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001992:	fb01 f303 	mul.w	r3, r1, r3
 8001996:	441a      	add	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019b2:	3b01      	subs	r3, #1
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80019b8:	fb01 f303 	mul.w	r3, r1, r3
 80019bc:	441a      	add	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	22ff      	movs	r2, #255	; 0xff
 80019c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	22ff      	movs	r2, #255	; 0xff
 80019ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d114      	bne.n	8001a02 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d01a      	beq.n	8001a16 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3310      	adds	r3, #16
 80019e4:	4618      	mov	r0, r3
 80019e6:	f001 fc17 	bl	8003218 <xTaskRemoveFromEventList>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d012      	beq.n	8001a16 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <xQueueGenericReset+0xcc>)
 80019f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	f3bf 8f4f 	dsb	sy
 80019fc:	f3bf 8f6f 	isb	sy
 8001a00:	e009      	b.n	8001a16 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3310      	adds	r3, #16
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fef6 	bl	80017f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	3324      	adds	r3, #36	; 0x24
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff fef1 	bl	80017f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001a16:	f002 fbd9 	bl	80041cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	e000ed04 	.word	0xe000ed04

08001a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08e      	sub	sp, #56	; 0x38
 8001a2c:	af02      	add	r7, sp, #8
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10a      	bne.n	8001a52 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a40:	f383 8811 	msr	BASEPRI, r3
 8001a44:	f3bf 8f6f 	isb	sy
 8001a48:	f3bf 8f4f 	dsb	sy
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001a4e:	bf00      	nop
 8001a50:	e7fe      	b.n	8001a50 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10a      	bne.n	8001a6e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a5c:	f383 8811 	msr	BASEPRI, r3
 8001a60:	f3bf 8f6f 	isb	sy
 8001a64:	f3bf 8f4f 	dsb	sy
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001a6a:	bf00      	nop
 8001a6c:	e7fe      	b.n	8001a6c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <xQueueGenericCreateStatic+0x52>
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <xQueueGenericCreateStatic+0x56>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <xQueueGenericCreateStatic+0x58>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10a      	bne.n	8001a9a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a88:	f383 8811 	msr	BASEPRI, r3
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f3bf 8f4f 	dsb	sy
 8001a94:	623b      	str	r3, [r7, #32]
}
 8001a96:	bf00      	nop
 8001a98:	e7fe      	b.n	8001a98 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d102      	bne.n	8001aa6 <xQueueGenericCreateStatic+0x7e>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <xQueueGenericCreateStatic+0x82>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <xQueueGenericCreateStatic+0x84>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10a      	bne.n	8001ac6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ab4:	f383 8811 	msr	BASEPRI, r3
 8001ab8:	f3bf 8f6f 	isb	sy
 8001abc:	f3bf 8f4f 	dsb	sy
 8001ac0:	61fb      	str	r3, [r7, #28]
}
 8001ac2:	bf00      	nop
 8001ac4:	e7fe      	b.n	8001ac4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001ac6:	2350      	movs	r3, #80	; 0x50
 8001ac8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	2b50      	cmp	r3, #80	; 0x50
 8001ace:	d00a      	beq.n	8001ae6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ad4:	f383 8811 	msr	BASEPRI, r3
 8001ad8:	f3bf 8f6f 	isb	sy
 8001adc:	f3bf 8f4f 	dsb	sy
 8001ae0:	61bb      	str	r3, [r7, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	e7fe      	b.n	8001ae4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00d      	beq.n	8001b0c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001af8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f843 	bl	8001b92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3730      	adds	r7, #48	; 0x30
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b08a      	sub	sp, #40	; 0x28
 8001b1a:	af02      	add	r7, sp, #8
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	4613      	mov	r3, r2
 8001b22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d10a      	bne.n	8001b40 <xQueueGenericCreate+0x2a>
	__asm volatile
 8001b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b2e:	f383 8811 	msr	BASEPRI, r3
 8001b32:	f3bf 8f6f 	isb	sy
 8001b36:	f3bf 8f4f 	dsb	sy
 8001b3a:	613b      	str	r3, [r7, #16]
}
 8001b3c:	bf00      	nop
 8001b3e:	e7fe      	b.n	8001b3e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
 8001b4a:	e004      	b.n	8001b56 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	3350      	adds	r3, #80	; 0x50
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f002 fc06 	bl	800436c <pvPortMalloc>
 8001b60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d00f      	beq.n	8001b88 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	3350      	adds	r3, #80	; 0x50
 8001b6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001b76:	79fa      	ldrb	r2, [r7, #7]
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f805 	bl	8001b92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8001b88:	69bb      	ldr	r3, [r7, #24]
	}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d103      	bne.n	8001bae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e002      	b.n	8001bb4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	68fa      	ldr	r2, [r7, #12]
 8001bb8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	68ba      	ldr	r2, [r7, #8]
 8001bbe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	69b8      	ldr	r0, [r7, #24]
 8001bc4:	f7ff fec8 	bl	8001958 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	78fa      	ldrb	r2, [r7, #3]
 8001bcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001bd0:	bf00      	nop
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08a      	sub	sp, #40	; 0x28
 8001bdc:	af02      	add	r7, sp, #8
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10a      	bne.n	8001c00 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8001bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bee:	f383 8811 	msr	BASEPRI, r3
 8001bf2:	f3bf 8f6f 	isb	sy
 8001bf6:	f3bf 8f4f 	dsb	sy
 8001bfa:	61bb      	str	r3, [r7, #24]
}
 8001bfc:	bf00      	nop
 8001bfe:	e7fe      	b.n	8001bfe <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001c00:	68ba      	ldr	r2, [r7, #8]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d90a      	bls.n	8001c1e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8001c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c0c:	f383 8811 	msr	BASEPRI, r3
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	617b      	str	r3, [r7, #20]
}
 8001c1a:	bf00      	nop
 8001c1c:	e7fe      	b.n	8001c1c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001c1e:	2302      	movs	r3, #2
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff fefd 	bl	8001a28 <xQueueGenericCreateStatic>
 8001c2e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d002      	beq.n	8001c3c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
	}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3720      	adds	r7, #32
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
 8001c4e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10a      	bne.n	8001c6c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8001c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c5a:	f383 8811 	msr	BASEPRI, r3
 8001c5e:	f3bf 8f6f 	isb	sy
 8001c62:	f3bf 8f4f 	dsb	sy
 8001c66:	613b      	str	r3, [r7, #16]
}
 8001c68:	bf00      	nop
 8001c6a:	e7fe      	b.n	8001c6a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d90a      	bls.n	8001c8a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8001c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c78:	f383 8811 	msr	BASEPRI, r3
 8001c7c:	f3bf 8f6f 	isb	sy
 8001c80:	f3bf 8f4f 	dsb	sy
 8001c84:	60fb      	str	r3, [r7, #12]
}
 8001c86:	bf00      	nop
 8001c88:	e7fe      	b.n	8001c88 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff ff41 	bl	8001b16 <xQueueGenericCreate>
 8001c94:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d002      	beq.n	8001ca2 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8001ca2:	697b      	ldr	r3, [r7, #20]
	}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08e      	sub	sp, #56	; 0x38
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10a      	bne.n	8001cde <xQueueGenericSend+0x32>
	__asm volatile
 8001cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ccc:	f383 8811 	msr	BASEPRI, r3
 8001cd0:	f3bf 8f6f 	isb	sy
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001cda:	bf00      	nop
 8001cdc:	e7fe      	b.n	8001cdc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d103      	bne.n	8001cec <xQueueGenericSend+0x40>
 8001ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <xQueueGenericSend+0x44>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <xQueueGenericSend+0x46>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d10a      	bne.n	8001d0c <xQueueGenericSend+0x60>
	__asm volatile
 8001cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfa:	f383 8811 	msr	BASEPRI, r3
 8001cfe:	f3bf 8f6f 	isb	sy
 8001d02:	f3bf 8f4f 	dsb	sy
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001d08:	bf00      	nop
 8001d0a:	e7fe      	b.n	8001d0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d103      	bne.n	8001d1a <xQueueGenericSend+0x6e>
 8001d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d101      	bne.n	8001d1e <xQueueGenericSend+0x72>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <xQueueGenericSend+0x74>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <xQueueGenericSend+0x8e>
	__asm volatile
 8001d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d28:	f383 8811 	msr	BASEPRI, r3
 8001d2c:	f3bf 8f6f 	isb	sy
 8001d30:	f3bf 8f4f 	dsb	sy
 8001d34:	623b      	str	r3, [r7, #32]
}
 8001d36:	bf00      	nop
 8001d38:	e7fe      	b.n	8001d38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001d3a:	f001 fc2f 	bl	800359c <xTaskGetSchedulerState>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d102      	bne.n	8001d4a <xQueueGenericSend+0x9e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <xQueueGenericSend+0xa2>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <xQueueGenericSend+0xa4>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10a      	bne.n	8001d6a <xQueueGenericSend+0xbe>
	__asm volatile
 8001d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d58:	f383 8811 	msr	BASEPRI, r3
 8001d5c:	f3bf 8f6f 	isb	sy
 8001d60:	f3bf 8f4f 	dsb	sy
 8001d64:	61fb      	str	r3, [r7, #28]
}
 8001d66:	bf00      	nop
 8001d68:	e7fe      	b.n	8001d68 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001d6a:	f002 f9ff 	bl	800416c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <xQueueGenericSend+0xd4>
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d129      	bne.n	8001dd4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	68b9      	ldr	r1, [r7, #8]
 8001d84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001d86:	f000 fc5b 	bl	8002640 <prvCopyDataToQueue>
 8001d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d010      	beq.n	8001db6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	3324      	adds	r3, #36	; 0x24
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fa3d 	bl	8003218 <xTaskRemoveFromEventList>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d013      	beq.n	8001dcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001da4:	4b3f      	ldr	r3, [pc, #252]	; (8001ea4 <xQueueGenericSend+0x1f8>)
 8001da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	f3bf 8f4f 	dsb	sy
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	e00a      	b.n	8001dcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d007      	beq.n	8001dcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001dbc:	4b39      	ldr	r3, [pc, #228]	; (8001ea4 <xQueueGenericSend+0x1f8>)
 8001dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	f3bf 8f4f 	dsb	sy
 8001dc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001dcc:	f002 f9fe 	bl	80041cc <vPortExitCritical>
				return pdPASS;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e063      	b.n	8001e9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d103      	bne.n	8001de2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8001dda:	f002 f9f7 	bl	80041cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e05c      	b.n	8001e9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d106      	bne.n	8001df6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	4618      	mov	r0, r3
 8001dee:	f001 fa77 	bl	80032e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001df2:	2301      	movs	r3, #1
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8001df6:	f002 f9e9 	bl	80041cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8001dfa:	f000 ffe9 	bl	8002dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001dfe:	f002 f9b5 	bl	800416c <vPortEnterCritical>
 8001e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001e08:	b25b      	sxtb	r3, r3
 8001e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e0e:	d103      	bne.n	8001e18 <xQueueGenericSend+0x16c>
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e1e:	b25b      	sxtb	r3, r3
 8001e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e24:	d103      	bne.n	8001e2e <xQueueGenericSend+0x182>
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001e2e:	f002 f9cd 	bl	80041cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001e32:	1d3a      	adds	r2, r7, #4
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f001 fa66 	bl	800330c <xTaskCheckForTimeOut>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d124      	bne.n	8001e90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8001e46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e48:	f000 fcf2 	bl	8002830 <prvIsQueueFull>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d018      	beq.n	8001e84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e54:	3310      	adds	r3, #16
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4611      	mov	r1, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f001 f98c 	bl	8003178 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8001e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e62:	f000 fc7d 	bl	8002760 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8001e66:	f000 ffc1 	bl	8002dec <xTaskResumeAll>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f47f af7c 	bne.w	8001d6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <xQueueGenericSend+0x1f8>)
 8001e74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	f3bf 8f4f 	dsb	sy
 8001e7e:	f3bf 8f6f 	isb	sy
 8001e82:	e772      	b.n	8001d6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e86:	f000 fc6b 	bl	8002760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001e8a:	f000 ffaf 	bl	8002dec <xTaskResumeAll>
 8001e8e:	e76c      	b.n	8001d6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001e90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001e92:	f000 fc65 	bl	8002760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001e96:	f000 ffa9 	bl	8002dec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8001e9a:	2300      	movs	r3, #0
		}
	}
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3738      	adds	r7, #56	; 0x38
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	e000ed04 	.word	0xe000ed04

08001ea8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	; 0x38
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d10a      	bne.n	8001ed6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8001ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ec4:	f383 8811 	msr	BASEPRI, r3
 8001ec8:	f3bf 8f6f 	isb	sy
 8001ecc:	f3bf 8f4f 	dsb	sy
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001ed2:	bf00      	nop
 8001ed4:	e7fe      	b.n	8001ed4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d103      	bne.n	8001ee4 <xQueueGenericSendFromISR+0x3c>
 8001edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <xQueueGenericSendFromISR+0x40>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <xQueueGenericSendFromISR+0x42>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10a      	bne.n	8001f04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8001eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef2:	f383 8811 	msr	BASEPRI, r3
 8001ef6:	f3bf 8f6f 	isb	sy
 8001efa:	f3bf 8f4f 	dsb	sy
 8001efe:	623b      	str	r3, [r7, #32]
}
 8001f00:	bf00      	nop
 8001f02:	e7fe      	b.n	8001f02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d103      	bne.n	8001f12 <xQueueGenericSendFromISR+0x6a>
 8001f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <xQueueGenericSendFromISR+0x6e>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e000      	b.n	8001f18 <xQueueGenericSendFromISR+0x70>
 8001f16:	2300      	movs	r3, #0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	61fb      	str	r3, [r7, #28]
}
 8001f2e:	bf00      	nop
 8001f30:	e7fe      	b.n	8001f30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f32:	f002 f9dd 	bl	80042f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001f36:	f3ef 8211 	mrs	r2, BASEPRI
 8001f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f3e:	f383 8811 	msr	BASEPRI, r3
 8001f42:	f3bf 8f6f 	isb	sy
 8001f46:	f3bf 8f4f 	dsb	sy
 8001f4a:	61ba      	str	r2, [r7, #24]
 8001f4c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001f4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001f50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d302      	bcc.n	8001f64 <xQueueGenericSendFromISR+0xbc>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d12c      	bne.n	8001fbe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f74:	f000 fb64 	bl	8002640 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8001f78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d112      	bne.n	8001fa8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d016      	beq.n	8001fb8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8c:	3324      	adds	r3, #36	; 0x24
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f001 f942 	bl	8003218 <xTaskRemoveFromEventList>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00e      	beq.n	8001fb8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00b      	beq.n	8001fb8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	e007      	b.n	8001fb8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8001fa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	b25a      	sxtb	r2, r3
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8001fbc:	e001      	b.n	8001fc2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001fcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3738      	adds	r7, #56	; 0x38
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08e      	sub	sp, #56	; 0x38
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	623b      	str	r3, [r7, #32]
}
 8001ffe:	bf00      	nop
 8002000:	e7fe      	b.n	8002000 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00a      	beq.n	8002020 <xQueueGiveFromISR+0x48>
	__asm volatile
 800200a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200e:	f383 8811 	msr	BASEPRI, r3
 8002012:	f3bf 8f6f 	isb	sy
 8002016:	f3bf 8f4f 	dsb	sy
 800201a:	61fb      	str	r3, [r7, #28]
}
 800201c:	bf00      	nop
 800201e:	e7fe      	b.n	800201e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8002020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d103      	bne.n	8002030 <xQueueGiveFromISR+0x58>
 8002028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <xQueueGiveFromISR+0x5c>
 8002030:	2301      	movs	r3, #1
 8002032:	e000      	b.n	8002036 <xQueueGiveFromISR+0x5e>
 8002034:	2300      	movs	r3, #0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d10a      	bne.n	8002050 <xQueueGiveFromISR+0x78>
	__asm volatile
 800203a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800203e:	f383 8811 	msr	BASEPRI, r3
 8002042:	f3bf 8f6f 	isb	sy
 8002046:	f3bf 8f4f 	dsb	sy
 800204a:	61bb      	str	r3, [r7, #24]
}
 800204c:	bf00      	nop
 800204e:	e7fe      	b.n	800204e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002050:	f002 f94e 	bl	80042f0 <vPortValidateInterruptPriority>
	__asm volatile
 8002054:	f3ef 8211 	mrs	r2, BASEPRI
 8002058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205c:	f383 8811 	msr	BASEPRI, r3
 8002060:	f3bf 8f6f 	isb	sy
 8002064:	f3bf 8f4f 	dsb	sy
 8002068:	617a      	str	r2, [r7, #20]
 800206a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800206c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800206e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800207c:	429a      	cmp	r2, r3
 800207e:	d22b      	bcs.n	80020d8 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002090:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002092:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209a:	d112      	bne.n	80020c2 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d016      	beq.n	80020d2 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	3324      	adds	r3, #36	; 0x24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f001 f8b5 	bl	8003218 <xTaskRemoveFromEventList>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00e      	beq.n	80020d2 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e007      	b.n	80020d2 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80020c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020c6:	3301      	adds	r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	b25a      	sxtb	r2, r3
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80020d2:	2301      	movs	r3, #1
 80020d4:	637b      	str	r3, [r7, #52]	; 0x34
 80020d6:	e001      	b.n	80020dc <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
 80020dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020de:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f383 8811 	msr	BASEPRI, r3
}
 80020e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80020e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3738      	adds	r7, #56	; 0x38
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08c      	sub	sp, #48	; 0x30
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002100:	2300      	movs	r3, #0
 8002102:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <xQueueReceive+0x30>
	__asm volatile
 800210e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002112:	f383 8811 	msr	BASEPRI, r3
 8002116:	f3bf 8f6f 	isb	sy
 800211a:	f3bf 8f4f 	dsb	sy
 800211e:	623b      	str	r3, [r7, #32]
}
 8002120:	bf00      	nop
 8002122:	e7fe      	b.n	8002122 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <xQueueReceive+0x3e>
 800212a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <xQueueReceive+0x42>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <xQueueReceive+0x44>
 8002136:	2300      	movs	r3, #0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10a      	bne.n	8002152 <xQueueReceive+0x5e>
	__asm volatile
 800213c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002140:	f383 8811 	msr	BASEPRI, r3
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	f3bf 8f4f 	dsb	sy
 800214c:	61fb      	str	r3, [r7, #28]
}
 800214e:	bf00      	nop
 8002150:	e7fe      	b.n	8002150 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002152:	f001 fa23 	bl	800359c <xTaskGetSchedulerState>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <xQueueReceive+0x6e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <xQueueReceive+0x72>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <xQueueReceive+0x74>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <xQueueReceive+0x8e>
	__asm volatile
 800216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002170:	f383 8811 	msr	BASEPRI, r3
 8002174:	f3bf 8f6f 	isb	sy
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	61bb      	str	r3, [r7, #24]
}
 800217e:	bf00      	nop
 8002180:	e7fe      	b.n	8002180 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002182:	f001 fff3 	bl	800416c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800218c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218e:	2b00      	cmp	r3, #0
 8002190:	d01f      	beq.n	80021d2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002196:	f000 fabd 	bl	8002714 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	1e5a      	subs	r2, r3, #1
 800219e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d00f      	beq.n	80021ca <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	3310      	adds	r3, #16
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 f832 	bl	8003218 <xTaskRemoveFromEventList>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d007      	beq.n	80021ca <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <xQueueReceive+0x1bc>)
 80021bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	f3bf 8f4f 	dsb	sy
 80021c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80021ca:	f001 ffff 	bl	80041cc <vPortExitCritical>
				return pdPASS;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e069      	b.n	80022a6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d103      	bne.n	80021e0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021d8:	f001 fff8 	bl	80041cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80021dc:	2300      	movs	r3, #0
 80021de:	e062      	b.n	80022a6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4618      	mov	r0, r3
 80021ec:	f001 f878 	bl	80032e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80021f0:	2301      	movs	r3, #1
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80021f4:	f001 ffea 	bl	80041cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80021f8:	f000 fdea 	bl	8002dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021fc:	f001 ffb6 	bl	800416c <vPortEnterCritical>
 8002200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002202:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002206:	b25b      	sxtb	r3, r3
 8002208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800220c:	d103      	bne.n	8002216 <xQueueReceive+0x122>
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	2200      	movs	r2, #0
 8002212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800221c:	b25b      	sxtb	r3, r3
 800221e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002222:	d103      	bne.n	800222c <xQueueReceive+0x138>
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800222c:	f001 ffce 	bl	80041cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002230:	1d3a      	adds	r2, r7, #4
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	4611      	mov	r1, r2
 8002238:	4618      	mov	r0, r3
 800223a:	f001 f867 	bl	800330c <xTaskCheckForTimeOut>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d123      	bne.n	800228c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002244:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002246:	f000 fadd 	bl	8002804 <prvIsQueueEmpty>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d017      	beq.n	8002280 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	3324      	adds	r3, #36	; 0x24
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f000 ff8d 	bl	8003178 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800225e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002260:	f000 fa7e 	bl	8002760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002264:	f000 fdc2 	bl	8002dec <xTaskResumeAll>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d189      	bne.n	8002182 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <xQueueReceive+0x1bc>)
 8002270:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	e780      	b.n	8002182 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002282:	f000 fa6d 	bl	8002760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002286:	f000 fdb1 	bl	8002dec <xTaskResumeAll>
 800228a:	e77a      	b.n	8002182 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800228c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800228e:	f000 fa67 	bl	8002760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002292:	f000 fdab 	bl	8002dec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002296:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002298:	f000 fab4 	bl	8002804 <prvIsQueueEmpty>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f43f af6f 	beq.w	8002182 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80022a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3730      	adds	r7, #48	; 0x30
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000ed04 	.word	0xe000ed04

080022b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08e      	sub	sp, #56	; 0x38
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80022be:	2300      	movs	r3, #0
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	623b      	str	r3, [r7, #32]
}
 80022e2:	bf00      	nop
 80022e4:	e7fe      	b.n	80022e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80022ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f2:	f383 8811 	msr	BASEPRI, r3
 80022f6:	f3bf 8f6f 	isb	sy
 80022fa:	f3bf 8f4f 	dsb	sy
 80022fe:	61fb      	str	r3, [r7, #28]
}
 8002300:	bf00      	nop
 8002302:	e7fe      	b.n	8002302 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002304:	f001 f94a 	bl	800359c <xTaskGetSchedulerState>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <xQueueSemaphoreTake+0x60>
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <xQueueSemaphoreTake+0x64>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <xQueueSemaphoreTake+0x66>
 8002318:	2300      	movs	r3, #0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10a      	bne.n	8002334 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800231e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002322:	f383 8811 	msr	BASEPRI, r3
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	61bb      	str	r3, [r7, #24]
}
 8002330:	bf00      	nop
 8002332:	e7fe      	b.n	8002332 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002334:	f001 ff1a 	bl	800416c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	2b00      	cmp	r3, #0
 8002342:	d024      	beq.n	800238e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	1e5a      	subs	r2, r3, #1
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d104      	bne.n	800235e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002354:	f001 faa2 	bl	800389c <pvTaskIncrementMutexHeldCount>
 8002358:	4602      	mov	r2, r0
 800235a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00f      	beq.n	8002386 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	3310      	adds	r3, #16
 800236a:	4618      	mov	r0, r3
 800236c:	f000 ff54 	bl	8003218 <xTaskRemoveFromEventList>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d007      	beq.n	8002386 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002376:	4b54      	ldr	r3, [pc, #336]	; (80024c8 <xQueueSemaphoreTake+0x214>)
 8002378:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	f3bf 8f4f 	dsb	sy
 8002382:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002386:	f001 ff21 	bl	80041cc <vPortExitCritical>
				return pdPASS;
 800238a:	2301      	movs	r3, #1
 800238c:	e097      	b.n	80024be <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d111      	bne.n	80023b8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00a      	beq.n	80023b0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800239a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239e:	f383 8811 	msr	BASEPRI, r3
 80023a2:	f3bf 8f6f 	isb	sy
 80023a6:	f3bf 8f4f 	dsb	sy
 80023aa:	617b      	str	r3, [r7, #20]
}
 80023ac:	bf00      	nop
 80023ae:	e7fe      	b.n	80023ae <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80023b0:	f001 ff0c 	bl	80041cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80023b4:	2300      	movs	r3, #0
 80023b6:	e082      	b.n	80024be <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80023b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d106      	bne.n	80023cc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80023be:	f107 030c 	add.w	r3, r7, #12
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 ff8c 	bl	80032e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80023c8:	2301      	movs	r3, #1
 80023ca:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80023cc:	f001 fefe 	bl	80041cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80023d0:	f000 fcfe 	bl	8002dd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80023d4:	f001 feca 	bl	800416c <vPortEnterCritical>
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e4:	d103      	bne.n	80023ee <xQueueSemaphoreTake+0x13a>
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023f4:	b25b      	sxtb	r3, r3
 80023f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023fa:	d103      	bne.n	8002404 <xQueueSemaphoreTake+0x150>
 80023fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002404:	f001 fee2 	bl	80041cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002408:	463a      	mov	r2, r7
 800240a:	f107 030c 	add.w	r3, r7, #12
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f000 ff7b 	bl	800330c <xTaskCheckForTimeOut>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d132      	bne.n	8002482 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800241c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800241e:	f000 f9f1 	bl	8002804 <prvIsQueueEmpty>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d026      	beq.n	8002476 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002430:	f001 fe9c 	bl	800416c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4618      	mov	r0, r3
 800243a:	f001 f8cd 	bl	80035d8 <xTaskPriorityInherit>
 800243e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002440:	f001 fec4 	bl	80041cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002446:	3324      	adds	r3, #36	; 0x24
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	4611      	mov	r1, r2
 800244c:	4618      	mov	r0, r3
 800244e:	f000 fe93 	bl	8003178 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002452:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002454:	f000 f984 	bl	8002760 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002458:	f000 fcc8 	bl	8002dec <xTaskResumeAll>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	f47f af68 	bne.w	8002334 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002464:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <xQueueSemaphoreTake+0x214>)
 8002466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	e75e      	b.n	8002334 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002476:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002478:	f000 f972 	bl	8002760 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800247c:	f000 fcb6 	bl	8002dec <xTaskResumeAll>
 8002480:	e758      	b.n	8002334 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002482:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002484:	f000 f96c 	bl	8002760 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002488:	f000 fcb0 	bl	8002dec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800248c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800248e:	f000 f9b9 	bl	8002804 <prvIsQueueEmpty>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	f43f af4d 	beq.w	8002334 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00d      	beq.n	80024bc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80024a0:	f001 fe64 	bl	800416c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80024a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80024a6:	f000 f8b4 	bl	8002612 <prvGetDisinheritPriorityAfterTimeout>
 80024aa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80024ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024b2:	4618      	mov	r0, r3
 80024b4:	f001 f96c 	bl	8003790 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80024b8:	f001 fe88 	bl	80041cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80024bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3738      	adds	r7, #56	; 0x38
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000ed04 	.word	0xe000ed04

080024cc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08e      	sub	sp, #56	; 0x38
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80024dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	623b      	str	r3, [r7, #32]
}
 80024f4:	bf00      	nop
 80024f6:	e7fe      	b.n	80024f6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d103      	bne.n	8002506 <xQueueReceiveFromISR+0x3a>
 80024fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <xQueueReceiveFromISR+0x3e>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <xQueueReceiveFromISR+0x40>
 800250a:	2300      	movs	r3, #0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	61fb      	str	r3, [r7, #28]
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002526:	f001 fee3 	bl	80042f0 <vPortValidateInterruptPriority>
	__asm volatile
 800252a:	f3ef 8211 	mrs	r2, BASEPRI
 800252e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002532:	f383 8811 	msr	BASEPRI, r3
 8002536:	f3bf 8f6f 	isb	sy
 800253a:	f3bf 8f4f 	dsb	sy
 800253e:	61ba      	str	r2, [r7, #24]
 8002540:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002542:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d02f      	beq.n	80025b2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002554:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002560:	f000 f8d8 	bl	8002714 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002566:	1e5a      	subs	r2, r3, #1
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800256c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002574:	d112      	bne.n	800259c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d016      	beq.n	80025ac <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002580:	3310      	adds	r3, #16
 8002582:	4618      	mov	r0, r3
 8002584:	f000 fe48 	bl	8003218 <xTaskRemoveFromEventList>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00e      	beq.n	80025ac <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d00b      	beq.n	80025ac <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	e007      	b.n	80025ac <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800259c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025a0:	3301      	adds	r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	b25a      	sxtb	r2, r3
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80025ac:	2301      	movs	r3, #1
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
 80025b0:	e001      	b.n	80025b6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
 80025b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f383 8811 	msr	BASEPRI, r3
}
 80025c0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80025c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3738      	adds	r7, #56	; 0x38
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10a      	bne.n	80025f4 <vQueueDelete+0x28>
	__asm volatile
 80025de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e2:	f383 8811 	msr	BASEPRI, r3
 80025e6:	f3bf 8f6f 	isb	sy
 80025ea:	f3bf 8f4f 	dsb	sy
 80025ee:	60bb      	str	r3, [r7, #8]
}
 80025f0:	bf00      	nop
 80025f2:	e7fe      	b.n	80025f2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f95b 	bl	80028b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f001 ff75 	bl	80044f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002612:	b480      	push	{r7}
 8002614:	b085      	sub	sp, #20
 8002616:	af00      	add	r7, sp, #0
 8002618:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800262c:	60fb      	str	r3, [r7, #12]
 800262e:	e001      	b.n	8002634 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002630:	2300      	movs	r3, #0
 8002632:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002634:	68fb      	ldr	r3, [r7, #12]
	}
 8002636:	4618      	mov	r0, r3
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002654:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10d      	bne.n	800267a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d14d      	bne.n	8002702 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4618      	mov	r0, r3
 800266c:	f001 f822 	bl	80036b4 <xTaskPriorityDisinherit>
 8002670:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	e043      	b.n	8002702 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d119      	bne.n	80026b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6898      	ldr	r0, [r3, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	461a      	mov	r2, r3
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	f002 f86a 	bl	8004764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	441a      	add	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d32b      	bcc.n	8002702 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	609a      	str	r2, [r3, #8]
 80026b2:	e026      	b.n	8002702 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	68d8      	ldr	r0, [r3, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	461a      	mov	r2, r3
 80026be:	68b9      	ldr	r1, [r7, #8]
 80026c0:	f002 f850 	bl	8004764 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	425b      	negs	r3, r3
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68da      	ldr	r2, [r3, #12]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d207      	bcs.n	80026f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	425b      	negs	r3, r3
 80026ea:	441a      	add	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d105      	bne.n	8002702 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	3b01      	subs	r3, #1
 8002700:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1c5a      	adds	r2, r3, #1
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800270a:	697b      	ldr	r3, [r7, #20]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	2b00      	cmp	r3, #0
 8002724:	d018      	beq.n	8002758 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	441a      	add	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	429a      	cmp	r2, r3
 800273e:	d303      	bcc.n	8002748 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68d9      	ldr	r1, [r3, #12]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	461a      	mov	r2, r3
 8002752:	6838      	ldr	r0, [r7, #0]
 8002754:	f002 f806 	bl	8004764 <memcpy>
	}
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002768:	f001 fd00 	bl	800416c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002772:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002774:	e011      	b.n	800279a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	2b00      	cmp	r3, #0
 800277c:	d012      	beq.n	80027a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3324      	adds	r3, #36	; 0x24
 8002782:	4618      	mov	r0, r3
 8002784:	f000 fd48 	bl	8003218 <xTaskRemoveFromEventList>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800278e:	f000 fe1f 	bl	80033d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002792:	7bfb      	ldrb	r3, [r7, #15]
 8002794:	3b01      	subs	r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800279a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	dce9      	bgt.n	8002776 <prvUnlockQueue+0x16>
 80027a2:	e000      	b.n	80027a6 <prvUnlockQueue+0x46>
					break;
 80027a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	22ff      	movs	r2, #255	; 0xff
 80027aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80027ae:	f001 fd0d 	bl	80041cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027b2:	f001 fcdb 	bl	800416c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027be:	e011      	b.n	80027e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d012      	beq.n	80027ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3310      	adds	r3, #16
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 fd23 	bl	8003218 <xTaskRemoveFromEventList>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80027d8:	f000 fdfa 	bl	80033d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027dc:	7bbb      	ldrb	r3, [r7, #14]
 80027de:	3b01      	subs	r3, #1
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	dce9      	bgt.n	80027c0 <prvUnlockQueue+0x60>
 80027ec:	e000      	b.n	80027f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	22ff      	movs	r2, #255	; 0xff
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80027f8:	f001 fce8 	bl	80041cc <vPortExitCritical>
}
 80027fc:	bf00      	nop
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800280c:	f001 fcae 	bl	800416c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002818:	2301      	movs	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	e001      	b.n	8002822 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002822:	f001 fcd3 	bl	80041cc <vPortExitCritical>

	return xReturn;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002838:	f001 fc98 	bl	800416c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	429a      	cmp	r2, r3
 8002846:	d102      	bne.n	800284e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002848:	2301      	movs	r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e001      	b.n	8002852 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002852:	f001 fcbb 	bl	80041cc <vPortExitCritical>

	return xReturn;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3710      	adds	r7, #16
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e014      	b.n	800289a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002870:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <vQueueAddToRegistry+0x4c>)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10b      	bne.n	8002894 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800287c:	490b      	ldr	r1, [pc, #44]	; (80028ac <vQueueAddToRegistry+0x4c>)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002886:	4a09      	ldr	r2, [pc, #36]	; (80028ac <vQueueAddToRegistry+0x4c>)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	4413      	add	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002892:	e006      	b.n	80028a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	3301      	adds	r3, #1
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b07      	cmp	r3, #7
 800289e:	d9e7      	bls.n	8002870 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80028a0:	bf00      	nop
 80028a2:	bf00      	nop
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	200006fc 	.word	0x200006fc

080028b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e016      	b.n	80028ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80028be:	4a10      	ldr	r2, [pc, #64]	; (8002900 <vQueueUnregisterQueue+0x50>)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d10b      	bne.n	80028e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80028ce:	4a0c      	ldr	r2, [pc, #48]	; (8002900 <vQueueUnregisterQueue+0x50>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2100      	movs	r1, #0
 80028d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <vQueueUnregisterQueue+0x50>)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	2200      	movs	r2, #0
 80028e2:	605a      	str	r2, [r3, #4]
				break;
 80028e4:	e006      	b.n	80028f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	3301      	adds	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b07      	cmp	r3, #7
 80028f0:	d9e5      	bls.n	80028be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	200006fc 	.word	0x200006fc

08002904 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002914:	f001 fc2a 	bl	800416c <vPortEnterCritical>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800291e:	b25b      	sxtb	r3, r3
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d103      	bne.n	800292e <vQueueWaitForMessageRestricted+0x2a>
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002934:	b25b      	sxtb	r3, r3
 8002936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293a:	d103      	bne.n	8002944 <vQueueWaitForMessageRestricted+0x40>
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002944:	f001 fc42 	bl	80041cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	2b00      	cmp	r3, #0
 800294e:	d106      	bne.n	800295e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	3324      	adds	r3, #36	; 0x24
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	68b9      	ldr	r1, [r7, #8]
 8002958:	4618      	mov	r0, r3
 800295a:	f000 fc31 	bl	80031c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800295e:	6978      	ldr	r0, [r7, #20]
 8002960:	f7ff fefe 	bl	8002760 <prvUnlockQueue>
	}
 8002964:	bf00      	nop
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af04      	add	r7, sp, #16
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800297a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	623b      	str	r3, [r7, #32]
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10a      	bne.n	80029b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	61fb      	str	r3, [r7, #28]
}
 80029ae:	bf00      	nop
 80029b0:	e7fe      	b.n	80029b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80029b2:	235c      	movs	r3, #92	; 0x5c
 80029b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	2b5c      	cmp	r3, #92	; 0x5c
 80029ba:	d00a      	beq.n	80029d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80029bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c0:	f383 8811 	msr	BASEPRI, r3
 80029c4:	f3bf 8f6f 	isb	sy
 80029c8:	f3bf 8f4f 	dsb	sy
 80029cc:	61bb      	str	r3, [r7, #24]
}
 80029ce:	bf00      	nop
 80029d0:	e7fe      	b.n	80029d0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d01e      	beq.n	8002a16 <xTaskCreateStatic+0xaa>
 80029d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d01b      	beq.n	8002a16 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80029f0:	2300      	movs	r3, #0
 80029f2:	9303      	str	r3, [sp, #12]
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	9302      	str	r3, [sp, #8]
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f850 	bl	8002aae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a10:	f000 f8d4 	bl	8002bbc <prvAddNewTaskToReadyList>
 8002a14:	e001      	b.n	8002a1a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002a1a:	697b      	ldr	r3, [r7, #20]
	}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3728      	adds	r7, #40	; 0x28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08c      	sub	sp, #48	; 0x30
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	603b      	str	r3, [r7, #0]
 8002a30:	4613      	mov	r3, r2
 8002a32:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f001 fc97 	bl	800436c <pvPortMalloc>
 8002a3e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002a46:	205c      	movs	r0, #92	; 0x5c
 8002a48:	f001 fc90 	bl	800436c <pvPortMalloc>
 8002a4c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5a:	e005      	b.n	8002a68 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a5c:	6978      	ldr	r0, [r7, #20]
 8002a5e:	f001 fd49 	bl	80044f4 <vPortFree>
 8002a62:	e001      	b.n	8002a68 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a64:	2300      	movs	r3, #0
 8002a66:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a76:	88fa      	ldrh	r2, [r7, #6]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	9303      	str	r3, [sp, #12]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	9302      	str	r3, [sp, #8]
 8002a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68b9      	ldr	r1, [r7, #8]
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 f80e 	bl	8002aae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a92:	69f8      	ldr	r0, [r7, #28]
 8002a94:	f000 f892 	bl	8002bbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	61bb      	str	r3, [r7, #24]
 8002a9c:	e002      	b.n	8002aa4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002aa2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002aa4:	69bb      	ldr	r3, [r7, #24]
	}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3720      	adds	r7, #32
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b088      	sub	sp, #32
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	21a5      	movs	r1, #165	; 0xa5
 8002ac8:	f001 fe5a 	bl	8004780 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ace:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	f023 0307 	bic.w	r3, r3, #7
 8002ae4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af4:	f383 8811 	msr	BASEPRI, r3
 8002af8:	f3bf 8f6f 	isb	sy
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	617b      	str	r3, [r7, #20]
}
 8002b02:	bf00      	nop
 8002b04:	e7fe      	b.n	8002b04 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	e012      	b.n	8002b32 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	4413      	add	r3, r2
 8002b12:	7819      	ldrb	r1, [r3, #0]
 8002b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	4413      	add	r3, r2
 8002b1a:	3334      	adds	r3, #52	; 0x34
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002b20:	68ba      	ldr	r2, [r7, #8]
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	4413      	add	r3, r2
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	61fb      	str	r3, [r7, #28]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2b0f      	cmp	r3, #15
 8002b36:	d9e9      	bls.n	8002b0c <prvInitialiseNewTask+0x5e>
 8002b38:	e000      	b.n	8002b3c <prvInitialiseNewTask+0x8e>
		{
			break;
 8002b3a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	2b37      	cmp	r3, #55	; 0x37
 8002b48:	d901      	bls.n	8002b4e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b4a:	2337      	movs	r3, #55	; 0x37
 8002b4c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b58:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	3304      	adds	r3, #4
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fe66 	bl	8001836 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6c:	3318      	adds	r3, #24
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fe fe61 	bl	8001836 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b78:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	69b8      	ldr	r0, [r7, #24]
 8002b9e:	f001 f9f7 	bl	8003f90 <pxPortInitialiseStack>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002bc4:	f001 fad2 	bl	800416c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	; (8002c80 <prvAddNewTaskToReadyList+0xc4>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <prvAddNewTaskToReadyList+0xc4>)
 8002bd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002bda:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002be0:	4b27      	ldr	r3, [pc, #156]	; (8002c80 <prvAddNewTaskToReadyList+0xc4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d110      	bne.n	8002c0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002be8:	f000 fc16 	bl	8003418 <prvInitialiseTaskLists>
 8002bec:	e00d      	b.n	8002c0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002bee:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <prvAddNewTaskToReadyList+0xcc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bf6:	4b23      	ldr	r3, [pc, #140]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d802      	bhi.n	8002c0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002c04:	4a1f      	ldr	r2, [pc, #124]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <prvAddNewTaskToReadyList+0xd0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <prvAddNewTaskToReadyList+0xd0>)
 8002c12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <prvAddNewTaskToReadyList+0xd0>)
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	4b1b      	ldr	r3, [pc, #108]	; (8002c90 <prvAddNewTaskToReadyList+0xd4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d903      	bls.n	8002c30 <prvAddNewTaskToReadyList+0x74>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	4a18      	ldr	r2, [pc, #96]	; (8002c90 <prvAddNewTaskToReadyList+0xd4>)
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4a15      	ldr	r2, [pc, #84]	; (8002c94 <prvAddNewTaskToReadyList+0xd8>)
 8002c3e:	441a      	add	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f7fe fe01 	bl	800184e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c4c:	f001 fabe 	bl	80041cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c50:	4b0d      	ldr	r3, [pc, #52]	; (8002c88 <prvAddNewTaskToReadyList+0xcc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00e      	beq.n	8002c76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c58:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <prvAddNewTaskToReadyList+0xc8>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d207      	bcs.n	8002c76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <prvAddNewTaskToReadyList+0xdc>)
 8002c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000c10 	.word	0x20000c10
 8002c84:	2000073c 	.word	0x2000073c
 8002c88:	20000c1c 	.word	0x20000c1c
 8002c8c:	20000c2c 	.word	0x20000c2c
 8002c90:	20000c18 	.word	0x20000c18
 8002c94:	20000740 	.word	0x20000740
 8002c98:	e000ed04 	.word	0xe000ed04

08002c9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d017      	beq.n	8002cde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002cae:	4b13      	ldr	r3, [pc, #76]	; (8002cfc <vTaskDelay+0x60>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00a      	beq.n	8002ccc <vTaskDelay+0x30>
	__asm volatile
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	60bb      	str	r3, [r7, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	e7fe      	b.n	8002cca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ccc:	f000 f880 	bl	8002dd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 fdf6 	bl	80038c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002cd8:	f000 f888 	bl	8002dec <xTaskResumeAll>
 8002cdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d107      	bne.n	8002cf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <vTaskDelay+0x64>)
 8002ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000c38 	.word	0x20000c38
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b08a      	sub	sp, #40	; 0x28
 8002d08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002d12:	463a      	mov	r2, r7
 8002d14:	1d39      	adds	r1, r7, #4
 8002d16:	f107 0308 	add.w	r3, r7, #8
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fd3a 	bl	8001794 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002d20:	6839      	ldr	r1, [r7, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	9202      	str	r2, [sp, #8]
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	460a      	mov	r2, r1
 8002d32:	4921      	ldr	r1, [pc, #132]	; (8002db8 <vTaskStartScheduler+0xb4>)
 8002d34:	4821      	ldr	r0, [pc, #132]	; (8002dbc <vTaskStartScheduler+0xb8>)
 8002d36:	f7ff fe19 	bl	800296c <xTaskCreateStatic>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a20      	ldr	r2, [pc, #128]	; (8002dc0 <vTaskStartScheduler+0xbc>)
 8002d3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d40:	4b1f      	ldr	r3, [pc, #124]	; (8002dc0 <vTaskStartScheduler+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e001      	b.n	8002d52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d102      	bne.n	8002d5e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d58:	f000 fe08 	bl	800396c <xTimerCreateTimerTask>
 8002d5c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d116      	bne.n	8002d92 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d68:	f383 8811 	msr	BASEPRI, r3
 8002d6c:	f3bf 8f6f 	isb	sy
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	613b      	str	r3, [r7, #16]
}
 8002d76:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d78:	4b12      	ldr	r3, [pc, #72]	; (8002dc4 <vTaskStartScheduler+0xc0>)
 8002d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d80:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <vTaskStartScheduler+0xc4>)
 8002d82:	2201      	movs	r2, #1
 8002d84:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002d86:	4b11      	ldr	r3, [pc, #68]	; (8002dcc <vTaskStartScheduler+0xc8>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d8c:	f001 f97c 	bl	8004088 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d90:	e00e      	b.n	8002db0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d98:	d10a      	bne.n	8002db0 <vTaskStartScheduler+0xac>
	__asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	60fb      	str	r3, [r7, #12]
}
 8002dac:	bf00      	nop
 8002dae:	e7fe      	b.n	8002dae <vTaskStartScheduler+0xaa>
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	080047d0 	.word	0x080047d0
 8002dbc:	080033e9 	.word	0x080033e9
 8002dc0:	20000c34 	.word	0x20000c34
 8002dc4:	20000c30 	.word	0x20000c30
 8002dc8:	20000c1c 	.word	0x20000c1c
 8002dcc:	20000c14 	.word	0x20000c14

08002dd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002dd4:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <vTaskSuspendAll+0x18>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	4a03      	ldr	r2, [pc, #12]	; (8002de8 <vTaskSuspendAll+0x18>)
 8002ddc:	6013      	str	r3, [r2, #0]
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bc80      	pop	{r7}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000c38 	.word	0x20000c38

08002dec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002df2:	2300      	movs	r3, #0
 8002df4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dfa:	4b42      	ldr	r3, [pc, #264]	; (8002f04 <xTaskResumeAll+0x118>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <xTaskResumeAll+0x2c>
	__asm volatile
 8002e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e06:	f383 8811 	msr	BASEPRI, r3
 8002e0a:	f3bf 8f6f 	isb	sy
 8002e0e:	f3bf 8f4f 	dsb	sy
 8002e12:	603b      	str	r3, [r7, #0]
}
 8002e14:	bf00      	nop
 8002e16:	e7fe      	b.n	8002e16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002e18:	f001 f9a8 	bl	800416c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <xTaskResumeAll+0x118>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3b01      	subs	r3, #1
 8002e22:	4a38      	ldr	r2, [pc, #224]	; (8002f04 <xTaskResumeAll+0x118>)
 8002e24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e26:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <xTaskResumeAll+0x118>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d162      	bne.n	8002ef4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e2e:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <xTaskResumeAll+0x11c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d05e      	beq.n	8002ef4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e36:	e02f      	b.n	8002e98 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e38:	4b34      	ldr	r3, [pc, #208]	; (8002f0c <xTaskResumeAll+0x120>)
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	3318      	adds	r3, #24
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fe fd5d 	bl	8001904 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7fe fd58 	bl	8001904 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e58:	4b2d      	ldr	r3, [pc, #180]	; (8002f10 <xTaskResumeAll+0x124>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d903      	bls.n	8002e68 <xTaskResumeAll+0x7c>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <xTaskResumeAll+0x124>)
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4a27      	ldr	r2, [pc, #156]	; (8002f14 <xTaskResumeAll+0x128>)
 8002e76:	441a      	add	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4610      	mov	r0, r2
 8002e80:	f7fe fce5 	bl	800184e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e88:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <xTaskResumeAll+0x12c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002e92:	4b22      	ldr	r3, [pc, #136]	; (8002f1c <xTaskResumeAll+0x130>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e98:	4b1c      	ldr	r3, [pc, #112]	; (8002f0c <xTaskResumeAll+0x120>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1cb      	bne.n	8002e38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002ea6:	f000 fb55 	bl	8003554 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002eaa:	4b1d      	ldr	r3, [pc, #116]	; (8002f20 <xTaskResumeAll+0x134>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d010      	beq.n	8002ed8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002eb6:	f000 f845 	bl	8002f44 <xTaskIncrementTick>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002ec0:	4b16      	ldr	r3, [pc, #88]	; (8002f1c <xTaskResumeAll+0x130>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f1      	bne.n	8002eb6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8002ed2:	4b13      	ldr	r3, [pc, #76]	; (8002f20 <xTaskResumeAll+0x134>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002ed8:	4b10      	ldr	r3, [pc, #64]	; (8002f1c <xTaskResumeAll+0x130>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d009      	beq.n	8002ef4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <xTaskResumeAll+0x138>)
 8002ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	f3bf 8f4f 	dsb	sy
 8002ef0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002ef4:	f001 f96a 	bl	80041cc <vPortExitCritical>

	return xAlreadyYielded;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000c38 	.word	0x20000c38
 8002f08:	20000c10 	.word	0x20000c10
 8002f0c:	20000bd0 	.word	0x20000bd0
 8002f10:	20000c18 	.word	0x20000c18
 8002f14:	20000740 	.word	0x20000740
 8002f18:	2000073c 	.word	0x2000073c
 8002f1c:	20000c24 	.word	0x20000c24
 8002f20:	20000c20 	.word	0x20000c20
 8002f24:	e000ed04 	.word	0xe000ed04

08002f28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <xTaskGetTickCount+0x18>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002f34:	687b      	ldr	r3, [r7, #4]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bc80      	pop	{r7}
 8002f3e:	4770      	bx	lr
 8002f40:	20000c14 	.word	0x20000c14

08002f44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f4e:	4b51      	ldr	r3, [pc, #324]	; (8003094 <xTaskIncrementTick+0x150>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	f040 808e 	bne.w	8003074 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f58:	4b4f      	ldr	r3, [pc, #316]	; (8003098 <xTaskIncrementTick+0x154>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f60:	4a4d      	ldr	r2, [pc, #308]	; (8003098 <xTaskIncrementTick+0x154>)
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d120      	bne.n	8002fae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f6c:	4b4b      	ldr	r3, [pc, #300]	; (800309c <xTaskIncrementTick+0x158>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <xTaskIncrementTick+0x48>
	__asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	603b      	str	r3, [r7, #0]
}
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xTaskIncrementTick+0x46>
 8002f8c:	4b43      	ldr	r3, [pc, #268]	; (800309c <xTaskIncrementTick+0x158>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	4b43      	ldr	r3, [pc, #268]	; (80030a0 <xTaskIncrementTick+0x15c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a41      	ldr	r2, [pc, #260]	; (800309c <xTaskIncrementTick+0x158>)
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4a41      	ldr	r2, [pc, #260]	; (80030a0 <xTaskIncrementTick+0x15c>)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b40      	ldr	r3, [pc, #256]	; (80030a4 <xTaskIncrementTick+0x160>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	4a3f      	ldr	r2, [pc, #252]	; (80030a4 <xTaskIncrementTick+0x160>)
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	f000 fad3 	bl	8003554 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <xTaskIncrementTick+0x164>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d34e      	bcc.n	8003056 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fb8:	4b38      	ldr	r3, [pc, #224]	; (800309c <xTaskIncrementTick+0x158>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <xTaskIncrementTick+0x82>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <xTaskIncrementTick+0x84>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d004      	beq.n	8002fd6 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <xTaskIncrementTick+0x164>)
 8002fce:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd2:	601a      	str	r2, [r3, #0]
					break;
 8002fd4:	e03f      	b.n	8003056 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002fd6:	4b31      	ldr	r3, [pc, #196]	; (800309c <xTaskIncrementTick+0x158>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d203      	bcs.n	8002ff6 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002fee:	4a2e      	ldr	r2, [pc, #184]	; (80030a8 <xTaskIncrementTick+0x164>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6013      	str	r3, [r2, #0]
						break;
 8002ff4:	e02f      	b.n	8003056 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fc82 	bl	8001904 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	d004      	beq.n	8003012 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	3318      	adds	r3, #24
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe fc79 	bl	8001904 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003016:	4b25      	ldr	r3, [pc, #148]	; (80030ac <xTaskIncrementTick+0x168>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d903      	bls.n	8003026 <xTaskIncrementTick+0xe2>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	4a22      	ldr	r2, [pc, #136]	; (80030ac <xTaskIncrementTick+0x168>)
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <xTaskIncrementTick+0x16c>)
 8003034:	441a      	add	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	3304      	adds	r3, #4
 800303a:	4619      	mov	r1, r3
 800303c:	4610      	mov	r0, r2
 800303e:	f7fe fc06 	bl	800184e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003046:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <xTaskIncrementTick+0x170>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	429a      	cmp	r2, r3
 800304e:	d3b3      	bcc.n	8002fb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003050:	2301      	movs	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003054:	e7b0      	b.n	8002fb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003056:	4b17      	ldr	r3, [pc, #92]	; (80030b4 <xTaskIncrementTick+0x170>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800305c:	4914      	ldr	r1, [pc, #80]	; (80030b0 <xTaskIncrementTick+0x16c>)
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d907      	bls.n	800307e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800306e:	2301      	movs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e004      	b.n	800307e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003074:	4b10      	ldr	r3, [pc, #64]	; (80030b8 <xTaskIncrementTick+0x174>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	4a0f      	ldr	r2, [pc, #60]	; (80030b8 <xTaskIncrementTick+0x174>)
 800307c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800307e:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <xTaskIncrementTick+0x178>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003086:	2301      	movs	r3, #1
 8003088:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800308a:	697b      	ldr	r3, [r7, #20]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000c38 	.word	0x20000c38
 8003098:	20000c14 	.word	0x20000c14
 800309c:	20000bc8 	.word	0x20000bc8
 80030a0:	20000bcc 	.word	0x20000bcc
 80030a4:	20000c28 	.word	0x20000c28
 80030a8:	20000c30 	.word	0x20000c30
 80030ac:	20000c18 	.word	0x20000c18
 80030b0:	20000740 	.word	0x20000740
 80030b4:	2000073c 	.word	0x2000073c
 80030b8:	20000c20 	.word	0x20000c20
 80030bc:	20000c24 	.word	0x20000c24

080030c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030c6:	4b27      	ldr	r3, [pc, #156]	; (8003164 <vTaskSwitchContext+0xa4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <vTaskSwitchContext+0xa8>)
 80030d0:	2201      	movs	r2, #1
 80030d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80030d4:	e041      	b.n	800315a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80030d6:	4b24      	ldr	r3, [pc, #144]	; (8003168 <vTaskSwitchContext+0xa8>)
 80030d8:	2200      	movs	r2, #0
 80030da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80030dc:	4b23      	ldr	r3, [pc, #140]	; (800316c <vTaskSwitchContext+0xac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e010      	b.n	8003106 <vTaskSwitchContext+0x46>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10a      	bne.n	8003100 <vTaskSwitchContext+0x40>
	__asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	607b      	str	r3, [r7, #4]
}
 80030fc:	bf00      	nop
 80030fe:	e7fe      	b.n	80030fe <vTaskSwitchContext+0x3e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	491a      	ldr	r1, [pc, #104]	; (8003170 <vTaskSwitchContext+0xb0>)
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0e4      	beq.n	80030e4 <vTaskSwitchContext+0x24>
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4a12      	ldr	r2, [pc, #72]	; (8003170 <vTaskSwitchContext+0xb0>)
 8003126:	4413      	add	r3, r2
 8003128:	60bb      	str	r3, [r7, #8]
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	605a      	str	r2, [r3, #4]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	3308      	adds	r3, #8
 800313c:	429a      	cmp	r2, r3
 800313e:	d104      	bne.n	800314a <vTaskSwitchContext+0x8a>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	4a08      	ldr	r2, [pc, #32]	; (8003174 <vTaskSwitchContext+0xb4>)
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4a05      	ldr	r2, [pc, #20]	; (800316c <vTaskSwitchContext+0xac>)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6013      	str	r3, [r2, #0]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	bc80      	pop	{r7}
 8003162:	4770      	bx	lr
 8003164:	20000c38 	.word	0x20000c38
 8003168:	20000c24 	.word	0x20000c24
 800316c:	20000c18 	.word	0x20000c18
 8003170:	20000740 	.word	0x20000740
 8003174:	2000073c 	.word	0x2000073c

08003178 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	60fb      	str	r3, [r7, #12]
}
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800319e:	4b07      	ldr	r3, [pc, #28]	; (80031bc <vTaskPlaceOnEventList+0x44>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3318      	adds	r3, #24
 80031a4:	4619      	mov	r1, r3
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe fb74 	bl	8001894 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031ac:	2101      	movs	r1, #1
 80031ae:	6838      	ldr	r0, [r7, #0]
 80031b0:	f000 fb88 	bl	80038c4 <prvAddCurrentTaskToDelayedList>
}
 80031b4:	bf00      	nop
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	2000073c 	.word	0x2000073c

080031c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10a      	bne.n	80031e8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	617b      	str	r3, [r7, #20]
}
 80031e4:	bf00      	nop
 80031e6:	e7fe      	b.n	80031e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <vTaskPlaceOnEventListRestricted+0x54>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3318      	adds	r3, #24
 80031ee:	4619      	mov	r1, r3
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7fe fb2c 	bl	800184e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80031fc:	f04f 33ff 	mov.w	r3, #4294967295
 8003200:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	68b8      	ldr	r0, [r7, #8]
 8003206:	f000 fb5d 	bl	80038c4 <prvAddCurrentTaskToDelayedList>
	}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	2000073c 	.word	0x2000073c

08003218 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10a      	bne.n	8003244 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800322e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003232:	f383 8811 	msr	BASEPRI, r3
 8003236:	f3bf 8f6f 	isb	sy
 800323a:	f3bf 8f4f 	dsb	sy
 800323e:	60fb      	str	r3, [r7, #12]
}
 8003240:	bf00      	nop
 8003242:	e7fe      	b.n	8003242 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	3318      	adds	r3, #24
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fb5b 	bl	8001904 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <xTaskRemoveFromEventList+0xb0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d11d      	bne.n	8003292 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	3304      	adds	r3, #4
 800325a:	4618      	mov	r0, r3
 800325c:	f7fe fb52 	bl	8001904 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <xTaskRemoveFromEventList+0xb4>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d903      	bls.n	8003274 <xTaskRemoveFromEventList+0x5c>
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	4a16      	ldr	r2, [pc, #88]	; (80032cc <xTaskRemoveFromEventList+0xb4>)
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <xTaskRemoveFromEventList+0xb8>)
 8003282:	441a      	add	r2, r3
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	3304      	adds	r3, #4
 8003288:	4619      	mov	r1, r3
 800328a:	4610      	mov	r0, r2
 800328c:	f7fe fadf 	bl	800184e <vListInsertEnd>
 8003290:	e005      	b.n	800329e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	3318      	adds	r3, #24
 8003296:	4619      	mov	r1, r3
 8003298:	480e      	ldr	r0, [pc, #56]	; (80032d4 <xTaskRemoveFromEventList+0xbc>)
 800329a:	f7fe fad8 	bl	800184e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a2:	4b0d      	ldr	r3, [pc, #52]	; (80032d8 <xTaskRemoveFromEventList+0xc0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d905      	bls.n	80032b8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80032b0:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <xTaskRemoveFromEventList+0xc4>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	e001      	b.n	80032bc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80032bc:	697b      	ldr	r3, [r7, #20]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000c38 	.word	0x20000c38
 80032cc:	20000c18 	.word	0x20000c18
 80032d0:	20000740 	.word	0x20000740
 80032d4:	20000bd0 	.word	0x20000bd0
 80032d8:	2000073c 	.word	0x2000073c
 80032dc:	20000c24 	.word	0x20000c24

080032e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032e8:	4b06      	ldr	r3, [pc, #24]	; (8003304 <vTaskInternalSetTimeOutState+0x24>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032f0:	4b05      	ldr	r3, [pc, #20]	; (8003308 <vTaskInternalSetTimeOutState+0x28>)
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	605a      	str	r2, [r3, #4]
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	20000c28 	.word	0x20000c28
 8003308:	20000c14 	.word	0x20000c14

0800330c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b088      	sub	sp, #32
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d10a      	bne.n	8003332 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800331c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003320:	f383 8811 	msr	BASEPRI, r3
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	f3bf 8f4f 	dsb	sy
 800332c:	613b      	str	r3, [r7, #16]
}
 800332e:	bf00      	nop
 8003330:	e7fe      	b.n	8003330 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10a      	bne.n	800334e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333c:	f383 8811 	msr	BASEPRI, r3
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	f3bf 8f4f 	dsb	sy
 8003348:	60fb      	str	r3, [r7, #12]
}
 800334a:	bf00      	nop
 800334c:	e7fe      	b.n	800334c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800334e:	f000 ff0d 	bl	800416c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003352:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <xTaskCheckForTimeOut+0xbc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800336a:	d102      	bne.n	8003372 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	e023      	b.n	80033ba <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	4b15      	ldr	r3, [pc, #84]	; (80033cc <xTaskCheckForTimeOut+0xc0>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d007      	beq.n	800338e <xTaskCheckForTimeOut+0x82>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	429a      	cmp	r2, r3
 8003386:	d302      	bcc.n	800338e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003388:	2301      	movs	r3, #1
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	e015      	b.n	80033ba <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	429a      	cmp	r2, r3
 8003396:	d20b      	bcs.n	80033b0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	1ad2      	subs	r2, r2, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f7ff ff9b 	bl	80032e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e004      	b.n	80033ba <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80033ba:	f000 ff07 	bl	80041cc <vPortExitCritical>

	return xReturn;
 80033be:	69fb      	ldr	r3, [r7, #28]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3720      	adds	r7, #32
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	20000c14 	.word	0x20000c14
 80033cc:	20000c28 	.word	0x20000c28

080033d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <vTaskMissedYield+0x14>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
}
 80033da:	bf00      	nop
 80033dc:	46bd      	mov	sp, r7
 80033de:	bc80      	pop	{r7}
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000c24 	.word	0x20000c24

080033e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033f0:	f000 f852 	bl	8003498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033f4:	4b06      	ldr	r3, [pc, #24]	; (8003410 <prvIdleTask+0x28>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d9f9      	bls.n	80033f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <prvIdleTask+0x2c>)
 80033fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800340c:	e7f0      	b.n	80033f0 <prvIdleTask+0x8>
 800340e:	bf00      	nop
 8003410:	20000740 	.word	0x20000740
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
 8003422:	e00c      	b.n	800343e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4413      	add	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4a12      	ldr	r2, [pc, #72]	; (8003478 <prvInitialiseTaskLists+0x60>)
 8003430:	4413      	add	r3, r2
 8003432:	4618      	mov	r0, r3
 8003434:	f7fe f9e0 	bl	80017f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3301      	adds	r3, #1
 800343c:	607b      	str	r3, [r7, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b37      	cmp	r3, #55	; 0x37
 8003442:	d9ef      	bls.n	8003424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003444:	480d      	ldr	r0, [pc, #52]	; (800347c <prvInitialiseTaskLists+0x64>)
 8003446:	f7fe f9d7 	bl	80017f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800344a:	480d      	ldr	r0, [pc, #52]	; (8003480 <prvInitialiseTaskLists+0x68>)
 800344c:	f7fe f9d4 	bl	80017f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003450:	480c      	ldr	r0, [pc, #48]	; (8003484 <prvInitialiseTaskLists+0x6c>)
 8003452:	f7fe f9d1 	bl	80017f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003456:	480c      	ldr	r0, [pc, #48]	; (8003488 <prvInitialiseTaskLists+0x70>)
 8003458:	f7fe f9ce 	bl	80017f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800345c:	480b      	ldr	r0, [pc, #44]	; (800348c <prvInitialiseTaskLists+0x74>)
 800345e:	f7fe f9cb 	bl	80017f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <prvInitialiseTaskLists+0x78>)
 8003464:	4a05      	ldr	r2, [pc, #20]	; (800347c <prvInitialiseTaskLists+0x64>)
 8003466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <prvInitialiseTaskLists+0x7c>)
 800346a:	4a05      	ldr	r2, [pc, #20]	; (8003480 <prvInitialiseTaskLists+0x68>)
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000740 	.word	0x20000740
 800347c:	20000ba0 	.word	0x20000ba0
 8003480:	20000bb4 	.word	0x20000bb4
 8003484:	20000bd0 	.word	0x20000bd0
 8003488:	20000be4 	.word	0x20000be4
 800348c:	20000bfc 	.word	0x20000bfc
 8003490:	20000bc8 	.word	0x20000bc8
 8003494:	20000bcc 	.word	0x20000bcc

08003498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800349e:	e019      	b.n	80034d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80034a0:	f000 fe64 	bl	800416c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80034a4:	4b10      	ldr	r3, [pc, #64]	; (80034e8 <prvCheckTasksWaitingTermination+0x50>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fe fa27 	bl	8001904 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80034b6:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <prvCheckTasksWaitingTermination+0x54>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	4a0b      	ldr	r2, [pc, #44]	; (80034ec <prvCheckTasksWaitingTermination+0x54>)
 80034be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <prvCheckTasksWaitingTermination+0x58>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <prvCheckTasksWaitingTermination+0x58>)
 80034c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80034ca:	f000 fe7f 	bl	80041cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 f810 	bl	80034f4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <prvCheckTasksWaitingTermination+0x58>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1e1      	bne.n	80034a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	20000be4 	.word	0x20000be4
 80034ec:	20000c10 	.word	0x20000c10
 80034f0:	20000bf8 	.word	0x20000bf8

080034f4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fff2 	bl	80044f4 <vPortFree>
				vPortFree( pxTCB );
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 ffef 	bl	80044f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003516:	e018      	b.n	800354a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800351e:	2b01      	cmp	r3, #1
 8003520:	d103      	bne.n	800352a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 ffe6 	bl	80044f4 <vPortFree>
	}
 8003528:	e00f      	b.n	800354a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003530:	2b02      	cmp	r3, #2
 8003532:	d00a      	beq.n	800354a <prvDeleteTCB+0x56>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	60fb      	str	r3, [r7, #12]
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <prvDeleteTCB+0x54>
	}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800355a:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <prvResetNextTaskUnblockTime+0x40>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d101      	bne.n	8003568 <prvResetNextTaskUnblockTime+0x14>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <prvResetNextTaskUnblockTime+0x16>
 8003568:	2300      	movs	r3, #0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800356e:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <prvResetNextTaskUnblockTime+0x44>)
 8003570:	f04f 32ff 	mov.w	r2, #4294967295
 8003574:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003576:	e008      	b.n	800358a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <prvResetNextTaskUnblockTime+0x40>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a04      	ldr	r2, [pc, #16]	; (8003598 <prvResetNextTaskUnblockTime+0x44>)
 8003588:	6013      	str	r3, [r2, #0]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr
 8003594:	20000bc8 	.word	0x20000bc8
 8003598:	20000c30 	.word	0x20000c30

0800359c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80035a2:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <xTaskGetSchedulerState+0x34>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80035aa:	2301      	movs	r3, #1
 80035ac:	607b      	str	r3, [r7, #4]
 80035ae:	e008      	b.n	80035c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <xTaskGetSchedulerState+0x38>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80035b8:	2302      	movs	r3, #2
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	e001      	b.n	80035c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80035be:	2300      	movs	r3, #0
 80035c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80035c2:	687b      	ldr	r3, [r7, #4]
	}
 80035c4:	4618      	mov	r0, r3
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20000c1c 	.word	0x20000c1c
 80035d4:	20000c38 	.word	0x20000c38

080035d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d056      	beq.n	800369c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035f2:	4b2d      	ldr	r3, [pc, #180]	; (80036a8 <xTaskPriorityInherit+0xd0>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d246      	bcs.n	800368a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b00      	cmp	r3, #0
 8003602:	db06      	blt.n	8003612 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003604:	4b28      	ldr	r3, [pc, #160]	; (80036a8 <xTaskPriorityInherit+0xd0>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	6959      	ldr	r1, [r3, #20]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361a:	4613      	mov	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4a22      	ldr	r2, [pc, #136]	; (80036ac <xTaskPriorityInherit+0xd4>)
 8003624:	4413      	add	r3, r2
 8003626:	4299      	cmp	r1, r3
 8003628:	d101      	bne.n	800362e <xTaskPriorityInherit+0x56>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <xTaskPriorityInherit+0x58>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d022      	beq.n	800367a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3304      	adds	r3, #4
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe f963 	bl	8001904 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800363e:	4b1a      	ldr	r3, [pc, #104]	; (80036a8 <xTaskPriorityInherit+0xd0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800364c:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <xTaskPriorityInherit+0xd8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d903      	bls.n	800365c <xTaskPriorityInherit+0x84>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <xTaskPriorityInherit+0xd8>)
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4a10      	ldr	r2, [pc, #64]	; (80036ac <xTaskPriorityInherit+0xd4>)
 800366a:	441a      	add	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7fe f8eb 	bl	800184e <vListInsertEnd>
 8003678:	e004      	b.n	8003684 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800367a:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <xTaskPriorityInherit+0xd0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003684:	2301      	movs	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e008      	b.n	800369c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <xTaskPriorityInherit+0xd0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003694:	429a      	cmp	r2, r3
 8003696:	d201      	bcs.n	800369c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003698:	2301      	movs	r3, #1
 800369a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800369c:	68fb      	ldr	r3, [r7, #12]
	}
 800369e:	4618      	mov	r0, r3
 80036a0:	3710      	adds	r7, #16
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	2000073c 	.word	0x2000073c
 80036ac:	20000740 	.word	0x20000740
 80036b0:	20000c18 	.word	0x20000c18

080036b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d056      	beq.n	8003778 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <xTaskPriorityDisinherit+0xd0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d00a      	beq.n	80036ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	60fb      	str	r3, [r7, #12]
}
 80036e6:	bf00      	nop
 80036e8:	e7fe      	b.n	80036e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60bb      	str	r3, [r7, #8]
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	1e5a      	subs	r2, r3, #1
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	429a      	cmp	r2, r3
 800371c:	d02c      	beq.n	8003778 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	2b00      	cmp	r3, #0
 8003724:	d128      	bne.n	8003778 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3304      	adds	r3, #4
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe f8ea 	bl	8001904 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <xTaskPriorityDisinherit+0xd4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d903      	bls.n	8003758 <xTaskPriorityDisinherit+0xa4>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <xTaskPriorityDisinherit+0xd4>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4a09      	ldr	r2, [pc, #36]	; (800378c <xTaskPriorityDisinherit+0xd8>)
 8003766:	441a      	add	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f7fe f86d 	bl	800184e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003778:	697b      	ldr	r3, [r7, #20]
	}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	2000073c 	.word	0x2000073c
 8003788:	20000c18 	.word	0x20000c18
 800378c:	20000740 	.word	0x20000740

08003790 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d06f      	beq.n	8003888 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10a      	bne.n	80037c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60fb      	str	r3, [r7, #12]
}
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d902      	bls.n	80037d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	e002      	b.n	80037dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d050      	beq.n	8003888 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d14b      	bne.n	8003888 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80037f0:	4b27      	ldr	r3, [pc, #156]	; (8003890 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10a      	bne.n	8003810 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	60bb      	str	r3, [r7, #8]
}
 800380c:	bf00      	nop
 800380e:	e7fe      	b.n	800380e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	69fa      	ldr	r2, [r7, #28]
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	db04      	blt.n	800382e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	6959      	ldr	r1, [r3, #20]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4a15      	ldr	r2, [pc, #84]	; (8003894 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800383e:	4413      	add	r3, r2
 8003840:	4299      	cmp	r1, r3
 8003842:	d101      	bne.n	8003848 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01c      	beq.n	8003888 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	3304      	adds	r3, #4
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe f856 	bl	8001904 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800385c:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d903      	bls.n	800386c <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003868:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4a06      	ldr	r2, [pc, #24]	; (8003894 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800387a:	441a      	add	r2, r3
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	3304      	adds	r3, #4
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f7fd ffe3 	bl	800184e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003888:	bf00      	nop
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	2000073c 	.word	0x2000073c
 8003894:	20000740 	.word	0x20000740
 8003898:	20000c18 	.word	0x20000c18

0800389c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d004      	beq.n	80038b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038ae:	3201      	adds	r2, #1
 80038b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80038b2:	4b03      	ldr	r3, [pc, #12]	; (80038c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80038b4:	681b      	ldr	r3, [r3, #0]
	}
 80038b6:	4618      	mov	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	2000073c 	.word	0x2000073c

080038c4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
 80038cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80038ce:	4b21      	ldr	r3, [pc, #132]	; (8003954 <prvAddCurrentTaskToDelayedList+0x90>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038d4:	4b20      	ldr	r3, [pc, #128]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3304      	adds	r3, #4
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe f812 	bl	8001904 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e6:	d10a      	bne.n	80038fe <prvAddCurrentTaskToDelayedList+0x3a>
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	4819      	ldr	r0, [pc, #100]	; (800395c <prvAddCurrentTaskToDelayedList+0x98>)
 80038f8:	f7fd ffa9 	bl	800184e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80038fc:	e026      	b.n	800394c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4413      	add	r3, r2
 8003904:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	429a      	cmp	r2, r3
 8003914:	d209      	bcs.n	800392a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f7fd ffb6 	bl	8001894 <vListInsert>
}
 8003928:	e010      	b.n	800394c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <prvAddCurrentTaskToDelayedList+0xa0>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <prvAddCurrentTaskToDelayedList+0x94>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3304      	adds	r3, #4
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f7fd ffac 	bl	8001894 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800393c:	4b0a      	ldr	r3, [pc, #40]	; (8003968 <prvAddCurrentTaskToDelayedList+0xa4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	429a      	cmp	r2, r3
 8003944:	d202      	bcs.n	800394c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003946:	4a08      	ldr	r2, [pc, #32]	; (8003968 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	6013      	str	r3, [r2, #0]
}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000c14 	.word	0x20000c14
 8003958:	2000073c 	.word	0x2000073c
 800395c:	20000bfc 	.word	0x20000bfc
 8003960:	20000bcc 	.word	0x20000bcc
 8003964:	20000bc8 	.word	0x20000bc8
 8003968:	20000c30 	.word	0x20000c30

0800396c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08a      	sub	sp, #40	; 0x28
 8003970:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003976:	f000 facb 	bl	8003f10 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800397a:	4b1c      	ldr	r3, [pc, #112]	; (80039ec <xTimerCreateTimerTask+0x80>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d021      	beq.n	80039c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800398a:	1d3a      	adds	r2, r7, #4
 800398c:	f107 0108 	add.w	r1, r7, #8
 8003990:	f107 030c 	add.w	r3, r7, #12
 8003994:	4618      	mov	r0, r3
 8003996:	f7fd ff15 	bl	80017c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	9202      	str	r2, [sp, #8]
 80039a2:	9301      	str	r3, [sp, #4]
 80039a4:	2302      	movs	r3, #2
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	460a      	mov	r2, r1
 80039ac:	4910      	ldr	r1, [pc, #64]	; (80039f0 <xTimerCreateTimerTask+0x84>)
 80039ae:	4811      	ldr	r0, [pc, #68]	; (80039f4 <xTimerCreateTimerTask+0x88>)
 80039b0:	f7fe ffdc 	bl	800296c <xTaskCreateStatic>
 80039b4:	4603      	mov	r3, r0
 80039b6:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <xTimerCreateTimerTask+0x8c>)
 80039b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <xTimerCreateTimerTask+0x8c>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d001      	beq.n	80039c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80039c2:	2301      	movs	r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	613b      	str	r3, [r7, #16]
}
 80039de:	bf00      	nop
 80039e0:	e7fe      	b.n	80039e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80039e2:	697b      	ldr	r3, [r7, #20]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20000c6c 	.word	0x20000c6c
 80039f0:	080047d8 	.word	0x080047d8
 80039f4:	08003b19 	.word	0x08003b19
 80039f8:	20000c70 	.word	0x20000c70

080039fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10a      	bne.n	8003a2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	623b      	str	r3, [r7, #32]
}
 8003a26:	bf00      	nop
 8003a28:	e7fe      	b.n	8003a28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003a2a:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d02a      	beq.n	8003a88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b05      	cmp	r3, #5
 8003a42:	dc18      	bgt.n	8003a76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a44:	f7ff fdaa 	bl	800359c <xTaskGetSchedulerState>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d109      	bne.n	8003a62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a4e:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	f107 0110 	add.w	r1, r7, #16
 8003a56:	2300      	movs	r3, #0
 8003a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a5a:	f7fe f927 	bl	8001cac <xQueueGenericSend>
 8003a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8003a60:	e012      	b.n	8003a88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a62:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a64:	6818      	ldr	r0, [r3, #0]
 8003a66:	f107 0110 	add.w	r1, r7, #16
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f7fe f91d 	bl	8001cac <xQueueGenericSend>
 8003a72:	6278      	str	r0, [r7, #36]	; 0x24
 8003a74:	e008      	b.n	8003a88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003a76:	4b07      	ldr	r3, [pc, #28]	; (8003a94 <xTimerGenericCommand+0x98>)
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	f107 0110 	add.w	r1, r7, #16
 8003a7e:	2300      	movs	r3, #0
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	f7fe fa11 	bl	8001ea8 <xQueueGenericSendFromISR>
 8003a86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3728      	adds	r7, #40	; 0x28
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000c6c 	.word	0x20000c6c

08003a98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	; (8003b14 <prvProcessExpiredTimer+0x7c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fd ff27 	bl	8001904 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d122      	bne.n	8003b04 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	18d1      	adds	r1, r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	6978      	ldr	r0, [r7, #20]
 8003acc:	f000 f8c8 	bl	8003c60 <prvInsertTimerInActiveList>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d016      	beq.n	8003b04 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	2300      	movs	r3, #0
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6978      	ldr	r0, [r7, #20]
 8003ae2:	f7ff ff8b 	bl	80039fc <xTimerGenericCommand>
 8003ae6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10a      	bne.n	8003b04 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af2:	f383 8811 	msr	BASEPRI, r3
 8003af6:	f3bf 8f6f 	isb	sy
 8003afa:	f3bf 8f4f 	dsb	sy
 8003afe:	60fb      	str	r3, [r7, #12]
}
 8003b00:	bf00      	nop
 8003b02:	e7fe      	b.n	8003b02 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	6978      	ldr	r0, [r7, #20]
 8003b0a:	4798      	blx	r3
}
 8003b0c:	bf00      	nop
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000c64 	.word	0x20000c64

08003b18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b20:	f107 0308 	add.w	r3, r7, #8
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 f857 	bl	8003bd8 <prvGetNextExpireTime>
 8003b2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f803 	bl	8003b3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003b36:	f000 f8d5 	bl	8003ce4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003b3a:	e7f1      	b.n	8003b20 <prvTimerTask+0x8>

08003b3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003b46:	f7ff f943 	bl	8002dd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b4a:	f107 0308 	add.w	r3, r7, #8
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f866 	bl	8003c20 <prvSampleTimeNow>
 8003b54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d130      	bne.n	8003bbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10a      	bne.n	8003b78 <prvProcessTimerOrBlockTask+0x3c>
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d806      	bhi.n	8003b78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003b6a:	f7ff f93f 	bl	8002dec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003b6e:	68f9      	ldr	r1, [r7, #12]
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff ff91 	bl	8003a98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003b76:	e024      	b.n	8003bc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <prvProcessTimerOrBlockTask+0x90>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <prvProcessTimerOrBlockTask+0x94>)
 8003b92:	6818      	ldr	r0, [r3, #0]
 8003b94:	687a      	ldr	r2, [r7, #4]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	f7fe feb1 	bl	8002904 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003ba2:	f7ff f923 	bl	8002dec <xTaskResumeAll>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10a      	bne.n	8003bc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003bac:	4b09      	ldr	r3, [pc, #36]	; (8003bd4 <prvProcessTimerOrBlockTask+0x98>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
}
 8003bbc:	e001      	b.n	8003bc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003bbe:	f7ff f915 	bl	8002dec <xTaskResumeAll>
}
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000c68 	.word	0x20000c68
 8003bd0:	20000c6c 	.word	0x20000c6c
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003be0:	4b0e      	ldr	r3, [pc, #56]	; (8003c1c <prvGetNextExpireTime+0x44>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	bf0c      	ite	eq
 8003bea:	2301      	moveq	r3, #1
 8003bec:	2300      	movne	r3, #0
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d105      	bne.n	8003c0a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bfe:	4b07      	ldr	r3, [pc, #28]	; (8003c1c <prvGetNextExpireTime+0x44>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	60fb      	str	r3, [r7, #12]
 8003c08:	e001      	b.n	8003c0e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3714      	adds	r7, #20
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000c64 	.word	0x20000c64

08003c20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003c28:	f7ff f97e 	bl	8002f28 <xTaskGetTickCount>
 8003c2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <prvSampleTimeNow+0x3c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d205      	bcs.n	8003c44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003c38:	f000 f908 	bl	8003e4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	e002      	b.n	8003c4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003c4a:	4a04      	ldr	r2, [pc, #16]	; (8003c5c <prvSampleTimeNow+0x3c>)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003c50:	68fb      	ldr	r3, [r7, #12]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000c74 	.word	0x20000c74

08003c60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
 8003c6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003c7e:	68ba      	ldr	r2, [r7, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d812      	bhi.n	8003cac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	1ad2      	subs	r2, r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d302      	bcc.n	8003c9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e01b      	b.n	8003cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003c9a:	4b10      	ldr	r3, [pc, #64]	; (8003cdc <prvInsertTimerInActiveList+0x7c>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	f7fd fdf5 	bl	8001894 <vListInsert>
 8003caa:	e012      	b.n	8003cd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d206      	bcs.n	8003cc2 <prvInsertTimerInActiveList+0x62>
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d302      	bcc.n	8003cc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	e007      	b.n	8003cd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cc2:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <prvInsertTimerInActiveList+0x80>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f7fd fde1 	bl	8001894 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003cd2:	697b      	ldr	r3, [r7, #20]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000c68 	.word	0x20000c68
 8003ce0:	20000c64 	.word	0x20000c64

08003ce4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08e      	sub	sp, #56	; 0x38
 8003ce8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003cea:	e09d      	b.n	8003e28 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da18      	bge.n	8003d24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003cf2:	1d3b      	adds	r3, r7, #4
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	61fb      	str	r3, [r7, #28]
}
 8003d10:	bf00      	nop
 8003d12:	e7fe      	b.n	8003d12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1a:	6850      	ldr	r0, [r2, #4]
 8003d1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1e:	6892      	ldr	r2, [r2, #8]
 8003d20:	4611      	mov	r1, r2
 8003d22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db7d      	blt.n	8003e26 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d004      	beq.n	8003d40 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fd fde2 	bl	8001904 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d40:	463b      	mov	r3, r7
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff ff6c 	bl	8003c20 <prvSampleTimeNow>
 8003d48:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b09      	cmp	r3, #9
 8003d4e:	d86b      	bhi.n	8003e28 <prvProcessReceivedCommands+0x144>
 8003d50:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <prvProcessReceivedCommands+0x74>)
 8003d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d56:	bf00      	nop
 8003d58:	08003d81 	.word	0x08003d81
 8003d5c:	08003d81 	.word	0x08003d81
 8003d60:	08003d81 	.word	0x08003d81
 8003d64:	08003e29 	.word	0x08003e29
 8003d68:	08003ddd 	.word	0x08003ddd
 8003d6c:	08003e15 	.word	0x08003e15
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003d81 	.word	0x08003d81
 8003d78:	08003e29 	.word	0x08003e29
 8003d7c:	08003ddd 	.word	0x08003ddd
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	18d1      	adds	r1, r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d8e:	f7ff ff67 	bl	8003c60 <prvInsertTimerInActiveList>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d047      	beq.n	8003e28 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d9e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d13f      	bne.n	8003e28 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	441a      	add	r2, r3
 8003db0:	2300      	movs	r3, #0
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	2300      	movs	r3, #0
 8003db6:	2100      	movs	r1, #0
 8003db8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dba:	f7ff fe1f 	bl	80039fc <xTimerGenericCommand>
 8003dbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003dc0:	6a3b      	ldr	r3, [r7, #32]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d130      	bne.n	8003e28 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	61bb      	str	r3, [r7, #24]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dee:	f383 8811 	msr	BASEPRI, r3
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	617b      	str	r3, [r7, #20]
}
 8003dfc:	bf00      	nop
 8003dfe:	e7fe      	b.n	8003dfe <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	18d1      	adds	r1, r2, r3
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e0e:	f7ff ff27 	bl	8003c60 <prvInsertTimerInActiveList>
					break;
 8003e12:	e009      	b.n	8003e28 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003e1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e20:	f000 fb68 	bl	80044f4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003e24:	e000      	b.n	8003e28 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003e26:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e28:	4b07      	ldr	r3, [pc, #28]	; (8003e48 <prvProcessReceivedCommands+0x164>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	1d39      	adds	r1, r7, #4
 8003e2e:	2200      	movs	r2, #0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe f95f 	bl	80020f4 <xQueueReceive>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f47f af57 	bne.w	8003cec <prvProcessReceivedCommands+0x8>
	}
}
 8003e3e:	bf00      	nop
 8003e40:	bf00      	nop
 8003e42:	3730      	adds	r7, #48	; 0x30
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	20000c6c 	.word	0x20000c6c

08003e4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e52:	e045      	b.n	8003ee0 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <prvSwitchTimerLists+0xbc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e5e:	4b2a      	ldr	r3, [pc, #168]	; (8003f08 <prvSwitchTimerLists+0xbc>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fd fd49 	bl	8001904 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d12e      	bne.n	8003ee0 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d90e      	bls.n	8003eb2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ea0:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <prvSwitchTimerLists+0xbc>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f7fd fcf2 	bl	8001894 <vListInsert>
 8003eb0:	e016      	b.n	8003ee0 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	2100      	movs	r1, #0
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff fd9d 	bl	80039fc <xTimerGenericCommand>
 8003ec2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	603b      	str	r3, [r7, #0]
}
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003ee0:	4b09      	ldr	r3, [pc, #36]	; (8003f08 <prvSwitchTimerLists+0xbc>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1b4      	bne.n	8003e54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <prvSwitchTimerLists+0xbc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ef0:	4b06      	ldr	r3, [pc, #24]	; (8003f0c <prvSwitchTimerLists+0xc0>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a04      	ldr	r2, [pc, #16]	; (8003f08 <prvSwitchTimerLists+0xbc>)
 8003ef6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ef8:	4a04      	ldr	r2, [pc, #16]	; (8003f0c <prvSwitchTimerLists+0xc0>)
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	6013      	str	r3, [r2, #0]
}
 8003efe:	bf00      	nop
 8003f00:	3718      	adds	r7, #24
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000c64 	.word	0x20000c64
 8003f0c:	20000c68 	.word	0x20000c68

08003f10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003f16:	f000 f929 	bl	800416c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <prvCheckForValidListAndQueue+0x60>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d120      	bne.n	8003f64 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003f22:	4814      	ldr	r0, [pc, #80]	; (8003f74 <prvCheckForValidListAndQueue+0x64>)
 8003f24:	f7fd fc68 	bl	80017f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003f28:	4813      	ldr	r0, [pc, #76]	; (8003f78 <prvCheckForValidListAndQueue+0x68>)
 8003f2a:	f7fd fc65 	bl	80017f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003f2e:	4b13      	ldr	r3, [pc, #76]	; (8003f7c <prvCheckForValidListAndQueue+0x6c>)
 8003f30:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <prvCheckForValidListAndQueue+0x64>)
 8003f32:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003f34:	4b12      	ldr	r3, [pc, #72]	; (8003f80 <prvCheckForValidListAndQueue+0x70>)
 8003f36:	4a10      	ldr	r2, [pc, #64]	; (8003f78 <prvCheckForValidListAndQueue+0x68>)
 8003f38:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <prvCheckForValidListAndQueue+0x74>)
 8003f40:	4a11      	ldr	r2, [pc, #68]	; (8003f88 <prvCheckForValidListAndQueue+0x78>)
 8003f42:	2110      	movs	r1, #16
 8003f44:	200a      	movs	r0, #10
 8003f46:	f7fd fd6f 	bl	8001a28 <xQueueGenericCreateStatic>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	4a08      	ldr	r2, [pc, #32]	; (8003f70 <prvCheckForValidListAndQueue+0x60>)
 8003f4e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003f50:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <prvCheckForValidListAndQueue+0x60>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003f58:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <prvCheckForValidListAndQueue+0x60>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	490b      	ldr	r1, [pc, #44]	; (8003f8c <prvCheckForValidListAndQueue+0x7c>)
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe fc7e 	bl	8002860 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f64:	f000 f932 	bl	80041cc <vPortExitCritical>
}
 8003f68:	bf00      	nop
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	20000c6c 	.word	0x20000c6c
 8003f74:	20000c3c 	.word	0x20000c3c
 8003f78:	20000c50 	.word	0x20000c50
 8003f7c:	20000c64 	.word	0x20000c64
 8003f80:	20000c68 	.word	0x20000c68
 8003f84:	20000d18 	.word	0x20000d18
 8003f88:	20000c78 	.word	0x20000c78
 8003f8c:	080047e0 	.word	0x080047e0

08003f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	3b04      	subs	r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	3b04      	subs	r3, #4
 8003fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f023 0201 	bic.w	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3b04      	subs	r3, #4
 8003fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003fc0:	4a08      	ldr	r2, [pc, #32]	; (8003fe4 <pxPortInitialiseStack+0x54>)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	3b14      	subs	r3, #20
 8003fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3b20      	subs	r3, #32
 8003fd6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	08003fe9 	.word	0x08003fe9

08003fe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <prvTaskExitError+0x54>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d00a      	beq.n	8004012 <prvTaskExitError+0x2a>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	60fb      	str	r3, [r7, #12]
}
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <prvTaskExitError+0x28>
	__asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	60bb      	str	r3, [r7, #8]
}
 8004024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004026:	bf00      	nop
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0fc      	beq.n	8004028 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	bc80      	pop	{r7}
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	2000000c 	.word	0x2000000c

08004040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004040:	4b07      	ldr	r3, [pc, #28]	; (8004060 <pxCurrentTCBConst2>)
 8004042:	6819      	ldr	r1, [r3, #0]
 8004044:	6808      	ldr	r0, [r1, #0]
 8004046:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800404a:	f380 8809 	msr	PSP, r0
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f04f 0000 	mov.w	r0, #0
 8004056:	f380 8811 	msr	BASEPRI, r0
 800405a:	f04e 0e0d 	orr.w	lr, lr, #13
 800405e:	4770      	bx	lr

08004060 <pxCurrentTCBConst2>:
 8004060:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop

08004068 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004068:	4806      	ldr	r0, [pc, #24]	; (8004084 <prvPortStartFirstTask+0x1c>)
 800406a:	6800      	ldr	r0, [r0, #0]
 800406c:	6800      	ldr	r0, [r0, #0]
 800406e:	f380 8808 	msr	MSP, r0
 8004072:	b662      	cpsie	i
 8004074:	b661      	cpsie	f
 8004076:	f3bf 8f4f 	dsb	sy
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	df00      	svc	0
 8004080:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004082:	bf00      	nop
 8004084:	e000ed08 	.word	0xe000ed08

08004088 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800408e:	4b32      	ldr	r3, [pc, #200]	; (8004158 <xPortStartScheduler+0xd0>)
 8004090:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	22ff      	movs	r2, #255	; 0xff
 800409e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80040a8:	78fb      	ldrb	r3, [r7, #3]
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80040b0:	b2da      	uxtb	r2, r3
 80040b2:	4b2a      	ldr	r3, [pc, #168]	; (800415c <xPortStartScheduler+0xd4>)
 80040b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80040b6:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <xPortStartScheduler+0xd8>)
 80040b8:	2207      	movs	r2, #7
 80040ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040bc:	e009      	b.n	80040d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80040be:	4b28      	ldr	r3, [pc, #160]	; (8004160 <xPortStartScheduler+0xd8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	4a26      	ldr	r2, [pc, #152]	; (8004160 <xPortStartScheduler+0xd8>)
 80040c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80040c8:	78fb      	ldrb	r3, [r7, #3]
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040da:	2b80      	cmp	r3, #128	; 0x80
 80040dc:	d0ef      	beq.n	80040be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <xPortStartScheduler+0xd8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f1c3 0307 	rsb	r3, r3, #7
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d00a      	beq.n	8004100 <xPortStartScheduler+0x78>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60bb      	str	r3, [r7, #8]
}
 80040fc:	bf00      	nop
 80040fe:	e7fe      	b.n	80040fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004100:	4b17      	ldr	r3, [pc, #92]	; (8004160 <xPortStartScheduler+0xd8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	4a16      	ldr	r2, [pc, #88]	; (8004160 <xPortStartScheduler+0xd8>)
 8004108:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <xPortStartScheduler+0xd8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004112:	4a13      	ldr	r2, [pc, #76]	; (8004160 <xPortStartScheduler+0xd8>)
 8004114:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800411e:	4b11      	ldr	r3, [pc, #68]	; (8004164 <xPortStartScheduler+0xdc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a10      	ldr	r2, [pc, #64]	; (8004164 <xPortStartScheduler+0xdc>)
 8004124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004128:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800412a:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <xPortStartScheduler+0xdc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <xPortStartScheduler+0xdc>)
 8004130:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004134:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004136:	f000 f8b9 	bl	80042ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800413a:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <xPortStartScheduler+0xe0>)
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004140:	f7ff ff92 	bl	8004068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004144:	f7fe ffbc 	bl	80030c0 <vTaskSwitchContext>
	prvTaskExitError();
 8004148:	f7ff ff4e 	bl	8003fe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	e000e400 	.word	0xe000e400
 800415c:	20000d68 	.word	0x20000d68
 8004160:	20000d6c 	.word	0x20000d6c
 8004164:	e000ed20 	.word	0xe000ed20
 8004168:	2000000c 	.word	0x2000000c

0800416c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
	__asm volatile
 8004172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004176:	f383 8811 	msr	BASEPRI, r3
 800417a:	f3bf 8f6f 	isb	sy
 800417e:	f3bf 8f4f 	dsb	sy
 8004182:	607b      	str	r3, [r7, #4]
}
 8004184:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004186:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <vPortEnterCritical+0x58>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3301      	adds	r3, #1
 800418c:	4a0d      	ldr	r2, [pc, #52]	; (80041c4 <vPortEnterCritical+0x58>)
 800418e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004190:	4b0c      	ldr	r3, [pc, #48]	; (80041c4 <vPortEnterCritical+0x58>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d10f      	bne.n	80041b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <vPortEnterCritical+0x5c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	603b      	str	r3, [r7, #0]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <vPortEnterCritical+0x4a>
	}
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	2000000c 	.word	0x2000000c
 80041c8:	e000ed04 	.word	0xe000ed04

080041cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80041d2:	4b11      	ldr	r3, [pc, #68]	; (8004218 <vPortExitCritical+0x4c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10a      	bne.n	80041f0 <vPortExitCritical+0x24>
	__asm volatile
 80041da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041de:	f383 8811 	msr	BASEPRI, r3
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	f3bf 8f4f 	dsb	sy
 80041ea:	607b      	str	r3, [r7, #4]
}
 80041ec:	bf00      	nop
 80041ee:	e7fe      	b.n	80041ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041f0:	4b09      	ldr	r3, [pc, #36]	; (8004218 <vPortExitCritical+0x4c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	3b01      	subs	r3, #1
 80041f6:	4a08      	ldr	r2, [pc, #32]	; (8004218 <vPortExitCritical+0x4c>)
 80041f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041fa:	4b07      	ldr	r3, [pc, #28]	; (8004218 <vPortExitCritical+0x4c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <vPortExitCritical+0x42>
 8004202:	2300      	movs	r3, #0
 8004204:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	f383 8811 	msr	BASEPRI, r3
}
 800420c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800420e:	bf00      	nop
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	bc80      	pop	{r7}
 8004216:	4770      	bx	lr
 8004218:	2000000c 	.word	0x2000000c
 800421c:	00000000 	.word	0x00000000

08004220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004220:	f3ef 8009 	mrs	r0, PSP
 8004224:	f3bf 8f6f 	isb	sy
 8004228:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <pxCurrentTCBConst>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004230:	6010      	str	r0, [r2, #0]
 8004232:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004236:	f04f 0050 	mov.w	r0, #80	; 0x50
 800423a:	f380 8811 	msr	BASEPRI, r0
 800423e:	f7fe ff3f 	bl	80030c0 <vTaskSwitchContext>
 8004242:	f04f 0000 	mov.w	r0, #0
 8004246:	f380 8811 	msr	BASEPRI, r0
 800424a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800424e:	6819      	ldr	r1, [r3, #0]
 8004250:	6808      	ldr	r0, [r1, #0]
 8004252:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004256:	f380 8809 	msr	PSP, r0
 800425a:	f3bf 8f6f 	isb	sy
 800425e:	4770      	bx	lr

08004260 <pxCurrentTCBConst>:
 8004260:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop

08004268 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
	__asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	607b      	str	r3, [r7, #4]
}
 8004280:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004282:	f7fe fe5f 	bl	8002f44 <xTaskIncrementTick>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800428c:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <xPortSysTickHandler+0x40>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	2300      	movs	r3, #0
 8004296:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	f383 8811 	msr	BASEPRI, r3
}
 800429e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	e000ed04 	.word	0xe000ed04

080042ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <vPortSetupTimerInterrupt+0x30>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042b6:	4b0a      	ldr	r3, [pc, #40]	; (80042e0 <vPortSetupTimerInterrupt+0x34>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042bc:	4b09      	ldr	r3, [pc, #36]	; (80042e4 <vPortSetupTimerInterrupt+0x38>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <vPortSetupTimerInterrupt+0x3c>)
 80042c2:	fba2 2303 	umull	r2, r3, r2, r3
 80042c6:	099b      	lsrs	r3, r3, #6
 80042c8:	4a08      	ldr	r2, [pc, #32]	; (80042ec <vPortSetupTimerInterrupt+0x40>)
 80042ca:	3b01      	subs	r3, #1
 80042cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042ce:	4b03      	ldr	r3, [pc, #12]	; (80042dc <vPortSetupTimerInterrupt+0x30>)
 80042d0:	2207      	movs	r2, #7
 80042d2:	601a      	str	r2, [r3, #0]
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	e000e010 	.word	0xe000e010
 80042e0:	e000e018 	.word	0xe000e018
 80042e4:	20000000 	.word	0x20000000
 80042e8:	10624dd3 	.word	0x10624dd3
 80042ec:	e000e014 	.word	0xe000e014

080042f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042f6:	f3ef 8305 	mrs	r3, IPSR
 80042fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b0f      	cmp	r3, #15
 8004300:	d914      	bls.n	800432c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004302:	4a16      	ldr	r2, [pc, #88]	; (800435c <vPortValidateInterruptPriority+0x6c>)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800430c:	4b14      	ldr	r3, [pc, #80]	; (8004360 <vPortValidateInterruptPriority+0x70>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	7afa      	ldrb	r2, [r7, #11]
 8004312:	429a      	cmp	r2, r3
 8004314:	d20a      	bcs.n	800432c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	607b      	str	r3, [r7, #4]
}
 8004328:	bf00      	nop
 800432a:	e7fe      	b.n	800432a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800432c:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <vPortValidateInterruptPriority+0x74>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <vPortValidateInterruptPriority+0x78>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d90a      	bls.n	8004352 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	603b      	str	r3, [r7, #0]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <vPortValidateInterruptPriority+0x60>
	}
 8004352:	bf00      	nop
 8004354:	3714      	adds	r7, #20
 8004356:	46bd      	mov	sp, r7
 8004358:	bc80      	pop	{r7}
 800435a:	4770      	bx	lr
 800435c:	e000e3f0 	.word	0xe000e3f0
 8004360:	20000d68 	.word	0x20000d68
 8004364:	e000ed0c 	.word	0xe000ed0c
 8004368:	20000d6c 	.word	0x20000d6c

0800436c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b08a      	sub	sp, #40	; 0x28
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004374:	2300      	movs	r3, #0
 8004376:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004378:	f7fe fd2a 	bl	8002dd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800437c:	4b58      	ldr	r3, [pc, #352]	; (80044e0 <pvPortMalloc+0x174>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004384:	f000 f910 	bl	80045a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004388:	4b56      	ldr	r3, [pc, #344]	; (80044e4 <pvPortMalloc+0x178>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 808e 	bne.w	80044b2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01d      	beq.n	80043d8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800439c:	2208      	movs	r2, #8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4413      	add	r3, r2
 80043a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d014      	beq.n	80043d8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f023 0307 	bic.w	r3, r3, #7
 80043b4:	3308      	adds	r3, #8
 80043b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00a      	beq.n	80043d8 <pvPortMalloc+0x6c>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	617b      	str	r3, [r7, #20]
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d069      	beq.n	80044b2 <pvPortMalloc+0x146>
 80043de:	4b42      	ldr	r3, [pc, #264]	; (80044e8 <pvPortMalloc+0x17c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d864      	bhi.n	80044b2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043e8:	4b40      	ldr	r3, [pc, #256]	; (80044ec <pvPortMalloc+0x180>)
 80043ea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043ec:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <pvPortMalloc+0x180>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043f2:	e004      	b.n	80043fe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80043f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	429a      	cmp	r2, r3
 8004406:	d903      	bls.n	8004410 <pvPortMalloc+0xa4>
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f1      	bne.n	80043f4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004410:	4b33      	ldr	r3, [pc, #204]	; (80044e0 <pvPortMalloc+0x174>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004416:	429a      	cmp	r2, r3
 8004418:	d04b      	beq.n	80044b2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800441a:	6a3b      	ldr	r3, [r7, #32]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2208      	movs	r2, #8
 8004420:	4413      	add	r3, r2
 8004422:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad2      	subs	r2, r2, r3
 8004434:	2308      	movs	r3, #8
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	429a      	cmp	r2, r3
 800443a:	d91f      	bls.n	800447c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800443c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4413      	add	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <pvPortMalloc+0xf8>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	613b      	str	r3, [r7, #16]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	1ad2      	subs	r2, r2, r3
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004476:	69b8      	ldr	r0, [r7, #24]
 8004478:	f000 f8f8 	bl	800466c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800447c:	4b1a      	ldr	r3, [pc, #104]	; (80044e8 <pvPortMalloc+0x17c>)
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <pvPortMalloc+0x17c>)
 8004488:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800448a:	4b17      	ldr	r3, [pc, #92]	; (80044e8 <pvPortMalloc+0x17c>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b18      	ldr	r3, [pc, #96]	; (80044f0 <pvPortMalloc+0x184>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d203      	bcs.n	800449e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <pvPortMalloc+0x17c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a15      	ldr	r2, [pc, #84]	; (80044f0 <pvPortMalloc+0x184>)
 800449c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	4b10      	ldr	r3, [pc, #64]	; (80044e4 <pvPortMalloc+0x178>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ae:	2200      	movs	r2, #0
 80044b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044b2:	f7fe fc9b 	bl	8002dec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <pvPortMalloc+0x16a>
	__asm volatile
 80044c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c4:	f383 8811 	msr	BASEPRI, r3
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	f3bf 8f4f 	dsb	sy
 80044d0:	60fb      	str	r3, [r7, #12]
}
 80044d2:	bf00      	nop
 80044d4:	e7fe      	b.n	80044d4 <pvPortMalloc+0x168>
	return pvReturn;
 80044d6:	69fb      	ldr	r3, [r7, #28]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3728      	adds	r7, #40	; 0x28
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20001978 	.word	0x20001978
 80044e4:	20001984 	.word	0x20001984
 80044e8:	2000197c 	.word	0x2000197c
 80044ec:	20001970 	.word	0x20001970
 80044f0:	20001980 	.word	0x20001980

080044f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d048      	beq.n	8004598 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004506:	2308      	movs	r3, #8
 8004508:	425b      	negs	r3, r3
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4413      	add	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <vPortFree+0xac>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4013      	ands	r3, r2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10a      	bne.n	8004538 <vPortFree+0x44>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	60fb      	str	r3, [r7, #12]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00a      	beq.n	8004556 <vPortFree+0x62>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	60bb      	str	r3, [r7, #8]
}
 8004552:	bf00      	nop
 8004554:	e7fe      	b.n	8004554 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	4b11      	ldr	r3, [pc, #68]	; (80045a0 <vPortFree+0xac>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	d019      	beq.n	8004598 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d115      	bne.n	8004598 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	4b0b      	ldr	r3, [pc, #44]	; (80045a0 <vPortFree+0xac>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	43db      	mvns	r3, r3
 8004576:	401a      	ands	r2, r3
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800457c:	f7fe fc28 	bl	8002dd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	4b07      	ldr	r3, [pc, #28]	; (80045a4 <vPortFree+0xb0>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4413      	add	r3, r2
 800458a:	4a06      	ldr	r2, [pc, #24]	; (80045a4 <vPortFree+0xb0>)
 800458c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800458e:	6938      	ldr	r0, [r7, #16]
 8004590:	f000 f86c 	bl	800466c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004594:	f7fe fc2a 	bl	8002dec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004598:	bf00      	nop
 800459a:	3718      	adds	r7, #24
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20001984 	.word	0x20001984
 80045a4:	2000197c 	.word	0x2000197c

080045a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80045b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045b4:	4b27      	ldr	r3, [pc, #156]	; (8004654 <prvHeapInit+0xac>)
 80045b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3307      	adds	r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	4a1f      	ldr	r2, [pc, #124]	; (8004654 <prvHeapInit+0xac>)
 80045d8:	4413      	add	r3, r2
 80045da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045e0:	4a1d      	ldr	r2, [pc, #116]	; (8004658 <prvHeapInit+0xb0>)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80045e6:	4b1c      	ldr	r3, [pc, #112]	; (8004658 <prvHeapInit+0xb0>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	4413      	add	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80045f4:	2208      	movs	r2, #8
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0307 	bic.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	4a15      	ldr	r2, [pc, #84]	; (800465c <prvHeapInit+0xb4>)
 8004608:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <prvHeapInit+0xb4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <prvHeapInit+0xb4>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004628:	4b0c      	ldr	r3, [pc, #48]	; (800465c <prvHeapInit+0xb4>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a0a      	ldr	r2, [pc, #40]	; (8004660 <prvHeapInit+0xb8>)
 8004636:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	4a09      	ldr	r2, [pc, #36]	; (8004664 <prvHeapInit+0xbc>)
 800463e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004640:	4b09      	ldr	r3, [pc, #36]	; (8004668 <prvHeapInit+0xc0>)
 8004642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004646:	601a      	str	r2, [r3, #0]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	20000d70 	.word	0x20000d70
 8004658:	20001970 	.word	0x20001970
 800465c:	20001978 	.word	0x20001978
 8004660:	20001980 	.word	0x20001980
 8004664:	2000197c 	.word	0x2000197c
 8004668:	20001984 	.word	0x20001984

0800466c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <prvInsertBlockIntoFreeList+0xa8>)
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e002      	b.n	8004680 <prvInsertBlockIntoFreeList+0x14>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	429a      	cmp	r2, r3
 8004688:	d8f7      	bhi.n	800467a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	4413      	add	r3, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	429a      	cmp	r2, r3
 800469a:	d108      	bne.n	80046ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	441a      	add	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	441a      	add	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d118      	bne.n	80046f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4b14      	ldr	r3, [pc, #80]	; (8004718 <prvInsertBlockIntoFreeList+0xac>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d00d      	beq.n	80046ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	441a      	add	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e008      	b.n	80046fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046ea:	4b0b      	ldr	r3, [pc, #44]	; (8004718 <prvInsertBlockIntoFreeList+0xac>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	601a      	str	r2, [r3, #0]
 80046f2:	e003      	b.n	80046fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	429a      	cmp	r2, r3
 8004702:	d002      	beq.n	800470a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	bc80      	pop	{r7}
 8004712:	4770      	bx	lr
 8004714:	20001970 	.word	0x20001970
 8004718:	20001978 	.word	0x20001978

0800471c <__libc_init_array>:
 800471c:	b570      	push	{r4, r5, r6, lr}
 800471e:	2600      	movs	r6, #0
 8004720:	4d0c      	ldr	r5, [pc, #48]	; (8004754 <__libc_init_array+0x38>)
 8004722:	4c0d      	ldr	r4, [pc, #52]	; (8004758 <__libc_init_array+0x3c>)
 8004724:	1b64      	subs	r4, r4, r5
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	42a6      	cmp	r6, r4
 800472a:	d109      	bne.n	8004740 <__libc_init_array+0x24>
 800472c:	f000 f830 	bl	8004790 <_init>
 8004730:	2600      	movs	r6, #0
 8004732:	4d0a      	ldr	r5, [pc, #40]	; (800475c <__libc_init_array+0x40>)
 8004734:	4c0a      	ldr	r4, [pc, #40]	; (8004760 <__libc_init_array+0x44>)
 8004736:	1b64      	subs	r4, r4, r5
 8004738:	10a4      	asrs	r4, r4, #2
 800473a:	42a6      	cmp	r6, r4
 800473c:	d105      	bne.n	800474a <__libc_init_array+0x2e>
 800473e:	bd70      	pop	{r4, r5, r6, pc}
 8004740:	f855 3b04 	ldr.w	r3, [r5], #4
 8004744:	4798      	blx	r3
 8004746:	3601      	adds	r6, #1
 8004748:	e7ee      	b.n	8004728 <__libc_init_array+0xc>
 800474a:	f855 3b04 	ldr.w	r3, [r5], #4
 800474e:	4798      	blx	r3
 8004750:	3601      	adds	r6, #1
 8004752:	e7f2      	b.n	800473a <__libc_init_array+0x1e>
 8004754:	08004888 	.word	0x08004888
 8004758:	08004888 	.word	0x08004888
 800475c:	08004888 	.word	0x08004888
 8004760:	0800488c 	.word	0x0800488c

08004764 <memcpy>:
 8004764:	440a      	add	r2, r1
 8004766:	4291      	cmp	r1, r2
 8004768:	f100 33ff 	add.w	r3, r0, #4294967295
 800476c:	d100      	bne.n	8004770 <memcpy+0xc>
 800476e:	4770      	bx	lr
 8004770:	b510      	push	{r4, lr}
 8004772:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004776:	4291      	cmp	r1, r2
 8004778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800477c:	d1f9      	bne.n	8004772 <memcpy+0xe>
 800477e:	bd10      	pop	{r4, pc}

08004780 <memset>:
 8004780:	4603      	mov	r3, r0
 8004782:	4402      	add	r2, r0
 8004784:	4293      	cmp	r3, r2
 8004786:	d100      	bne.n	800478a <memset+0xa>
 8004788:	4770      	bx	lr
 800478a:	f803 1b01 	strb.w	r1, [r3], #1
 800478e:	e7f9      	b.n	8004784 <memset+0x4>

08004790 <_init>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	bf00      	nop
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr

0800479c <_fini>:
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479e:	bf00      	nop
 80047a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a2:	bc08      	pop	{r3}
 80047a4:	469e      	mov	lr, r3
 80047a6:	4770      	bx	lr
