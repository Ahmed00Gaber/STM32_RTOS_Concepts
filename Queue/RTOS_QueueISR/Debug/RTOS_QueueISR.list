
RTOS_QueueISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005968  08005968  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005968  08005968  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005968  08005968  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005968  08005968  00015968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800596c  0800596c  0001596c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005970  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019d8  20000074  080059e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a4c  080059e4  00021a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f6a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f67  00000000  00000000  00033007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00035f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001048  00000000  00000000  00037120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ec1  00000000  00000000  00038168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000134e4  00000000  00000000  00052029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e38  00000000  00000000  0006550d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6345  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005078  00000000  00000000  000f6398  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005784 	.word	0x08005784

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005784 	.word	0x08005784

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000154:	4a10      	ldr	r2, [pc, #64]	; (8000198 <MX_FREERTOS_Init+0x48>)
 8000156:	2101      	movs	r1, #1
 8000158:	2001      	movs	r0, #1
 800015a:	f001 fd69 	bl	8001c30 <osSemaphoreNew>
 800015e:	4603      	mov	r3, r0
 8000160:	4a0e      	ldr	r2, [pc, #56]	; (800019c <MX_FREERTOS_Init+0x4c>)
 8000162:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (16, sizeof(uint16_t), &myQueue01_attributes);
 8000164:	4a0e      	ldr	r2, [pc, #56]	; (80001a0 <MX_FREERTOS_Init+0x50>)
 8000166:	2102      	movs	r1, #2
 8000168:	2010      	movs	r0, #16
 800016a:	f001 fdfd 	bl	8001d68 <osMessageQueueNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0c      	ldr	r2, [pc, #48]	; (80001a4 <MX_FREERTOS_Init+0x54>)
 8000172:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_1 */
  Task_1Handle = osThreadNew(Task_one, NULL, &Task_1_attributes);
 8000174:	4a0c      	ldr	r2, [pc, #48]	; (80001a8 <MX_FREERTOS_Init+0x58>)
 8000176:	2100      	movs	r1, #0
 8000178:	480c      	ldr	r0, [pc, #48]	; (80001ac <MX_FREERTOS_Init+0x5c>)
 800017a:	f001 fc81 	bl	8001a80 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0b      	ldr	r2, [pc, #44]	; (80001b0 <MX_FREERTOS_Init+0x60>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of Task_2 */
  Task_2Handle = osThreadNew(Task_Two, NULL, &Task_2_attributes);
 8000184:	4a0b      	ldr	r2, [pc, #44]	; (80001b4 <MX_FREERTOS_Init+0x64>)
 8000186:	2100      	movs	r1, #0
 8000188:	480b      	ldr	r0, [pc, #44]	; (80001b8 <MX_FREERTOS_Init+0x68>)
 800018a:	f001 fc79 	bl	8001a80 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <MX_FREERTOS_Init+0x6c>)
 8000192:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000194:	bf00      	nop
 8000196:	bd80      	pop	{r7, pc}
 8000198:	08005894 	.word	0x08005894
 800019c:	2000009c 	.word	0x2000009c
 80001a0:	0800587c 	.word	0x0800587c
 80001a4:	20000098 	.word	0x20000098
 80001a8:	08005834 	.word	0x08005834
 80001ac:	080001c1 	.word	0x080001c1
 80001b0:	20000090 	.word	0x20000090
 80001b4:	08005858 	.word	0x08005858
 80001b8:	08000209 	.word	0x08000209
 80001bc:	20000094 	.word	0x20000094

080001c0 <Task_one>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task_one */
void Task_one(void *argument)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b084      	sub	sp, #16
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_one */
	BaseType_t ret_val=0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	60fb      	str	r3, [r7, #12]
	uint8_t counter1=0;
 80001cc:	2300      	movs	r3, #0
 80001ce:	72fb      	strb	r3, [r7, #11]
  /* Infinite loop */
  for(;;)
  {
	  ret_val = xQueueReceive( myQueue01Handle,&counter1 , portMAX_DELAY); //wait until data avilable in the queue
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <Task_one+0x3c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	f107 010b 	add.w	r1, r7, #11
 80001d8:	f04f 32ff 	mov.w	r2, #4294967295
 80001dc:	4618      	mov	r0, r3
 80001de:	f002 fa6b 	bl	80026b8 <xQueueReceive>
 80001e2:	60f8      	str	r0, [r7, #12]
	  if(pdTRUE !=ret_val){
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	2b01      	cmp	r3, #1
 80001e8:	d003      	beq.n	80001f2 <Task_one+0x32>
		  printf("task received from ISR failed");
 80001ea:	4805      	ldr	r0, [pc, #20]	; (8000200 <Task_one+0x40>)
 80001ec:	f004 fb36 	bl	800485c <iprintf>
 80001f0:	e7ee      	b.n	80001d0 <Task_one+0x10>
	  }
	  else{
		  printf("task received from ISR successfully");
 80001f2:	4804      	ldr	r0, [pc, #16]	; (8000204 <Task_one+0x44>)
 80001f4:	f004 fb32 	bl	800485c <iprintf>
	  ret_val = xQueueReceive( myQueue01Handle,&counter1 , portMAX_DELAY); //wait until data avilable in the queue
 80001f8:	e7ea      	b.n	80001d0 <Task_one+0x10>
 80001fa:	bf00      	nop
 80001fc:	20000098 	.word	0x20000098
 8000200:	080057c8 	.word	0x080057c8
 8000204:	080057e8 	.word	0x080057e8

08000208 <Task_Two>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_Two */
void Task_Two(void *argument)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_Two */
	uint8_t counter2;
  /* Infinite loop */
  for(;;)
  {
	  counter2++;
 8000210:	7bfb      	ldrb	r3, [r7, #15]
 8000212:	3301      	adds	r3, #1
 8000214:	73fb      	strb	r3, [r7, #15]
    osDelay(100);
 8000216:	2064      	movs	r0, #100	; 0x64
 8000218:	f001 fcdc 	bl	8001bd4 <osDelay>
	  counter2++;
 800021c:	e7f8      	b.n	8000210 <Task_Two+0x8>
	...

08000220 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b088      	sub	sp, #32
 8000224:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000226:	f107 0310 	add.w	r3, r7, #16
 800022a:	2200      	movs	r2, #0
 800022c:	601a      	str	r2, [r3, #0]
 800022e:	605a      	str	r2, [r3, #4]
 8000230:	609a      	str	r2, [r3, #8]
 8000232:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000234:	4b31      	ldr	r3, [pc, #196]	; (80002fc <MX_GPIO_Init+0xdc>)
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	4a30      	ldr	r2, [pc, #192]	; (80002fc <MX_GPIO_Init+0xdc>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6193      	str	r3, [r2, #24]
 8000240:	4b2e      	ldr	r3, [pc, #184]	; (80002fc <MX_GPIO_Init+0xdc>)
 8000242:	699b      	ldr	r3, [r3, #24]
 8000244:	f003 0320 	and.w	r3, r3, #32
 8000248:	60fb      	str	r3, [r7, #12]
 800024a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024c:	4b2b      	ldr	r3, [pc, #172]	; (80002fc <MX_GPIO_Init+0xdc>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a2a      	ldr	r2, [pc, #168]	; (80002fc <MX_GPIO_Init+0xdc>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
 8000258:	4b28      	ldr	r3, [pc, #160]	; (80002fc <MX_GPIO_Init+0xdc>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	f003 0304 	and.w	r3, r3, #4
 8000260:	60bb      	str	r3, [r7, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000264:	4b25      	ldr	r3, [pc, #148]	; (80002fc <MX_GPIO_Init+0xdc>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a24      	ldr	r2, [pc, #144]	; (80002fc <MX_GPIO_Init+0xdc>)
 800026a:	f043 0308 	orr.w	r3, r3, #8
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b22      	ldr	r3, [pc, #136]	; (80002fc <MX_GPIO_Init+0xdc>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0308 	and.w	r3, r3, #8
 8000278:	607b      	str	r3, [r7, #4]
 800027a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	21c0      	movs	r1, #192	; 0xc0
 8000280:	481f      	ldr	r0, [pc, #124]	; (8000300 <MX_GPIO_Init+0xe0>)
 8000282:	f000 fd01 	bl	8000c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800028c:	481d      	ldr	r0, [pc, #116]	; (8000304 <MX_GPIO_Init+0xe4>)
 800028e:	f000 fcfb 	bl	8000c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000292:	2301      	movs	r3, #1
 8000294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000296:	4b1c      	ldr	r3, [pc, #112]	; (8000308 <MX_GPIO_Init+0xe8>)
 8000298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029e:	f107 0310 	add.w	r3, r7, #16
 80002a2:	4619      	mov	r1, r3
 80002a4:	4816      	ldr	r0, [pc, #88]	; (8000300 <MX_GPIO_Init+0xe0>)
 80002a6:	f000 fb73 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002aa:	23c0      	movs	r3, #192	; 0xc0
 80002ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ae:	2301      	movs	r3, #1
 80002b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b6:	2302      	movs	r3, #2
 80002b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ba:	f107 0310 	add.w	r3, r7, #16
 80002be:	4619      	mov	r1, r3
 80002c0:	480f      	ldr	r0, [pc, #60]	; (8000300 <MX_GPIO_Init+0xe0>)
 80002c2:	f000 fb65 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80002c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2302      	movs	r3, #2
 80002d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	4809      	ldr	r0, [pc, #36]	; (8000304 <MX_GPIO_Init+0xe4>)
 80002e0:	f000 fb56 	bl	8000990 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	2105      	movs	r1, #5
 80002e8:	2006      	movs	r0, #6
 80002ea:	f000 fb26 	bl	800093a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002ee:	2006      	movs	r0, #6
 80002f0:	f000 fb3f 	bl	8000972 <HAL_NVIC_EnableIRQ>

}
 80002f4:	bf00      	nop
 80002f6:	3720      	adds	r7, #32
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010800 	.word	0x40010800
 8000304:	40010c00 	.word	0x40010c00
 8000308:	10110000 	.word	0x10110000

0800030c <HAL_GPIO_EXTI_Callback>:

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
extern osMessageQueueId_t myQueue01Handle;
uint8_t counter_from_ISR;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800030c:	b580      	push	{r7, lr}
 800030e:	b084      	sub	sp, #16
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	80fb      	strh	r3, [r7, #6]
	//initialization
	BaseType_t ret_val =0;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]

	if(xQueueIsQueueFullFromISR(myQueue01Handle) == pdFALSE){
 800031a:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <HAL_GPIO_EXTI_Callback+0x4c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4618      	mov	r0, r3
 8000320:	f002 fbdd 	bl	8002ade <xQueueIsQueueFullFromISR>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d10e      	bne.n	8000348 <HAL_GPIO_EXTI_Callback+0x3c>
	//Queue is not empty
		ret_val=xQueueSendToFrontFromISR(myQueue01Handle,&counter_from_ISR,NULL); //we don't use pxHigherPriorityTaskWoken
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <HAL_GPIO_EXTI_Callback+0x4c>)
 800032c:	6818      	ldr	r0, [r3, #0]
 800032e:	2301      	movs	r3, #1
 8000330:	2200      	movs	r2, #0
 8000332:	490a      	ldr	r1, [pc, #40]	; (800035c <HAL_GPIO_EXTI_Callback+0x50>)
 8000334:	f002 f928 	bl	8002588 <xQueueGenericSendFromISR>
 8000338:	60f8      	str	r0, [r7, #12]
		counter_from_ISR++;
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <HAL_GPIO_EXTI_Callback+0x50>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	3301      	adds	r3, #1
 8000340:	b2da      	uxtb	r2, r3
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <HAL_GPIO_EXTI_Callback+0x50>)
 8000344:	701a      	strb	r2, [r3, #0]
	  }
	else{
		printf("queue is full");
	}
}
 8000346:	e002      	b.n	800034e <HAL_GPIO_EXTI_Callback+0x42>
		printf("queue is full");
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <HAL_GPIO_EXTI_Callback+0x54>)
 800034a:	f004 fa87 	bl	800485c <iprintf>
}
 800034e:	bf00      	nop
 8000350:	3710      	adds	r7, #16
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000098 	.word	0x20000098
 800035c:	200000a0 	.word	0x200000a0
 8000360:	0800580c 	.word	0x0800580c

08000364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000368:	f000 fa00 	bl	800076c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800036c:	f000 f809 	bl	8000382 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000370:	f7ff ff56 	bl	8000220 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000374:	f001 fb1e 	bl	80019b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000378:	f7ff feea 	bl	8000150 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800037c:	f001 fb4c 	bl	8001a18 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000380:	e7fe      	b.n	8000380 <main+0x1c>

08000382 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000382:	b580      	push	{r7, lr}
 8000384:	b090      	sub	sp, #64	; 0x40
 8000386:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000388:	f107 0318 	add.w	r3, r7, #24
 800038c:	2228      	movs	r2, #40	; 0x28
 800038e:	2100      	movs	r1, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f004 fa5b 	bl	800484c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003a4:	2302      	movs	r3, #2
 80003a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003a8:	2301      	movs	r3, #1
 80003aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ac:	2310      	movs	r3, #16
 80003ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003b0:	2300      	movs	r3, #0
 80003b2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	4618      	mov	r0, r3
 80003ba:	f000 fc95 	bl	8000ce8 <HAL_RCC_OscConfig>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003c4:	f000 f827 	bl	8000416 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c8:	230f      	movs	r3, #15
 80003ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003cc:	2300      	movs	r3, #0
 80003ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003d0:	2300      	movs	r3, #0
 80003d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 ff03 	bl	80011ec <HAL_RCC_ClockConfig>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003ec:	f000 f813 	bl	8000416 <Error_Handler>
  }
}
 80003f0:	bf00      	nop
 80003f2:	3740      	adds	r7, #64	; 0x40
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}

080003f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000408:	d101      	bne.n	800040e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800040a:	f000 f9c5 	bl	8000798 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800040e:	bf00      	nop
 8000410:	3708      	adds	r7, #8
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800041a:	b672      	cpsid	i
}
 800041c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800041e:	e7fe      	b.n	800041e <Error_Handler+0x8>

08000420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000426:	4b18      	ldr	r3, [pc, #96]	; (8000488 <HAL_MspInit+0x68>)
 8000428:	699b      	ldr	r3, [r3, #24]
 800042a:	4a17      	ldr	r2, [pc, #92]	; (8000488 <HAL_MspInit+0x68>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6193      	str	r3, [r2, #24]
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <HAL_MspInit+0x68>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_MspInit+0x68>)
 8000440:	69db      	ldr	r3, [r3, #28]
 8000442:	4a11      	ldr	r2, [pc, #68]	; (8000488 <HAL_MspInit+0x68>)
 8000444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000448:	61d3      	str	r3, [r2, #28]
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x68>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000456:	2200      	movs	r2, #0
 8000458:	210f      	movs	r1, #15
 800045a:	f06f 0001 	mvn.w	r0, #1
 800045e:	f000 fa6c 	bl	800093a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_MspInit+0x6c>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_MspInit+0x6c>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3710      	adds	r7, #16
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b08e      	sub	sp, #56	; 0x38
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000498:	2300      	movs	r3, #0
 800049a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800049c:	2300      	movs	r3, #0
 800049e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004a0:	2300      	movs	r3, #0
 80004a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80004a6:	4b34      	ldr	r3, [pc, #208]	; (8000578 <HAL_InitTick+0xe8>)
 80004a8:	69db      	ldr	r3, [r3, #28]
 80004aa:	4a33      	ldr	r2, [pc, #204]	; (8000578 <HAL_InitTick+0xe8>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	61d3      	str	r3, [r2, #28]
 80004b2:	4b31      	ldr	r3, [pc, #196]	; (8000578 <HAL_InitTick+0xe8>)
 80004b4:	69db      	ldr	r3, [r3, #28]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004be:	f107 0210 	add.w	r2, r7, #16
 80004c2:	f107 0314 	add.w	r3, r7, #20
 80004c6:	4611      	mov	r1, r2
 80004c8:	4618      	mov	r0, r3
 80004ca:	f000 ffeb 	bl	80014a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004ce:	6a3b      	ldr	r3, [r7, #32]
 80004d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d103      	bne.n	80004e0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004d8:	f000 ffd0 	bl	800147c <HAL_RCC_GetPCLK1Freq>
 80004dc:	6378      	str	r0, [r7, #52]	; 0x34
 80004de:	e004      	b.n	80004ea <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004e0:	f000 ffcc 	bl	800147c <HAL_RCC_GetPCLK1Freq>
 80004e4:	4603      	mov	r3, r0
 80004e6:	005b      	lsls	r3, r3, #1
 80004e8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004ec:	4a23      	ldr	r2, [pc, #140]	; (800057c <HAL_InitTick+0xec>)
 80004ee:	fba2 2303 	umull	r2, r3, r2, r3
 80004f2:	0c9b      	lsrs	r3, r3, #18
 80004f4:	3b01      	subs	r3, #1
 80004f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <HAL_InitTick+0xf0>)
 80004fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000500:	4b1f      	ldr	r3, [pc, #124]	; (8000580 <HAL_InitTick+0xf0>)
 8000502:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000506:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000508:	4a1d      	ldr	r2, [pc, #116]	; (8000580 <HAL_InitTick+0xf0>)
 800050a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800050c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800050e:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <HAL_InitTick+0xf0>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <HAL_InitTick+0xf0>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <HAL_InitTick+0xf0>)
 800051c:	2200      	movs	r2, #0
 800051e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000520:	4817      	ldr	r0, [pc, #92]	; (8000580 <HAL_InitTick+0xf0>)
 8000522:	f001 f80d 	bl	8001540 <HAL_TIM_Base_Init>
 8000526:	4603      	mov	r3, r0
 8000528:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800052c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000530:	2b00      	cmp	r3, #0
 8000532:	d11b      	bne.n	800056c <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000534:	4812      	ldr	r0, [pc, #72]	; (8000580 <HAL_InitTick+0xf0>)
 8000536:	f001 f85b 	bl	80015f0 <HAL_TIM_Base_Start_IT>
 800053a:	4603      	mov	r3, r0
 800053c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000540:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000544:	2b00      	cmp	r3, #0
 8000546:	d111      	bne.n	800056c <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000548:	201c      	movs	r0, #28
 800054a:	f000 fa12 	bl	8000972 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b0f      	cmp	r3, #15
 8000552:	d808      	bhi.n	8000566 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000554:	2200      	movs	r2, #0
 8000556:	6879      	ldr	r1, [r7, #4]
 8000558:	201c      	movs	r0, #28
 800055a:	f000 f9ee 	bl	800093a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800055e:	4a09      	ldr	r2, [pc, #36]	; (8000584 <HAL_InitTick+0xf4>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	e002      	b.n	800056c <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000566:	2301      	movs	r3, #1
 8000568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800056c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000570:	4618      	mov	r0, r3
 8000572:	3738      	adds	r7, #56	; 0x38
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40021000 	.word	0x40021000
 800057c:	431bde83 	.word	0x431bde83
 8000580:	200000a4 	.word	0x200000a4
 8000584:	20000004 	.word	0x20000004

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800058c:	e7fe      	b.n	800058c <NMI_Handler+0x4>

0800058e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800058e:	b480      	push	{r7}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000592:	e7fe      	b.n	8000592 <HardFault_Handler+0x4>

08000594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <MemManage_Handler+0x4>

0800059a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <BusFault_Handler+0x4>

080005a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <UsageFault_Handler+0x4>

080005a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */


  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80005b6:	2001      	movs	r0, #1
 80005b8:	f000 fb7e 	bl	8000cb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  //start implementing our queue

  /* USER CODE END EXTI0_IRQn 1 */
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}

080005c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005c4:	4802      	ldr	r0, [pc, #8]	; (80005d0 <TIM2_IRQHandler+0x10>)
 80005c6:	f001 f85f 	bl	8001688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200000a4 	.word	0x200000a4

080005d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b086      	sub	sp, #24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
 80005e4:	e00a      	b.n	80005fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005e6:	f3af 8000 	nop.w
 80005ea:	4601      	mov	r1, r0
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	1c5a      	adds	r2, r3, #1
 80005f0:	60ba      	str	r2, [r7, #8]
 80005f2:	b2ca      	uxtb	r2, r1
 80005f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf0      	blt.n	80005e6 <_read+0x12>
	}

return len;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	e009      	b.n	8000634 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	60ba      	str	r2, [r7, #8]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	3301      	adds	r3, #1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	697a      	ldr	r2, [r7, #20]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	dbf1      	blt.n	8000620 <_write+0x12>
	}
	return len;
 800063c:	687b      	ldr	r3, [r7, #4]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3718      	adds	r7, #24
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <_close>:

int _close(int file)
{
 8000646:	b480      	push	{r7}
 8000648:	b083      	sub	sp, #12
 800064a:	af00      	add	r7, sp, #0
 800064c:	6078      	str	r0, [r7, #4]
	return -1;
 800064e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000652:	4618      	mov	r0, r3
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800066c:	605a      	str	r2, [r3, #4]
	return 0;
 800066e:	2300      	movs	r3, #0
}
 8000670:	4618      	mov	r0, r3
 8000672:	370c      	adds	r7, #12
 8000674:	46bd      	mov	sp, r7
 8000676:	bc80      	pop	{r7}
 8000678:	4770      	bx	lr

0800067a <_isatty>:

int _isatty(int file)
{
 800067a:	b480      	push	{r7}
 800067c:	b083      	sub	sp, #12
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
	return 1;
 8000682:	2301      	movs	r3, #1
}
 8000684:	4618      	mov	r0, r3
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr

0800068e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800068e:	b480      	push	{r7}
 8000690:	b085      	sub	sp, #20
 8000692:	af00      	add	r7, sp, #0
 8000694:	60f8      	str	r0, [r7, #12]
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
	return 0;
 800069a:	2300      	movs	r3, #0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bc80      	pop	{r7}
 80006a4:	4770      	bx	lr
	...

080006a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <_sbrk+0x5c>)
 80006b2:	4b15      	ldr	r3, [pc, #84]	; (8000708 <_sbrk+0x60>)
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <_sbrk+0x64>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d102      	bne.n	80006ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <_sbrk+0x64>)
 80006c6:	4a12      	ldr	r2, [pc, #72]	; (8000710 <_sbrk+0x68>)
 80006c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006ca:	4b10      	ldr	r3, [pc, #64]	; (800070c <_sbrk+0x64>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	693a      	ldr	r2, [r7, #16]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	d207      	bcs.n	80006e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d8:	f004 f880 	bl	80047dc <__errno>
 80006dc:	4603      	mov	r3, r0
 80006de:	220c      	movs	r2, #12
 80006e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006e2:	f04f 33ff 	mov.w	r3, #4294967295
 80006e6:	e009      	b.n	80006fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e8:	4b08      	ldr	r3, [pc, #32]	; (800070c <_sbrk+0x64>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ee:	4b07      	ldr	r3, [pc, #28]	; (800070c <_sbrk+0x64>)
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4413      	add	r3, r2
 80006f6:	4a05      	ldr	r2, [pc, #20]	; (800070c <_sbrk+0x64>)
 80006f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006fa:	68fb      	ldr	r3, [r7, #12]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3718      	adds	r7, #24
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20002800 	.word	0x20002800
 8000708:	00000400 	.word	0x00000400
 800070c:	200000ec 	.word	0x200000ec
 8000710:	20001a50 	.word	0x20001a50

08000714 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000720:	f7ff fff8 	bl	8000714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480b      	ldr	r0, [pc, #44]	; (8000754 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000726:	490c      	ldr	r1, [pc, #48]	; (8000758 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000728:	4a0c      	ldr	r2, [pc, #48]	; (800075c <LoopFillZerobss+0x16>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a09      	ldr	r2, [pc, #36]	; (8000760 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800073c:	4c09      	ldr	r4, [pc, #36]	; (8000764 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800074a:	f004 f84d 	bl	80047e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074e:	f7ff fe09 	bl	8000364 <main>
  bx lr
 8000752:	4770      	bx	lr
  ldr r0, =_sdata
 8000754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000758:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800075c:	08005970 	.word	0x08005970
  ldr r2, =_sbss
 8000760:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000764:	20001a4c 	.word	0x20001a4c

08000768 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000768:	e7fe      	b.n	8000768 <ADC1_2_IRQHandler>
	...

0800076c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_Init+0x28>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <HAL_Init+0x28>)
 8000776:	f043 0310 	orr.w	r3, r3, #16
 800077a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800077c:	2003      	movs	r0, #3
 800077e:	f000 f8d1 	bl	8000924 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000782:	200f      	movs	r0, #15
 8000784:	f7ff fe84 	bl	8000490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000788:	f7ff fe4a 	bl	8000420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40022000 	.word	0x40022000

08000798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800079c:	4b05      	ldr	r3, [pc, #20]	; (80007b4 <HAL_IncTick+0x1c>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_IncTick+0x20>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4413      	add	r3, r2
 80007a8:	4a03      	ldr	r2, [pc, #12]	; (80007b8 <HAL_IncTick+0x20>)
 80007aa:	6013      	str	r3, [r2, #0]
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	20000008 	.word	0x20000008
 80007b8:	200000f0 	.word	0x200000f0

080007bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return uwTick;
 80007c0:	4b02      	ldr	r3, [pc, #8]	; (80007cc <HAL_GetTick+0x10>)
 80007c2:	681b      	ldr	r3, [r3, #0]
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	200000f0 	.word	0x200000f0

080007d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007ec:	4013      	ands	r3, r2
 80007ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000802:	4a04      	ldr	r2, [pc, #16]	; (8000814 <__NVIC_SetPriorityGrouping+0x44>)
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	60d3      	str	r3, [r2, #12]
}
 8000808:	bf00      	nop
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	e000ed00 	.word	0xe000ed00

08000818 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__NVIC_GetPriorityGrouping+0x18>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	0a1b      	lsrs	r3, r3, #8
 8000822:	f003 0307 	and.w	r3, r3, #7
}
 8000826:	4618      	mov	r0, r3
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	db0b      	blt.n	800085e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	f003 021f 	and.w	r2, r3, #31
 800084c:	4906      	ldr	r1, [pc, #24]	; (8000868 <__NVIC_EnableIRQ+0x34>)
 800084e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	2001      	movs	r0, #1
 8000856:	fa00 f202 	lsl.w	r2, r0, r2
 800085a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	e000e100 	.word	0xe000e100

0800086c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	6039      	str	r1, [r7, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db0a      	blt.n	8000896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	b2da      	uxtb	r2, r3
 8000884:	490c      	ldr	r1, [pc, #48]	; (80008b8 <__NVIC_SetPriority+0x4c>)
 8000886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088a:	0112      	lsls	r2, r2, #4
 800088c:	b2d2      	uxtb	r2, r2
 800088e:	440b      	add	r3, r1
 8000890:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000894:	e00a      	b.n	80008ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	b2da      	uxtb	r2, r3
 800089a:	4908      	ldr	r1, [pc, #32]	; (80008bc <__NVIC_SetPriority+0x50>)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	f003 030f 	and.w	r3, r3, #15
 80008a2:	3b04      	subs	r3, #4
 80008a4:	0112      	lsls	r2, r2, #4
 80008a6:	b2d2      	uxtb	r2, r2
 80008a8:	440b      	add	r3, r1
 80008aa:	761a      	strb	r2, [r3, #24]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bc80      	pop	{r7}
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000e100 	.word	0xe000e100
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b089      	sub	sp, #36	; 0x24
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60f8      	str	r0, [r7, #12]
 80008c8:	60b9      	str	r1, [r7, #8]
 80008ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008d4:	69fb      	ldr	r3, [r7, #28]
 80008d6:	f1c3 0307 	rsb	r3, r3, #7
 80008da:	2b04      	cmp	r3, #4
 80008dc:	bf28      	it	cs
 80008de:	2304      	movcs	r3, #4
 80008e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	3304      	adds	r3, #4
 80008e6:	2b06      	cmp	r3, #6
 80008e8:	d902      	bls.n	80008f0 <NVIC_EncodePriority+0x30>
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	3b03      	subs	r3, #3
 80008ee:	e000      	b.n	80008f2 <NVIC_EncodePriority+0x32>
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f4:	f04f 32ff 	mov.w	r2, #4294967295
 80008f8:	69bb      	ldr	r3, [r7, #24]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43da      	mvns	r2, r3
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	401a      	ands	r2, r3
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000908:	f04f 31ff 	mov.w	r1, #4294967295
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	fa01 f303 	lsl.w	r3, r1, r3
 8000912:	43d9      	mvns	r1, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	4313      	orrs	r3, r2
         );
}
 800091a:	4618      	mov	r0, r3
 800091c:	3724      	adds	r7, #36	; 0x24
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr

08000924 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ff4f 	bl	80007d0 <__NVIC_SetPriorityGrouping>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800093a:	b580      	push	{r7, lr}
 800093c:	b086      	sub	sp, #24
 800093e:	af00      	add	r7, sp, #0
 8000940:	4603      	mov	r3, r0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800094c:	f7ff ff64 	bl	8000818 <__NVIC_GetPriorityGrouping>
 8000950:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	68b9      	ldr	r1, [r7, #8]
 8000956:	6978      	ldr	r0, [r7, #20]
 8000958:	f7ff ffb2 	bl	80008c0 <NVIC_EncodePriority>
 800095c:	4602      	mov	r2, r0
 800095e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff ff81 	bl	800086c <__NVIC_SetPriority>
}
 800096a:	bf00      	nop
 800096c:	3718      	adds	r7, #24
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}

08000972 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b082      	sub	sp, #8
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800097c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff57 	bl	8000834 <__NVIC_EnableIRQ>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000990:	b480      	push	{r7}
 8000992:	b08b      	sub	sp, #44	; 0x2c
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009a2:	e161      	b.n	8000c68 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009a4:	2201      	movs	r2, #1
 80009a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009b8:	69ba      	ldr	r2, [r7, #24]
 80009ba:	69fb      	ldr	r3, [r7, #28]
 80009bc:	429a      	cmp	r2, r3
 80009be:	f040 8150 	bne.w	8000c62 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	4a97      	ldr	r2, [pc, #604]	; (8000c24 <HAL_GPIO_Init+0x294>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d05e      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009cc:	4a95      	ldr	r2, [pc, #596]	; (8000c24 <HAL_GPIO_Init+0x294>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d875      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 80009d2:	4a95      	ldr	r2, [pc, #596]	; (8000c28 <HAL_GPIO_Init+0x298>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d058      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009d8:	4a93      	ldr	r2, [pc, #588]	; (8000c28 <HAL_GPIO_Init+0x298>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d86f      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 80009de:	4a93      	ldr	r2, [pc, #588]	; (8000c2c <HAL_GPIO_Init+0x29c>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d052      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009e4:	4a91      	ldr	r2, [pc, #580]	; (8000c2c <HAL_GPIO_Init+0x29c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d869      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 80009ea:	4a91      	ldr	r2, [pc, #580]	; (8000c30 <HAL_GPIO_Init+0x2a0>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d04c      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009f0:	4a8f      	ldr	r2, [pc, #572]	; (8000c30 <HAL_GPIO_Init+0x2a0>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d863      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 80009f6:	4a8f      	ldr	r2, [pc, #572]	; (8000c34 <HAL_GPIO_Init+0x2a4>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d046      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
 80009fc:	4a8d      	ldr	r2, [pc, #564]	; (8000c34 <HAL_GPIO_Init+0x2a4>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d85d      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 8000a02:	2b12      	cmp	r3, #18
 8000a04:	d82a      	bhi.n	8000a5c <HAL_GPIO_Init+0xcc>
 8000a06:	2b12      	cmp	r3, #18
 8000a08:	d859      	bhi.n	8000abe <HAL_GPIO_Init+0x12e>
 8000a0a:	a201      	add	r2, pc, #4	; (adr r2, 8000a10 <HAL_GPIO_Init+0x80>)
 8000a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a10:	08000a8b 	.word	0x08000a8b
 8000a14:	08000a65 	.word	0x08000a65
 8000a18:	08000a77 	.word	0x08000a77
 8000a1c:	08000ab9 	.word	0x08000ab9
 8000a20:	08000abf 	.word	0x08000abf
 8000a24:	08000abf 	.word	0x08000abf
 8000a28:	08000abf 	.word	0x08000abf
 8000a2c:	08000abf 	.word	0x08000abf
 8000a30:	08000abf 	.word	0x08000abf
 8000a34:	08000abf 	.word	0x08000abf
 8000a38:	08000abf 	.word	0x08000abf
 8000a3c:	08000abf 	.word	0x08000abf
 8000a40:	08000abf 	.word	0x08000abf
 8000a44:	08000abf 	.word	0x08000abf
 8000a48:	08000abf 	.word	0x08000abf
 8000a4c:	08000abf 	.word	0x08000abf
 8000a50:	08000abf 	.word	0x08000abf
 8000a54:	08000a6d 	.word	0x08000a6d
 8000a58:	08000a81 	.word	0x08000a81
 8000a5c:	4a76      	ldr	r2, [pc, #472]	; (8000c38 <HAL_GPIO_Init+0x2a8>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d013      	beq.n	8000a8a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a62:	e02c      	b.n	8000abe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	623b      	str	r3, [r7, #32]
          break;
 8000a6a:	e029      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	3304      	adds	r3, #4
 8000a72:	623b      	str	r3, [r7, #32]
          break;
 8000a74:	e024      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	3308      	adds	r3, #8
 8000a7c:	623b      	str	r3, [r7, #32]
          break;
 8000a7e:	e01f      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	330c      	adds	r3, #12
 8000a86:	623b      	str	r3, [r7, #32]
          break;
 8000a88:	e01a      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a92:	2304      	movs	r3, #4
 8000a94:	623b      	str	r3, [r7, #32]
          break;
 8000a96:	e013      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d105      	bne.n	8000aac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	69fa      	ldr	r2, [r7, #28]
 8000aa8:	611a      	str	r2, [r3, #16]
          break;
 8000aaa:	e009      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000aac:	2308      	movs	r3, #8
 8000aae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	69fa      	ldr	r2, [r7, #28]
 8000ab4:	615a      	str	r2, [r3, #20]
          break;
 8000ab6:	e003      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	623b      	str	r3, [r7, #32]
          break;
 8000abc:	e000      	b.n	8000ac0 <HAL_GPIO_Init+0x130>
          break;
 8000abe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2bff      	cmp	r3, #255	; 0xff
 8000ac4:	d801      	bhi.n	8000aca <HAL_GPIO_Init+0x13a>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	e001      	b.n	8000ace <HAL_GPIO_Init+0x13e>
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3304      	adds	r3, #4
 8000ace:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	2bff      	cmp	r3, #255	; 0xff
 8000ad4:	d802      	bhi.n	8000adc <HAL_GPIO_Init+0x14c>
 8000ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ad8:	009b      	lsls	r3, r3, #2
 8000ada:	e002      	b.n	8000ae2 <HAL_GPIO_Init+0x152>
 8000adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ade:	3b08      	subs	r3, #8
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	210f      	movs	r1, #15
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	43db      	mvns	r3, r3
 8000af2:	401a      	ands	r2, r3
 8000af4:	6a39      	ldr	r1, [r7, #32]
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	431a      	orrs	r2, r3
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 80a9 	beq.w	8000c62 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b10:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <HAL_GPIO_Init+0x2ac>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a49      	ldr	r2, [pc, #292]	; (8000c3c <HAL_GPIO_Init+0x2ac>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b47      	ldr	r3, [pc, #284]	; (8000c3c <HAL_GPIO_Init+0x2ac>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b28:	4a45      	ldr	r2, [pc, #276]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	089b      	lsrs	r3, r3, #2
 8000b2e:	3302      	adds	r3, #2
 8000b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b34:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	f003 0303 	and.w	r3, r3, #3
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a3d      	ldr	r2, [pc, #244]	; (8000c44 <HAL_GPIO_Init+0x2b4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d00d      	beq.n	8000b70 <HAL_GPIO_Init+0x1e0>
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a3c      	ldr	r2, [pc, #240]	; (8000c48 <HAL_GPIO_Init+0x2b8>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0x1dc>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a3b      	ldr	r2, [pc, #236]	; (8000c4c <HAL_GPIO_Init+0x2bc>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d101      	bne.n	8000b68 <HAL_GPIO_Init+0x1d8>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e004      	b.n	8000b72 <HAL_GPIO_Init+0x1e2>
 8000b68:	2303      	movs	r3, #3
 8000b6a:	e002      	b.n	8000b72 <HAL_GPIO_Init+0x1e2>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e000      	b.n	8000b72 <HAL_GPIO_Init+0x1e2>
 8000b70:	2300      	movs	r3, #0
 8000b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b74:	f002 0203 	and.w	r2, r2, #3
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	4093      	lsls	r3, r2
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b82:	492f      	ldr	r1, [pc, #188]	; (8000c40 <HAL_GPIO_Init+0x2b0>)
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3302      	adds	r3, #2
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b9c:	4b2c      	ldr	r3, [pc, #176]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	492b      	ldr	r1, [pc, #172]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	608b      	str	r3, [r1, #8]
 8000ba8:	e006      	b.n	8000bb8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000baa:	4b29      	ldr	r3, [pc, #164]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	4927      	ldr	r1, [pc, #156]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000bc6:	68da      	ldr	r2, [r3, #12]
 8000bc8:	4921      	ldr	r1, [pc, #132]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	60cb      	str	r3, [r1, #12]
 8000bd0:	e006      	b.n	8000be0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000bd4:	68da      	ldr	r2, [r3, #12]
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	491d      	ldr	r1, [pc, #116]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d006      	beq.n	8000bfa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000bec:	4b18      	ldr	r3, [pc, #96]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	4917      	ldr	r1, [pc, #92]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	604b      	str	r3, [r1, #4]
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000bfc:	685a      	ldr	r2, [r3, #4]
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	43db      	mvns	r3, r3
 8000c02:	4913      	ldr	r1, [pc, #76]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000c04:	4013      	ands	r3, r2
 8000c06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d01f      	beq.n	8000c54 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	490d      	ldr	r1, [pc, #52]	; (8000c50 <HAL_GPIO_Init+0x2c0>)
 8000c1a:	69bb      	ldr	r3, [r7, #24]
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	600b      	str	r3, [r1, #0]
 8000c20:	e01f      	b.n	8000c62 <HAL_GPIO_Init+0x2d2>
 8000c22:	bf00      	nop
 8000c24:	10320000 	.word	0x10320000
 8000c28:	10310000 	.word	0x10310000
 8000c2c:	10220000 	.word	0x10220000
 8000c30:	10210000 	.word	0x10210000
 8000c34:	10120000 	.word	0x10120000
 8000c38:	10110000 	.word	0x10110000
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	40010000 	.word	0x40010000
 8000c44:	40010800 	.word	0x40010800
 8000c48:	40010c00 	.word	0x40010c00
 8000c4c:	40011000 	.word	0x40011000
 8000c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <HAL_GPIO_Init+0x2f4>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	4909      	ldr	r1, [pc, #36]	; (8000c84 <HAL_GPIO_Init+0x2f4>)
 8000c5e:	4013      	ands	r3, r2
 8000c60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c64:	3301      	adds	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f47f ae96 	bne.w	80009a4 <HAL_GPIO_Init+0x14>
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	372c      	adds	r7, #44	; 0x2c
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	40010400 	.word	0x40010400

08000c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	460b      	mov	r3, r1
 8000c92:	807b      	strh	r3, [r7, #2]
 8000c94:	4613      	mov	r3, r2
 8000c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c98:	787b      	ldrb	r3, [r7, #1]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d003      	beq.n	8000ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c9e:	887a      	ldrh	r2, [r7, #2]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ca4:	e003      	b.n	8000cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ca6:	887b      	ldrh	r3, [r7, #2]
 8000ca8:	041a      	lsls	r2, r3, #16
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	611a      	str	r2, [r3, #16]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cc4:	695a      	ldr	r2, [r3, #20]
 8000cc6:	88fb      	ldrh	r3, [r7, #6]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d006      	beq.n	8000cdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff fb18 	bl	800030c <HAL_GPIO_EXTI_Callback>
  }
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40010400 	.word	0x40010400

08000ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d101      	bne.n	8000cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e272      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f000 8087 	beq.w	8000e16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d08:	4b92      	ldr	r3, [pc, #584]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 030c 	and.w	r3, r3, #12
 8000d10:	2b04      	cmp	r3, #4
 8000d12:	d00c      	beq.n	8000d2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d14:	4b8f      	ldr	r3, [pc, #572]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b08      	cmp	r3, #8
 8000d1e:	d112      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
 8000d20:	4b8c      	ldr	r3, [pc, #560]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d2c:	d10b      	bne.n	8000d46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2e:	4b89      	ldr	r3, [pc, #548]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d06c      	beq.n	8000e14 <HAL_RCC_OscConfig+0x12c>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d168      	bne.n	8000e14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e24c      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d4e:	d106      	bne.n	8000d5e <HAL_RCC_OscConfig+0x76>
 8000d50:	4b80      	ldr	r3, [pc, #512]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a7f      	ldr	r2, [pc, #508]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5a:	6013      	str	r3, [r2, #0]
 8000d5c:	e02e      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d10c      	bne.n	8000d80 <HAL_RCC_OscConfig+0x98>
 8000d66:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a7a      	ldr	r2, [pc, #488]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a77      	ldr	r2, [pc, #476]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	e01d      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d88:	d10c      	bne.n	8000da4 <HAL_RCC_OscConfig+0xbc>
 8000d8a:	4b72      	ldr	r3, [pc, #456]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a71      	ldr	r2, [pc, #452]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6013      	str	r3, [r2, #0]
 8000d96:	4b6f      	ldr	r3, [pc, #444]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a6e      	ldr	r2, [pc, #440]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000da0:	6013      	str	r3, [r2, #0]
 8000da2:	e00b      	b.n	8000dbc <HAL_RCC_OscConfig+0xd4>
 8000da4:	4b6b      	ldr	r3, [pc, #428]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a6a      	ldr	r2, [pc, #424]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a67      	ldr	r2, [pc, #412]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d013      	beq.n	8000dec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc4:	f7ff fcfa 	bl	80007bc <HAL_GetTick>
 8000dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dca:	e008      	b.n	8000dde <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dcc:	f7ff fcf6 	bl	80007bc <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	2b64      	cmp	r3, #100	; 0x64
 8000dd8:	d901      	bls.n	8000dde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e200      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dde:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f0      	beq.n	8000dcc <HAL_RCC_OscConfig+0xe4>
 8000dea:	e014      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dec:	f7ff fce6 	bl	80007bc <HAL_GetTick>
 8000df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000df2:	e008      	b.n	8000e06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df4:	f7ff fce2 	bl	80007bc <HAL_GetTick>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	2b64      	cmp	r3, #100	; 0x64
 8000e00:	d901      	bls.n	8000e06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e02:	2303      	movs	r3, #3
 8000e04:	e1ec      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e06:	4b53      	ldr	r3, [pc, #332]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f0      	bne.n	8000df4 <HAL_RCC_OscConfig+0x10c>
 8000e12:	e000      	b.n	8000e16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d063      	beq.n	8000eea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e22:	4b4c      	ldr	r3, [pc, #304]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f003 030c 	and.w	r3, r3, #12
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00b      	beq.n	8000e46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e2e:	4b49      	ldr	r3, [pc, #292]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 030c 	and.w	r3, r3, #12
 8000e36:	2b08      	cmp	r3, #8
 8000e38:	d11c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
 8000e3a:	4b46      	ldr	r3, [pc, #280]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d116      	bne.n	8000e74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e46:	4b43      	ldr	r3, [pc, #268]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d005      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d001      	beq.n	8000e5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e1c0      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5e:	4b3d      	ldr	r3, [pc, #244]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	00db      	lsls	r3, r3, #3
 8000e6c:	4939      	ldr	r1, [pc, #228]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e72:	e03a      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	691b      	ldr	r3, [r3, #16]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d020      	beq.n	8000ebe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e7c:	4b36      	ldr	r3, [pc, #216]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e82:	f7ff fc9b 	bl	80007bc <HAL_GetTick>
 8000e86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e88:	e008      	b.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e8a:	f7ff fc97 	bl	80007bc <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d901      	bls.n	8000e9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	e1a1      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f0      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	4927      	ldr	r1, [pc, #156]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	600b      	str	r3, [r1, #0]
 8000ebc:	e015      	b.n	8000eea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ebe:	4b26      	ldr	r3, [pc, #152]	; (8000f58 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fc7a 	bl	80007bc <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fc76 	bl	80007bc <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e180      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 0302 	and.w	r3, r3, #2
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f003 0308 	and.w	r3, r3, #8
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d03a      	beq.n	8000f6c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d019      	beq.n	8000f32 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f04:	f7ff fc5a 	bl	80007bc <HAL_GetTick>
 8000f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f0c:	f7ff fc56 	bl	80007bc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e160      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_RCC_OscConfig+0x26c>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 faea 	bl	8001504 <RCC_Delay>
 8000f30:	e01c      	b.n	8000f6c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <HAL_RCC_OscConfig+0x274>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f38:	f7ff fc40 	bl	80007bc <HAL_GetTick>
 8000f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3e:	e00f      	b.n	8000f60 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f40:	f7ff fc3c 	bl	80007bc <HAL_GetTick>
 8000f44:	4602      	mov	r2, r0
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d908      	bls.n	8000f60 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	e146      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	42420000 	.word	0x42420000
 8000f5c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f60:	4b92      	ldr	r3, [pc, #584]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d1e9      	bne.n	8000f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80a6 	beq.w	80010c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7e:	4b8b      	ldr	r3, [pc, #556]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d10d      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b88      	ldr	r3, [pc, #544]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	4a87      	ldr	r2, [pc, #540]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	61d3      	str	r3, [r2, #28]
 8000f96:	4b85      	ldr	r3, [pc, #532]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa6:	4b82      	ldr	r3, [pc, #520]	; (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d118      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fb2:	4b7f      	ldr	r3, [pc, #508]	; (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a7e      	ldr	r2, [pc, #504]	; (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fbfd 	bl	80007bc <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff fbf9 	bl	80007bc <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b64      	cmp	r3, #100	; 0x64
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e103      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd8:	4b75      	ldr	r3, [pc, #468]	; (80011b0 <HAL_RCC_OscConfig+0x4c8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d106      	bne.n	8000ffa <HAL_RCC_OscConfig+0x312>
 8000fec:	4b6f      	ldr	r3, [pc, #444]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	4a6e      	ldr	r2, [pc, #440]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8000ff2:	f043 0301 	orr.w	r3, r3, #1
 8000ff6:	6213      	str	r3, [r2, #32]
 8000ff8:	e02d      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d10c      	bne.n	800101c <HAL_RCC_OscConfig+0x334>
 8001002:	4b6a      	ldr	r3, [pc, #424]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	4a69      	ldr	r2, [pc, #420]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001008:	f023 0301 	bic.w	r3, r3, #1
 800100c:	6213      	str	r3, [r2, #32]
 800100e:	4b67      	ldr	r3, [pc, #412]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001010:	6a1b      	ldr	r3, [r3, #32]
 8001012:	4a66      	ldr	r2, [pc, #408]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001014:	f023 0304 	bic.w	r3, r3, #4
 8001018:	6213      	str	r3, [r2, #32]
 800101a:	e01c      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	2b05      	cmp	r3, #5
 8001022:	d10c      	bne.n	800103e <HAL_RCC_OscConfig+0x356>
 8001024:	4b61      	ldr	r3, [pc, #388]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	4a60      	ldr	r2, [pc, #384]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	6213      	str	r3, [r2, #32]
 8001030:	4b5e      	ldr	r3, [pc, #376]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	4a5d      	ldr	r2, [pc, #372]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001036:	f043 0301 	orr.w	r3, r3, #1
 800103a:	6213      	str	r3, [r2, #32]
 800103c:	e00b      	b.n	8001056 <HAL_RCC_OscConfig+0x36e>
 800103e:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001040:	6a1b      	ldr	r3, [r3, #32]
 8001042:	4a5a      	ldr	r2, [pc, #360]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f023 0301 	bic.w	r3, r3, #1
 8001048:	6213      	str	r3, [r2, #32]
 800104a:	4b58      	ldr	r3, [pc, #352]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800104c:	6a1b      	ldr	r3, [r3, #32]
 800104e:	4a57      	ldr	r2, [pc, #348]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001050:	f023 0304 	bic.w	r3, r3, #4
 8001054:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d015      	beq.n	800108a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105e:	f7ff fbad 	bl	80007bc <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	e00a      	b.n	800107c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001066:	f7ff fba9 	bl	80007bc <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	f241 3288 	movw	r2, #5000	; 0x1388
 8001074:	4293      	cmp	r3, r2
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e0b1      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800107c:	4b4b      	ldr	r3, [pc, #300]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800107e:	6a1b      	ldr	r3, [r3, #32]
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d0ee      	beq.n	8001066 <HAL_RCC_OscConfig+0x37e>
 8001088:	e014      	b.n	80010b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108a:	f7ff fb97 	bl	80007bc <HAL_GetTick>
 800108e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001090:	e00a      	b.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001092:	f7ff fb93 	bl	80007bc <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e09b      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a8:	4b40      	ldr	r3, [pc, #256]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	6a1b      	ldr	r3, [r3, #32]
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1ee      	bne.n	8001092 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d105      	bne.n	80010c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ba:	4b3c      	ldr	r3, [pc, #240]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	69db      	ldr	r3, [r3, #28]
 80010be:	4a3b      	ldr	r2, [pc, #236]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8087 	beq.w	80011de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d0:	4b36      	ldr	r3, [pc, #216]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 030c 	and.w	r3, r3, #12
 80010d8:	2b08      	cmp	r3, #8
 80010da:	d061      	beq.n	80011a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d146      	bne.n	8001172 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <HAL_RCC_OscConfig+0x4cc>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ea:	f7ff fb67 	bl	80007bc <HAL_GetTick>
 80010ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f0:	e008      	b.n	8001104 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010f2:	f7ff fb63 	bl	80007bc <HAL_GetTick>
 80010f6:	4602      	mov	r2, r0
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e06d      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001104:	4b29      	ldr	r3, [pc, #164]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f0      	bne.n	80010f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001118:	d108      	bne.n	800112c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	4921      	ldr	r1, [pc, #132]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a19      	ldr	r1, [r3, #32]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	430b      	orrs	r3, r1
 800113e:	491b      	ldr	r1, [pc, #108]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001140:	4313      	orrs	r3, r2
 8001142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <HAL_RCC_OscConfig+0x4cc>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114a:	f7ff fb37 	bl	80007bc <HAL_GetTick>
 800114e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001152:	f7ff fb33 	bl	80007bc <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e03d      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d0f0      	beq.n	8001152 <HAL_RCC_OscConfig+0x46a>
 8001170:	e035      	b.n	80011de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_RCC_OscConfig+0x4cc>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fb20 	bl	80007bc <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001180:	f7ff fb1c 	bl	80007bc <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e026      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_RCC_OscConfig+0x4c4>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d1f0      	bne.n	8001180 <HAL_RCC_OscConfig+0x498>
 800119e:	e01e      	b.n	80011de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69db      	ldr	r3, [r3, #28]
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d107      	bne.n	80011b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e019      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40007000 	.word	0x40007000
 80011b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_RCC_OscConfig+0x500>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d001      	beq.n	80011de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3718      	adds	r7, #24
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d101      	bne.n	8001200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e0d0      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001200:	4b6a      	ldr	r3, [pc, #424]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0307 	and.w	r3, r3, #7
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	429a      	cmp	r2, r3
 800120c:	d910      	bls.n	8001230 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120e:	4b67      	ldr	r3, [pc, #412]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f023 0207 	bic.w	r2, r3, #7
 8001216:	4965      	ldr	r1, [pc, #404]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	4313      	orrs	r3, r2
 800121c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121e:	4b63      	ldr	r3, [pc, #396]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	429a      	cmp	r2, r3
 800122a:	d001      	beq.n	8001230 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e0b8      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d020      	beq.n	800127e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001248:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a58      	ldr	r2, [pc, #352]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001252:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	4a52      	ldr	r2, [pc, #328]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001266:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800126a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800126c:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	494d      	ldr	r1, [pc, #308]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	4313      	orrs	r3, r2
 800127c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	d040      	beq.n	800130c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e07f      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b02      	cmp	r3, #2
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012aa:	4b41      	ldr	r3, [pc, #260]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e073      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ba:	4b3d      	ldr	r3, [pc, #244]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e06b      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f023 0203 	bic.w	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4936      	ldr	r1, [pc, #216]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012dc:	f7ff fa6e 	bl	80007bc <HAL_GetTick>
 80012e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	e00a      	b.n	80012fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e4:	f7ff fa6a 	bl	80007bc <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e053      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 020c 	and.w	r2, r3, #12
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	429a      	cmp	r2, r3
 800130a:	d1eb      	bne.n	80012e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0307 	and.w	r3, r3, #7
 8001314:	683a      	ldr	r2, [r7, #0]
 8001316:	429a      	cmp	r2, r3
 8001318:	d210      	bcs.n	800133c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800131a:	4b24      	ldr	r3, [pc, #144]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 0207 	bic.w	r2, r3, #7
 8001322:	4922      	ldr	r1, [pc, #136]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	4313      	orrs	r3, r2
 8001328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	429a      	cmp	r2, r3
 8001336:	d001      	beq.n	800133c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e032      	b.n	80013a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	4916      	ldr	r1, [pc, #88]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d009      	beq.n	800137a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	490e      	ldr	r1, [pc, #56]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001376:	4313      	orrs	r3, r2
 8001378:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800137a:	f000 f821 	bl	80013c0 <HAL_RCC_GetSysClockFreq>
 800137e:	4602      	mov	r2, r0
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	091b      	lsrs	r3, r3, #4
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	490a      	ldr	r1, [pc, #40]	; (80013b4 <HAL_RCC_ClockConfig+0x1c8>)
 800138c:	5ccb      	ldrb	r3, [r1, r3]
 800138e:	fa22 f303 	lsr.w	r3, r2, r3
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_ClockConfig+0x1d0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f878 	bl	8000490 <HAL_InitTick>

  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40022000 	.word	0x40022000
 80013b0:	40021000 	.word	0x40021000
 80013b4:	080058a4 	.word	0x080058a4
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000004 	.word	0x20000004

080013c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	2300      	movs	r3, #0
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	2300      	movs	r3, #0
 80013d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <HAL_RCC_GetSysClockFreq+0x94>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b04      	cmp	r3, #4
 80013e8:	d002      	beq.n	80013f0 <HAL_RCC_GetSysClockFreq+0x30>
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d003      	beq.n	80013f6 <HAL_RCC_GetSysClockFreq+0x36>
 80013ee:	e027      	b.n	8001440 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013f0:	4b19      	ldr	r3, [pc, #100]	; (8001458 <HAL_RCC_GetSysClockFreq+0x98>)
 80013f2:	613b      	str	r3, [r7, #16]
      break;
 80013f4:	e027      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	0c9b      	lsrs	r3, r3, #18
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001400:	5cd3      	ldrb	r3, [r2, r3]
 8001402:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d010      	beq.n	8001430 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <HAL_RCC_GetSysClockFreq+0x94>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	0c5b      	lsrs	r3, r3, #17
 8001414:	f003 0301 	and.w	r3, r3, #1
 8001418:	4a11      	ldr	r2, [pc, #68]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800141a:	5cd3      	ldrb	r3, [r2, r3]
 800141c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a0d      	ldr	r2, [pc, #52]	; (8001458 <HAL_RCC_GetSysClockFreq+0x98>)
 8001422:	fb03 f202 	mul.w	r2, r3, r2
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	fbb2 f3f3 	udiv	r3, r2, r3
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e004      	b.n	800143a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001434:	fb02 f303 	mul.w	r3, r2, r3
 8001438:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	613b      	str	r3, [r7, #16]
      break;
 800143e:	e002      	b.n	8001446 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_RCC_GetSysClockFreq+0x98>)
 8001442:	613b      	str	r3, [r7, #16]
      break;
 8001444:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001446:	693b      	ldr	r3, [r7, #16]
}
 8001448:	4618      	mov	r0, r3
 800144a:	371c      	adds	r7, #28
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40021000 	.word	0x40021000
 8001458:	007a1200 	.word	0x007a1200
 800145c:	080058bc 	.word	0x080058bc
 8001460:	080058cc 	.word	0x080058cc
 8001464:	003d0900 	.word	0x003d0900

08001468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_RCC_GetHCLKFreq+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000000 	.word	0x20000000

0800147c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001480:	f7ff fff2 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 8001484:	4602      	mov	r2, r0
 8001486:	4b05      	ldr	r3, [pc, #20]	; (800149c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	0a1b      	lsrs	r3, r3, #8
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	4903      	ldr	r1, [pc, #12]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001492:	5ccb      	ldrb	r3, [r1, r3]
 8001494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001498:	4618      	mov	r0, r3
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40021000 	.word	0x40021000
 80014a0:	080058b4 	.word	0x080058b4

080014a4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	220f      	movs	r2, #15
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0203 	and.w	r2, r3, #3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_GetClockConfig+0x58>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	08db      	lsrs	r3, r3, #3
 80014de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <HAL_RCC_GetClockConfig+0x5c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0207 	and.w	r2, r3, #7
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	40021000 	.word	0x40021000
 8001500:	40022000 	.word	0x40022000

08001504 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800150c:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <RCC_Delay+0x34>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <RCC_Delay+0x38>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0a5b      	lsrs	r3, r3, #9
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	fb02 f303 	mul.w	r3, r2, r3
 800151e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001520:	bf00      	nop
  }
  while (Delay --);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	60fa      	str	r2, [r7, #12]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f9      	bne.n	8001520 <RCC_Delay+0x1c>
}
 800152c:	bf00      	nop
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000000 	.word	0x20000000
 800153c:	10624dd3 	.word	0x10624dd3

08001540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e041      	b.n	80015d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d106      	bne.n	800156c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f839 	bl	80015de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3304      	adds	r3, #4
 800157c:	4619      	mov	r1, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f000 f9ae 	bl	80018e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2201      	movs	r2, #1
 80015a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2201      	movs	r2, #1
 80015b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2201      	movs	r2, #1
 80015b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d001      	beq.n	8001608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e035      	b.n	8001674 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a16      	ldr	r2, [pc, #88]	; (8001680 <HAL_TIM_Base_Start_IT+0x90>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d009      	beq.n	800163e <HAL_TIM_Base_Start_IT+0x4e>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001632:	d004      	beq.n	800163e <HAL_TIM_Base_Start_IT+0x4e>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a12      	ldr	r2, [pc, #72]	; (8001684 <HAL_TIM_Base_Start_IT+0x94>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d111      	bne.n	8001662 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2b06      	cmp	r3, #6
 800164e:	d010      	beq.n	8001672 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001660:	e007      	b.n	8001672 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0201 	orr.w	r2, r2, #1
 8001670:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40012c00 	.word	0x40012c00
 8001684:	40000400 	.word	0x40000400

08001688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b02      	cmp	r3, #2
 800169c:	d122      	bne.n	80016e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d11b      	bne.n	80016e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f06f 0202 	mvn.w	r2, #2
 80016b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f8ed 	bl	80018aa <HAL_TIM_IC_CaptureCallback>
 80016d0:	e005      	b.n	80016de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 f8e0 	bl	8001898 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f000 f8ef 	bl	80018bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d122      	bne.n	8001738 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b04      	cmp	r3, #4
 80016fe:	d11b      	bne.n	8001738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f06f 0204 	mvn.w	r2, #4
 8001708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2202      	movs	r2, #2
 800170e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800171a:	2b00      	cmp	r3, #0
 800171c:	d003      	beq.n	8001726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f8c3 	bl	80018aa <HAL_TIM_IC_CaptureCallback>
 8001724:	e005      	b.n	8001732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f8b6 	bl	8001898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f8c5 	bl	80018bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2200      	movs	r2, #0
 8001736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	691b      	ldr	r3, [r3, #16]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b08      	cmp	r3, #8
 8001744:	d122      	bne.n	800178c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b08      	cmp	r3, #8
 8001752:	d11b      	bne.n	800178c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f06f 0208 	mvn.w	r2, #8
 800175c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2204      	movs	r2, #4
 8001762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 f899 	bl	80018aa <HAL_TIM_IC_CaptureCallback>
 8001778:	e005      	b.n	8001786 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f88c 	bl	8001898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f89b 	bl	80018bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b10      	cmp	r3, #16
 8001798:	d122      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0310 	and.w	r3, r3, #16
 80017a4:	2b10      	cmp	r3, #16
 80017a6:	d11b      	bne.n	80017e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f06f 0210 	mvn.w	r2, #16
 80017b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2208      	movs	r2, #8
 80017b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f000 f86f 	bl	80018aa <HAL_TIM_IC_CaptureCallback>
 80017cc:	e005      	b.n	80017da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f000 f862 	bl	8001898 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f871 	bl	80018bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	691b      	ldr	r3, [r3, #16]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d10e      	bne.n	800180c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d107      	bne.n	800180c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f06f 0201 	mvn.w	r2, #1
 8001804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7fe fdf6 	bl	80003f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001816:	2b80      	cmp	r3, #128	; 0x80
 8001818:	d10e      	bne.n	8001838 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001824:	2b80      	cmp	r3, #128	; 0x80
 8001826:	d107      	bne.n	8001838 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001830:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 f8b5 	bl	80019a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001842:	2b40      	cmp	r3, #64	; 0x40
 8001844:	d10e      	bne.n	8001864 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001850:	2b40      	cmp	r3, #64	; 0x40
 8001852:	d107      	bne.n	8001864 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800185c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f835 	bl	80018ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b20      	cmp	r3, #32
 8001870:	d10e      	bne.n	8001890 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0320 	and.w	r3, r3, #32
 800187c:	2b20      	cmp	r3, #32
 800187e:	d107      	bne.n	8001890 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f06f 0220 	mvn.w	r2, #32
 8001888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f880 	bl	8001990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001890:	bf00      	nop
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	bc80      	pop	{r7}
 80018de:	4770      	bx	lr

080018e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a25      	ldr	r2, [pc, #148]	; (8001988 <TIM_Base_SetConfig+0xa8>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d007      	beq.n	8001908 <TIM_Base_SetConfig+0x28>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018fe:	d003      	beq.n	8001908 <TIM_Base_SetConfig+0x28>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a22      	ldr	r2, [pc, #136]	; (800198c <TIM_Base_SetConfig+0xac>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d108      	bne.n	800191a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <TIM_Base_SetConfig+0xa8>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <TIM_Base_SetConfig+0x52>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001928:	d003      	beq.n	8001932 <TIM_Base_SetConfig+0x52>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <TIM_Base_SetConfig+0xac>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d108      	bne.n	8001944 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <TIM_Base_SetConfig+0xa8>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d103      	bne.n	8001978 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	691a      	ldr	r2, [r3, #16]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	615a      	str	r2, [r3, #20]
}
 800197e:	bf00      	nop
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	40012c00 	.word	0x40012c00
 800198c:	40000400 	.word	0x40000400

08001990 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019ba:	f3ef 8305 	mrs	r3, IPSR
 80019be:	60bb      	str	r3, [r7, #8]
  return(result);
 80019c0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10f      	bne.n	80019e6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80019c6:	f3ef 8310 	mrs	r3, PRIMASK
 80019ca:	607b      	str	r3, [r7, #4]
  return(result);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <osKernelInitialize+0x32>
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <osKernelInitialize+0x60>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d109      	bne.n	80019ee <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80019da:	f3ef 8311 	mrs	r3, BASEPRI
 80019de:	603b      	str	r3, [r7, #0]
  return(result);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80019e6:	f06f 0305 	mvn.w	r3, #5
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e00c      	b.n	8001a08 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <osKernelInitialize+0x60>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d105      	bne.n	8001a02 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <osKernelInitialize+0x60>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e002      	b.n	8001a08 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	200000f4 	.word	0x200000f4

08001a18 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a1e:	f3ef 8305 	mrs	r3, IPSR
 8001a22:	60bb      	str	r3, [r7, #8]
  return(result);
 8001a24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10f      	bne.n	8001a4a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8001a2e:	607b      	str	r3, [r7, #4]
  return(result);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <osKernelStart+0x32>
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <osKernelStart+0x64>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d109      	bne.n	8001a52 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8001a42:	603b      	str	r3, [r7, #0]
  return(result);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <osKernelStart+0x3a>
    stat = osErrorISR;
 8001a4a:	f06f 0305 	mvn.w	r3, #5
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e00e      	b.n	8001a70 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <osKernelStart+0x64>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d107      	bne.n	8001a6a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <osKernelStart+0x64>)
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8001a60:	f001 fab2 	bl	8002fc8 <vTaskStartScheduler>
      stat = osOK;
 8001a64:	2300      	movs	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e002      	b.n	8001a70 <osKernelStart+0x58>
    } else {
      stat = osError;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8001a70:	68fb      	ldr	r3, [r7, #12]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200000f4 	.word	0x200000f4

08001a80 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b092      	sub	sp, #72	; 0x48
 8001a84:	af04      	add	r7, sp, #16
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001a90:	f3ef 8305 	mrs	r3, IPSR
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f040 8094 	bne.w	8001bc6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8001aa2:	623b      	str	r3, [r7, #32]
  return(result);
 8001aa4:	6a3b      	ldr	r3, [r7, #32]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f040 808d 	bne.w	8001bc6 <osThreadNew+0x146>
 8001aac:	4b48      	ldr	r3, [pc, #288]	; (8001bd0 <osThreadNew+0x150>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d106      	bne.n	8001ac2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001ab4:	f3ef 8311 	mrs	r3, BASEPRI
 8001ab8:	61fb      	str	r3, [r7, #28]
  return(result);
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 8082 	bne.w	8001bc6 <osThreadNew+0x146>
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d07e      	beq.n	8001bc6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8001acc:	2318      	movs	r3, #24
 8001ace:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8001ad4:	f107 031b 	add.w	r3, r7, #27
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d045      	beq.n	8001b72 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <osThreadNew+0x74>
        name = attr->name;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d008      	beq.n	8001b1a <osThreadNew+0x9a>
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	2b38      	cmp	r3, #56	; 0x38
 8001b0c:	d805      	bhi.n	8001b1a <osThreadNew+0x9a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <osThreadNew+0x9e>
        return (NULL);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e054      	b.n	8001bc8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	089b      	lsrs	r3, r3, #2
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00e      	beq.n	8001b54 <osThreadNew+0xd4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	2b5b      	cmp	r3, #91	; 0x5b
 8001b3c:	d90a      	bls.n	8001b54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d002      	beq.n	8001b54 <osThreadNew+0xd4>
        mem = 1;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b52:	e010      	b.n	8001b76 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10c      	bne.n	8001b76 <osThreadNew+0xf6>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d108      	bne.n	8001b76 <osThreadNew+0xf6>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d104      	bne.n	8001b76 <osThreadNew+0xf6>
          mem = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b70:	e001      	b.n	8001b76 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8001b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d110      	bne.n	8001b9e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001b84:	9202      	str	r2, [sp, #8]
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b90:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f001 f84c 	bl	8002c30 <xTaskCreateStatic>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e013      	b.n	8001bc6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8001b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d110      	bne.n	8001bc6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	9301      	str	r3, [sp, #4]
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f001 f896 	bl	8002ce8 <xTaskCreate>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d001      	beq.n	8001bc6 <osThreadNew+0x146>
          hTask = NULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001bc6:	697b      	ldr	r3, [r7, #20]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3738      	adds	r7, #56	; 0x38
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	200000f4 	.word	0x200000f4

08001bd4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bdc:	f3ef 8305 	mrs	r3, IPSR
 8001be0:	613b      	str	r3, [r7, #16]
  return(result);
 8001be2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10f      	bne.n	8001c08 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001be8:	f3ef 8310 	mrs	r3, PRIMASK
 8001bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d109      	bne.n	8001c08 <osDelay+0x34>
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <osDelay+0x58>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d109      	bne.n	8001c10 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8001c00:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <osDelay+0x3c>
    stat = osErrorISR;
 8001c08:	f06f 0305 	mvn.w	r3, #5
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	e007      	b.n	8001c20 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <osDelay+0x4c>
      vTaskDelay(ticks);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f001 f9a0 	bl	8002f60 <vTaskDelay>
    }
  }

  return (stat);
 8001c20:	697b      	ldr	r3, [r7, #20]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200000f4 	.word	0x200000f4

08001c30 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	; 0x30
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c40:	f3ef 8305 	mrs	r3, IPSR
 8001c44:	61bb      	str	r3, [r7, #24]
  return(result);
 8001c46:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f040 8086 	bne.w	8001d5a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8001c52:	617b      	str	r3, [r7, #20]
  return(result);
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d17f      	bne.n	8001d5a <osSemaphoreNew+0x12a>
 8001c5a:	4b42      	ldr	r3, [pc, #264]	; (8001d64 <osSemaphoreNew+0x134>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d105      	bne.n	8001c6e <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001c62:	f3ef 8311 	mrs	r3, BASEPRI
 8001c66:	613b      	str	r3, [r7, #16]
  return(result);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d175      	bne.n	8001d5a <osSemaphoreNew+0x12a>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d072      	beq.n	8001d5a <osSemaphoreNew+0x12a>
 8001c74:	68ba      	ldr	r2, [r7, #8]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d86e      	bhi.n	8001d5a <osSemaphoreNew+0x12a>
    mem = -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c80:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d015      	beq.n	8001cb4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d006      	beq.n	8001c9e <osSemaphoreNew+0x6e>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b4f      	cmp	r3, #79	; 0x4f
 8001c96:	d902      	bls.n	8001c9e <osSemaphoreNew+0x6e>
        mem = 1;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	e00c      	b.n	8001cb8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d108      	bne.n	8001cb8 <osSemaphoreNew+0x88>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d104      	bne.n	8001cb8 <osSemaphoreNew+0x88>
          mem = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
 8001cb2:	e001      	b.n	8001cb8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbe:	d04c      	beq.n	8001d5a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d128      	bne.n	8001d18 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d10a      	bne.n	8001ce2 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	9200      	str	r2, [sp, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f000 fa15 	bl	8002108 <xQueueGenericCreateStatic>
 8001cde:	6278      	str	r0, [r7, #36]	; 0x24
 8001ce0:	e005      	b.n	8001cee <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f000 fa85 	bl	80021f6 <xQueueGenericCreate>
 8001cec:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d022      	beq.n	8001d3a <osSemaphoreNew+0x10a>
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01f      	beq.n	8001d3a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d02:	f000 fb43 	bl	800238c <xQueueGenericSend>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d016      	beq.n	8001d3a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8001d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d0e:	f000 fdb3 	bl	8002878 <vQueueDelete>
            hSemaphore = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	; 0x24
 8001d16:	e010      	b.n	8001d3a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d108      	bne.n	8001d30 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	461a      	mov	r2, r3
 8001d24:	68b9      	ldr	r1, [r7, #8]
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 fac6 	bl	80022b8 <xQueueCreateCountingSemaphoreStatic>
 8001d2c:	6278      	str	r0, [r7, #36]	; 0x24
 8001d2e:	e004      	b.n	8001d3a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001d30:	68b9      	ldr	r1, [r7, #8]
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 faf7 	bl	8002326 <xQueueCreateCountingSemaphore>
 8001d38:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00c      	beq.n	8001d5a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <osSemaphoreNew+0x11e>
          name = attr->name;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	e001      	b.n	8001d52 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001d52:	69f9      	ldr	r1, [r7, #28]
 8001d54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d56:	f000 fee5 	bl	8002b24 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	200000f4 	.word	0x200000f4

08001d68 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d78:	f3ef 8305 	mrs	r3, IPSR
 8001d7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8001d7e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d16f      	bne.n	8001e64 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d84:	f3ef 8310 	mrs	r3, PRIMASK
 8001d88:	617b      	str	r3, [r7, #20]
  return(result);
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d169      	bne.n	8001e64 <osMessageQueueNew+0xfc>
 8001d90:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <osMessageQueueNew+0x108>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d105      	bne.n	8001da4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001d98:	f3ef 8311 	mrs	r3, BASEPRI
 8001d9c:	613b      	str	r3, [r7, #16]
  return(result);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d15f      	bne.n	8001e64 <osMessageQueueNew+0xfc>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d05c      	beq.n	8001e64 <osMessageQueueNew+0xfc>
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d059      	beq.n	8001e64 <osMessageQueueNew+0xfc>
    mem = -1;
 8001db0:	f04f 33ff 	mov.w	r3, #4294967295
 8001db4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d029      	beq.n	8001e10 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d012      	beq.n	8001dea <osMessageQueueNew+0x82>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b4f      	cmp	r3, #79	; 0x4f
 8001dca:	d90e      	bls.n	8001dea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	fb01 f303 	mul.w	r3, r1, r3
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d302      	bcc.n	8001dea <osMessageQueueNew+0x82>
        mem = 1;
 8001de4:	2301      	movs	r3, #1
 8001de6:	623b      	str	r3, [r7, #32]
 8001de8:	e014      	b.n	8001e14 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d110      	bne.n	8001e14 <osMessageQueueNew+0xac>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10c      	bne.n	8001e14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d108      	bne.n	8001e14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d104      	bne.n	8001e14 <osMessageQueueNew+0xac>
          mem = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
 8001e0e:	e001      	b.n	8001e14 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8001e14:	6a3b      	ldr	r3, [r7, #32]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d10b      	bne.n	8001e32 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	691a      	ldr	r2, [r3, #16]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2100      	movs	r1, #0
 8001e24:	9100      	str	r1, [sp, #0]
 8001e26:	68b9      	ldr	r1, [r7, #8]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	f000 f96d 	bl	8002108 <xQueueGenericCreateStatic>
 8001e2e:	6278      	str	r0, [r7, #36]	; 0x24
 8001e30:	e008      	b.n	8001e44 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8001e38:	2200      	movs	r2, #0
 8001e3a:	68b9      	ldr	r1, [r7, #8]
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f000 f9da 	bl	80021f6 <xQueueGenericCreate>
 8001e42:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00c      	beq.n	8001e64 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <osMessageQueueNew+0xf0>
        name = attr->name;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	61fb      	str	r3, [r7, #28]
 8001e56:	e001      	b.n	8001e5c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8001e5c:	69f9      	ldr	r1, [r7, #28]
 8001e5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e60:	f000 fe60 	bl	8002b24 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8001e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3728      	adds	r7, #40	; 0x28
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200000f4 	.word	0x200000f4

08001e74 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4a06      	ldr	r2, [pc, #24]	; (8001e9c <vApplicationGetIdleTaskMemory+0x28>)
 8001e84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <vApplicationGetIdleTaskMemory+0x2c>)
 8001e8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	200000f8 	.word	0x200000f8
 8001ea0:	20000154 	.word	0x20000154

08001ea4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	4a07      	ldr	r2, [pc, #28]	; (8001ed0 <vApplicationGetTimerTaskMemory+0x2c>)
 8001eb4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <vApplicationGetTimerTaskMemory+0x30>)
 8001eba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec2:	601a      	str	r2, [r3, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bc80      	pop	{r7}
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000354 	.word	0x20000354
 8001ed4:	200003b0 	.word	0x200003b0

08001ed8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f103 0208 	add.w	r2, r3, #8
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f103 0208 	add.w	r2, r3, #8
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f103 0208 	add.w	r2, r3, #8
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr

08001f16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2200      	movs	r2, #0
 8001f22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr

08001f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b085      	sub	sp, #20
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
 8001f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	3714      	adds	r7, #20
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d103      	bne.n	8001f94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	e00c      	b.n	8001fae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3308      	adds	r3, #8
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e002      	b.n	8001fa2 <vListInsert+0x2e>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d2f6      	bcs.n	8001f9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	683a      	ldr	r2, [r7, #0]
 8001fc8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	1c5a      	adds	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	601a      	str	r2, [r3, #0]
}
 8001fda:	bf00      	nop
 8001fdc:	3714      	adds	r7, #20
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	691b      	ldr	r3, [r3, #16]
 8001ff0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6892      	ldr	r2, [r2, #8]
 8001ffa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6852      	ldr	r2, [r2, #4]
 8002004:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	d103      	bne.n	8002018 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	1e5a      	subs	r2, r3, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr
	...

08002038 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10a      	bne.n	8002062 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800204c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002050:	f383 8811 	msr	BASEPRI, r3
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800205e:	bf00      	nop
 8002060:	e7fe      	b.n	8002060 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002062:	f002 f8e3 	bl	800422c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206e:	68f9      	ldr	r1, [r7, #12]
 8002070:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	441a      	add	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	3b01      	subs	r3, #1
 8002094:	68f9      	ldr	r1, [r7, #12]
 8002096:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	441a      	add	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	22ff      	movs	r2, #255	; 0xff
 80020a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	22ff      	movs	r2, #255	; 0xff
 80020ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d114      	bne.n	80020e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d01a      	beq.n	80020f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3310      	adds	r3, #16
 80020c4:	4618      	mov	r0, r3
 80020c6:	f001 fa09 	bl	80034dc <xTaskRemoveFromEventList>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d012      	beq.n	80020f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <xQueueGenericReset+0xcc>)
 80020d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	f3bf 8f4f 	dsb	sy
 80020dc:	f3bf 8f6f 	isb	sy
 80020e0:	e009      	b.n	80020f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	3310      	adds	r3, #16
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7ff fef6 	bl	8001ed8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	3324      	adds	r3, #36	; 0x24
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fef1 	bl	8001ed8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80020f6:	f002 f8c9 	bl	800428c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80020fa:	2301      	movs	r3, #1
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3710      	adds	r7, #16
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	e000ed04 	.word	0xe000ed04

08002108 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08e      	sub	sp, #56	; 0x38
 800210c:	af02      	add	r7, sp, #8
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	60b9      	str	r1, [r7, #8]
 8002112:	607a      	str	r2, [r7, #4]
 8002114:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800211c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002120:	f383 8811 	msr	BASEPRI, r3
 8002124:	f3bf 8f6f 	isb	sy
 8002128:	f3bf 8f4f 	dsb	sy
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800212e:	bf00      	nop
 8002130:	e7fe      	b.n	8002130 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10a      	bne.n	800214e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213c:	f383 8811 	msr	BASEPRI, r3
 8002140:	f3bf 8f6f 	isb	sy
 8002144:	f3bf 8f4f 	dsb	sy
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
}
 800214a:	bf00      	nop
 800214c:	e7fe      	b.n	800214c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <xQueueGenericCreateStatic+0x52>
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <xQueueGenericCreateStatic+0x56>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <xQueueGenericCreateStatic+0x58>
 800215e:	2300      	movs	r3, #0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	623b      	str	r3, [r7, #32]
}
 8002176:	bf00      	nop
 8002178:	e7fe      	b.n	8002178 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <xQueueGenericCreateStatic+0x7e>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <xQueueGenericCreateStatic+0x82>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <xQueueGenericCreateStatic+0x84>
 800218a:	2300      	movs	r3, #0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d10a      	bne.n	80021a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002194:	f383 8811 	msr	BASEPRI, r3
 8002198:	f3bf 8f6f 	isb	sy
 800219c:	f3bf 8f4f 	dsb	sy
 80021a0:	61fb      	str	r3, [r7, #28]
}
 80021a2:	bf00      	nop
 80021a4:	e7fe      	b.n	80021a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80021a6:	2350      	movs	r3, #80	; 0x50
 80021a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	2b50      	cmp	r3, #80	; 0x50
 80021ae:	d00a      	beq.n	80021c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	61bb      	str	r3, [r7, #24]
}
 80021c2:	bf00      	nop
 80021c4:	e7fe      	b.n	80021c4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80021ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00d      	beq.n	80021ec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80021d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80021dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f843 	bl	8002272 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80021ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3730      	adds	r7, #48	; 0x30
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b08a      	sub	sp, #40	; 0x28
 80021fa:	af02      	add	r7, sp, #8
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	4613      	mov	r3, r2
 8002202:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10a      	bne.n	8002220 <xQueueGenericCreate+0x2a>
	__asm volatile
 800220a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220e:	f383 8811 	msr	BASEPRI, r3
 8002212:	f3bf 8f6f 	isb	sy
 8002216:	f3bf 8f4f 	dsb	sy
 800221a:	613b      	str	r3, [r7, #16]
}
 800221c:	bf00      	nop
 800221e:	e7fe      	b.n	800221e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
 800222a:	e004      	b.n	8002236 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	fb02 f303 	mul.w	r3, r2, r3
 8002234:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	3350      	adds	r3, #80	; 0x50
 800223a:	4618      	mov	r0, r3
 800223c:	f002 f8f6 	bl	800442c <pvPortMalloc>
 8002240:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00f      	beq.n	8002268 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	3350      	adds	r3, #80	; 0x50
 800224c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002256:	79fa      	ldrb	r2, [r7, #7]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f805 	bl	8002272 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002268:	69bb      	ldr	r3, [r7, #24]
	}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e002      	b.n	8002294 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80022a0:	2101      	movs	r1, #1
 80022a2:	69b8      	ldr	r0, [r7, #24]
 80022a4:	f7ff fec8 	bl	8002038 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80022ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ce:	f383 8811 	msr	BASEPRI, r3
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	61bb      	str	r3, [r7, #24]
}
 80022dc:	bf00      	nop
 80022de:	e7fe      	b.n	80022de <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80022e0:	68ba      	ldr	r2, [r7, #8]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d90a      	bls.n	80022fe <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80022e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ec:	f383 8811 	msr	BASEPRI, r3
 80022f0:	f3bf 8f6f 	isb	sy
 80022f4:	f3bf 8f4f 	dsb	sy
 80022f8:	617b      	str	r3, [r7, #20]
}
 80022fa:	bf00      	nop
 80022fc:	e7fe      	b.n	80022fc <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80022fe:	2302      	movs	r3, #2
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7ff fefd 	bl	8002108 <xQueueGenericCreateStatic>
 800230e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800231c:	69fb      	ldr	r3, [r7, #28]
	}
 800231e:	4618      	mov	r0, r3
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10a      	bne.n	800234c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233a:	f383 8811 	msr	BASEPRI, r3
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	f3bf 8f4f 	dsb	sy
 8002346:	613b      	str	r3, [r7, #16]
}
 8002348:	bf00      	nop
 800234a:	e7fe      	b.n	800234a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800234c:	683a      	ldr	r2, [r7, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	429a      	cmp	r2, r3
 8002352:	d90a      	bls.n	800236a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	60fb      	str	r3, [r7, #12]
}
 8002366:	bf00      	nop
 8002368:	e7fe      	b.n	8002368 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800236a:	2202      	movs	r2, #2
 800236c:	2100      	movs	r1, #0
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ff41 	bl	80021f6 <xQueueGenericCreate>
 8002374:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002382:	697b      	ldr	r3, [r7, #20]
	}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b08e      	sub	sp, #56	; 0x38
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800239a:	2300      	movs	r3, #0
 800239c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80023a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10a      	bne.n	80023be <xQueueGenericSend+0x32>
	__asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80023ba:	bf00      	nop
 80023bc:	e7fe      	b.n	80023bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <xQueueGenericSend+0x40>
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <xQueueGenericSend+0x44>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <xQueueGenericSend+0x46>
 80023d0:	2300      	movs	r3, #0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10a      	bne.n	80023ec <xQueueGenericSend+0x60>
	__asm volatile
 80023d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023da:	f383 8811 	msr	BASEPRI, r3
 80023de:	f3bf 8f6f 	isb	sy
 80023e2:	f3bf 8f4f 	dsb	sy
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023e8:	bf00      	nop
 80023ea:	e7fe      	b.n	80023ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d103      	bne.n	80023fa <xQueueGenericSend+0x6e>
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <xQueueGenericSend+0x72>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <xQueueGenericSend+0x74>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10a      	bne.n	800241a <xQueueGenericSend+0x8e>
	__asm volatile
 8002404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	623b      	str	r3, [r7, #32]
}
 8002416:	bf00      	nop
 8002418:	e7fe      	b.n	8002418 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800241a:	f001 fa21 	bl	8003860 <xTaskGetSchedulerState>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <xQueueGenericSend+0x9e>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <xQueueGenericSend+0xa2>
 800242a:	2301      	movs	r3, #1
 800242c:	e000      	b.n	8002430 <xQueueGenericSend+0xa4>
 800242e:	2300      	movs	r3, #0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10a      	bne.n	800244a <xQueueGenericSend+0xbe>
	__asm volatile
 8002434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002438:	f383 8811 	msr	BASEPRI, r3
 800243c:	f3bf 8f6f 	isb	sy
 8002440:	f3bf 8f4f 	dsb	sy
 8002444:	61fb      	str	r3, [r7, #28]
}
 8002446:	bf00      	nop
 8002448:	e7fe      	b.n	8002448 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800244a:	f001 feef 	bl	800422c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002450:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002456:	429a      	cmp	r2, r3
 8002458:	d302      	bcc.n	8002460 <xQueueGenericSend+0xd4>
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	2b02      	cmp	r3, #2
 800245e:	d129      	bne.n	80024b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002466:	f000 fa2a 	bl	80028be <prvCopyDataToQueue>
 800246a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800246c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d010      	beq.n	8002496 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	3324      	adds	r3, #36	; 0x24
 8002478:	4618      	mov	r0, r3
 800247a:	f001 f82f 	bl	80034dc <xTaskRemoveFromEventList>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002484:	4b3f      	ldr	r3, [pc, #252]	; (8002584 <xQueueGenericSend+0x1f8>)
 8002486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	e00a      	b.n	80024ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002498:	2b00      	cmp	r3, #0
 800249a:	d007      	beq.n	80024ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800249c:	4b39      	ldr	r3, [pc, #228]	; (8002584 <xQueueGenericSend+0x1f8>)
 800249e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80024ac:	f001 feee 	bl	800428c <vPortExitCritical>
				return pdPASS;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e063      	b.n	800257c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024ba:	f001 fee7 	bl	800428c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	e05c      	b.n	800257c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d106      	bne.n	80024d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	4618      	mov	r0, r3
 80024ce:	f001 f869 	bl	80035a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024d2:	2301      	movs	r3, #1
 80024d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024d6:	f001 fed9 	bl	800428c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024da:	f000 fddb 	bl	8003094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024de:	f001 fea5 	bl	800422c <vPortEnterCritical>
 80024e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80024e8:	b25b      	sxtb	r3, r3
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d103      	bne.n	80024f8 <xQueueGenericSend+0x16c>
 80024f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024fe:	b25b      	sxtb	r3, r3
 8002500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002504:	d103      	bne.n	800250e <xQueueGenericSend+0x182>
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800250e:	f001 febd 	bl	800428c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002512:	1d3a      	adds	r2, r7, #4
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	4611      	mov	r1, r2
 800251a:	4618      	mov	r0, r3
 800251c:	f001 f858 	bl	80035d0 <xTaskCheckForTimeOut>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d124      	bne.n	8002570 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002526:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002528:	f000 fac1 	bl	8002aae <prvIsQueueFull>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d018      	beq.n	8002564 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002534:	3310      	adds	r3, #16
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	4611      	mov	r1, r2
 800253a:	4618      	mov	r0, r3
 800253c:	f000 ff7e 	bl	800343c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002542:	f000 fa4c 	bl	80029de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002546:	f000 fdb3 	bl	80030b0 <xTaskResumeAll>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	f47f af7c 	bne.w	800244a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002552:	4b0c      	ldr	r3, [pc, #48]	; (8002584 <xQueueGenericSend+0x1f8>)
 8002554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	f3bf 8f4f 	dsb	sy
 800255e:	f3bf 8f6f 	isb	sy
 8002562:	e772      	b.n	800244a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002566:	f000 fa3a 	bl	80029de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800256a:	f000 fda1 	bl	80030b0 <xTaskResumeAll>
 800256e:	e76c      	b.n	800244a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002572:	f000 fa34 	bl	80029de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002576:	f000 fd9b 	bl	80030b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800257a:	2300      	movs	r3, #0
		}
	}
}
 800257c:	4618      	mov	r0, r3
 800257e:	3738      	adds	r7, #56	; 0x38
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	e000ed04 	.word	0xe000ed04

08002588 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08e      	sub	sp, #56	; 0x38
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
 8002594:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800259a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025b2:	bf00      	nop
 80025b4:	e7fe      	b.n	80025b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d103      	bne.n	80025c4 <xQueueGenericSendFromISR+0x3c>
 80025bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d101      	bne.n	80025c8 <xQueueGenericSendFromISR+0x40>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <xQueueGenericSendFromISR+0x42>
 80025c8:	2300      	movs	r3, #0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	623b      	str	r3, [r7, #32]
}
 80025e0:	bf00      	nop
 80025e2:	e7fe      	b.n	80025e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d103      	bne.n	80025f2 <xQueueGenericSendFromISR+0x6a>
 80025ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d101      	bne.n	80025f6 <xQueueGenericSendFromISR+0x6e>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <xQueueGenericSendFromISR+0x70>
 80025f6:	2300      	movs	r3, #0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	61fb      	str	r3, [r7, #28]
}
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002612:	f001 fecd 	bl	80043b0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002616:	f3ef 8211 	mrs	r2, BASEPRI
 800261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	f3bf 8f4f 	dsb	sy
 800262a:	61ba      	str	r2, [r7, #24]
 800262c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800262e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800263a:	429a      	cmp	r2, r3
 800263c:	d302      	bcc.n	8002644 <xQueueGenericSendFromISR+0xbc>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d12c      	bne.n	800269e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800264a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800264e:	683a      	ldr	r2, [r7, #0]
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002654:	f000 f933 	bl	80028be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002658:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800265c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002660:	d112      	bne.n	8002688 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d016      	beq.n	8002698 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	3324      	adds	r3, #36	; 0x24
 800266e:	4618      	mov	r0, r3
 8002670:	f000 ff34 	bl	80034dc <xTaskRemoveFromEventList>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00e      	beq.n	8002698 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00b      	beq.n	8002698 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e007      	b.n	8002698 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002688:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800268c:	3301      	adds	r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	b25a      	sxtb	r2, r3
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002698:	2301      	movs	r3, #1
 800269a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800269c:	e001      	b.n	80026a2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	637b      	str	r3, [r7, #52]	; 0x34
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80026ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80026ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3738      	adds	r7, #56	; 0x38
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	; 0x30
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <xQueueReceive+0x30>
	__asm volatile
 80026d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	623b      	str	r3, [r7, #32]
}
 80026e4:	bf00      	nop
 80026e6:	e7fe      	b.n	80026e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d103      	bne.n	80026f6 <xQueueReceive+0x3e>
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <xQueueReceive+0x42>
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <xQueueReceive+0x44>
 80026fa:	2300      	movs	r3, #0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10a      	bne.n	8002716 <xQueueReceive+0x5e>
	__asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	61fb      	str	r3, [r7, #28]
}
 8002712:	bf00      	nop
 8002714:	e7fe      	b.n	8002714 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002716:	f001 f8a3 	bl	8003860 <xTaskGetSchedulerState>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d102      	bne.n	8002726 <xQueueReceive+0x6e>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <xQueueReceive+0x72>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <xQueueReceive+0x74>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <xQueueReceive+0x8e>
	__asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	61bb      	str	r3, [r7, #24]
}
 8002742:	bf00      	nop
 8002744:	e7fe      	b.n	8002744 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002746:	f001 fd71 	bl	800422c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800274a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01f      	beq.n	8002796 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800275a:	f000 f91a 	bl	8002992 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	1e5a      	subs	r2, r3, #1
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00f      	beq.n	800278e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	3310      	adds	r3, #16
 8002772:	4618      	mov	r0, r3
 8002774:	f000 feb2 	bl	80034dc <xTaskRemoveFromEventList>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800277e:	4b3d      	ldr	r3, [pc, #244]	; (8002874 <xQueueReceive+0x1bc>)
 8002780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800278e:	f001 fd7d 	bl	800428c <vPortExitCritical>
				return pdPASS;
 8002792:	2301      	movs	r3, #1
 8002794:	e069      	b.n	800286a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d103      	bne.n	80027a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800279c:	f001 fd76 	bl	800428c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e062      	b.n	800286a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027aa:	f107 0310 	add.w	r3, r7, #16
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fef8 	bl	80035a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027b4:	2301      	movs	r3, #1
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027b8:	f001 fd68 	bl	800428c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027bc:	f000 fc6a 	bl	8003094 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027c0:	f001 fd34 	bl	800422c <vPortEnterCritical>
 80027c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027ca:	b25b      	sxtb	r3, r3
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d0:	d103      	bne.n	80027da <xQueueReceive+0x122>
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d103      	bne.n	80027f0 <xQueueReceive+0x138>
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027f0:	f001 fd4c 	bl	800428c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027f4:	1d3a      	adds	r2, r7, #4
 80027f6:	f107 0310 	add.w	r3, r7, #16
 80027fa:	4611      	mov	r1, r2
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fee7 	bl	80035d0 <xTaskCheckForTimeOut>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d123      	bne.n	8002850 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800280a:	f000 f93a 	bl	8002a82 <prvIsQueueEmpty>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d017      	beq.n	8002844 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002816:	3324      	adds	r3, #36	; 0x24
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fe0d 	bl	800343c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002824:	f000 f8db 	bl	80029de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002828:	f000 fc42 	bl	80030b0 <xTaskResumeAll>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d189      	bne.n	8002746 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <xQueueReceive+0x1bc>)
 8002834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	f3bf 8f6f 	isb	sy
 8002842:	e780      	b.n	8002746 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002846:	f000 f8ca 	bl	80029de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800284a:	f000 fc31 	bl	80030b0 <xTaskResumeAll>
 800284e:	e77a      	b.n	8002746 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002852:	f000 f8c4 	bl	80029de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002856:	f000 fc2b 	bl	80030b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800285a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285c:	f000 f911 	bl	8002a82 <prvIsQueueEmpty>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	f43f af6f 	beq.w	8002746 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002868:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800286a:	4618      	mov	r0, r3
 800286c:	3730      	adds	r7, #48	; 0x30
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	e000ed04 	.word	0xe000ed04

08002878 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <vQueueDelete+0x28>
	__asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	60bb      	str	r3, [r7, #8]
}
 800289c:	bf00      	nop
 800289e:	e7fe      	b.n	800289e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f967 	bl	8002b74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f001 fe7f 	bl	80045b4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	60b9      	str	r1, [r7, #8]
 80028c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10d      	bne.n	80028f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d14d      	bne.n	8002980 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 ffd7 	bl	800389c <xTaskPriorityDisinherit>
 80028ee:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	e043      	b.n	8002980 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d119      	bne.n	8002932 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6898      	ldr	r0, [r3, #8]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	461a      	mov	r2, r3
 8002908:	68b9      	ldr	r1, [r7, #8]
 800290a:	f001 ff91 	bl	8004830 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002916:	441a      	add	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	429a      	cmp	r2, r3
 8002926:	d32b      	bcc.n	8002980 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	e026      	b.n	8002980 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	68d8      	ldr	r0, [r3, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	461a      	mov	r2, r3
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	f001 ff77 	bl	8004830 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	425b      	negs	r3, r3
 800294c:	441a      	add	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d207      	bcs.n	800296e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	425b      	negs	r3, r3
 8002968:	441a      	add	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d105      	bne.n	8002980 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d002      	beq.n	8002980 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	3b01      	subs	r3, #1
 800297e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002988:	697b      	ldr	r3, [r7, #20]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d018      	beq.n	80029d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	441a      	add	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d303      	bcc.n	80029c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68d9      	ldr	r1, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	461a      	mov	r2, r3
 80029d0:	6838      	ldr	r0, [r7, #0]
 80029d2:	f001 ff2d 	bl	8004830 <memcpy>
	}
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80029e6:	f001 fc21 	bl	800422c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80029f2:	e011      	b.n	8002a18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d012      	beq.n	8002a22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3324      	adds	r3, #36	; 0x24
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fd6b 	bl	80034dc <xTaskRemoveFromEventList>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a0c:	f000 fe42 	bl	8003694 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a10:	7bfb      	ldrb	r3, [r7, #15]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	dce9      	bgt.n	80029f4 <prvUnlockQueue+0x16>
 8002a20:	e000      	b.n	8002a24 <prvUnlockQueue+0x46>
					break;
 8002a22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	22ff      	movs	r2, #255	; 0xff
 8002a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a2c:	f001 fc2e 	bl	800428c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a30:	f001 fbfc 	bl	800422c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a3c:	e011      	b.n	8002a62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d012      	beq.n	8002a6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3310      	adds	r3, #16
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f000 fd46 	bl	80034dc <xTaskRemoveFromEventList>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002a56:	f000 fe1d 	bl	8003694 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002a5a:	7bbb      	ldrb	r3, [r7, #14]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	dce9      	bgt.n	8002a3e <prvUnlockQueue+0x60>
 8002a6a:	e000      	b.n	8002a6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002a6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	22ff      	movs	r2, #255	; 0xff
 8002a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002a76:	f001 fc09 	bl	800428c <vPortExitCritical>
}
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002a8a:	f001 fbcf 	bl	800422c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002a96:	2301      	movs	r3, #1
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e001      	b.n	8002aa0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002aa0:	f001 fbf4 	bl	800428c <vPortExitCritical>

	return xReturn;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b084      	sub	sp, #16
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ab6:	f001 fbb9 	bl	800422c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d102      	bne.n	8002acc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e001      	b.n	8002ad0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ad0:	f001 fbdc 	bl	800428c <vPortExitCritical>

	return xReturn;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3710      	adds	r7, #16
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10a      	bne.n	8002b02 <xQueueIsQueueFullFromISR+0x24>
	__asm volatile
 8002aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af0:	f383 8811 	msr	BASEPRI, r3
 8002af4:	f3bf 8f6f 	isb	sy
 8002af8:	f3bf 8f4f 	dsb	sy
 8002afc:	60bb      	str	r3, [r7, #8]
}
 8002afe:	bf00      	nop
 8002b00:	e7fe      	b.n	8002b00 <xQueueIsQueueFullFromISR+0x22>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d102      	bne.n	8002b14 <xQueueIsQueueFullFromISR+0x36>
	{
		xReturn = pdTRUE;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	60fb      	str	r3, [r7, #12]
 8002b12:	e001      	b.n	8002b18 <xQueueIsQueueFullFromISR+0x3a>
	}
	else
	{
		xReturn = pdFALSE;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8002b18:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e014      	b.n	8002b5e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b34:	4a0e      	ldr	r2, [pc, #56]	; (8002b70 <vQueueAddToRegistry+0x4c>)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10b      	bne.n	8002b58 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b40:	490b      	ldr	r1, [pc, #44]	; (8002b70 <vQueueAddToRegistry+0x4c>)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b4a:	4a09      	ldr	r2, [pc, #36]	; (8002b70 <vQueueAddToRegistry+0x4c>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	00db      	lsls	r3, r3, #3
 8002b50:	4413      	add	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b56:	e006      	b.n	8002b66 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b07      	cmp	r3, #7
 8002b62:	d9e7      	bls.n	8002b34 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr
 8002b70:	200007b0 	.word	0x200007b0

08002b74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e016      	b.n	8002bb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8002b82:	4a10      	ldr	r2, [pc, #64]	; (8002bc4 <vQueueUnregisterQueue+0x50>)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d10b      	bne.n	8002baa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8002b92:	4a0c      	ldr	r2, [pc, #48]	; (8002bc4 <vQueueUnregisterQueue+0x50>)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2100      	movs	r1, #0
 8002b98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <vQueueUnregisterQueue+0x50>)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	605a      	str	r2, [r3, #4]
				break;
 8002ba8:	e006      	b.n	8002bb8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3301      	adds	r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2b07      	cmp	r3, #7
 8002bb4:	d9e5      	bls.n	8002b82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	200007b0 	.word	0x200007b0

08002bc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bd8:	f001 fb28 	bl	800422c <vPortEnterCritical>
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002be2:	b25b      	sxtb	r3, r3
 8002be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be8:	d103      	bne.n	8002bf2 <vQueueWaitForMessageRestricted+0x2a>
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf8:	b25b      	sxtb	r3, r3
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfe:	d103      	bne.n	8002c08 <vQueueWaitForMessageRestricted+0x40>
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c08:	f001 fb40 	bl	800428c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d106      	bne.n	8002c22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	3324      	adds	r3, #36	; 0x24
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	68b9      	ldr	r1, [r7, #8]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 fc31 	bl	8003484 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c22:	6978      	ldr	r0, [r7, #20]
 8002c24:	f7ff fedb 	bl	80029de <prvUnlockQueue>
	}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08e      	sub	sp, #56	; 0x38
 8002c34:	af04      	add	r7, sp, #16
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	623b      	str	r3, [r7, #32]
}
 8002c56:	bf00      	nop
 8002c58:	e7fe      	b.n	8002c58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <xTaskCreateStatic+0x46>
	__asm volatile
 8002c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c64:	f383 8811 	msr	BASEPRI, r3
 8002c68:	f3bf 8f6f 	isb	sy
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	61fb      	str	r3, [r7, #28]
}
 8002c72:	bf00      	nop
 8002c74:	e7fe      	b.n	8002c74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c76:	235c      	movs	r3, #92	; 0x5c
 8002c78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b5c      	cmp	r3, #92	; 0x5c
 8002c7e:	d00a      	beq.n	8002c96 <xTaskCreateStatic+0x66>
	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	61bb      	str	r3, [r7, #24]
}
 8002c92:	bf00      	nop
 8002c94:	e7fe      	b.n	8002c94 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d01e      	beq.n	8002cda <xTaskCreateStatic+0xaa>
 8002c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01b      	beq.n	8002cda <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	9303      	str	r3, [sp, #12]
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cba:	9302      	str	r3, [sp, #8]
 8002cbc:	f107 0314 	add.w	r3, r7, #20
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	68b9      	ldr	r1, [r7, #8]
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f000 f850 	bl	8002d72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002cd4:	f000 f8d4 	bl	8002e80 <prvAddNewTaskToReadyList>
 8002cd8:	e001      	b.n	8002cde <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cde:	697b      	ldr	r3, [r7, #20]
	}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3728      	adds	r7, #40	; 0x28
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af04      	add	r7, sp, #16
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	603b      	str	r3, [r7, #0]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cf8:	88fb      	ldrh	r3, [r7, #6]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 fb95 	bl	800442c <pvPortMalloc>
 8002d02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00e      	beq.n	8002d28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002d0a:	205c      	movs	r0, #92	; 0x5c
 8002d0c:	f001 fb8e 	bl	800442c <pvPortMalloc>
 8002d10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d003      	beq.n	8002d20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d1e:	e005      	b.n	8002d2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d20:	6978      	ldr	r0, [r7, #20]
 8002d22:	f001 fc47 	bl	80045b4 <vPortFree>
 8002d26:	e001      	b.n	8002d2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d017      	beq.n	8002d62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d3a:	88fa      	ldrh	r2, [r7, #6]
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9303      	str	r3, [sp, #12]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	9302      	str	r3, [sp, #8]
 8002d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d46:	9301      	str	r3, [sp, #4]
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68b9      	ldr	r1, [r7, #8]
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 f80e 	bl	8002d72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d56:	69f8      	ldr	r0, [r7, #28]
 8002d58:	f000 f892 	bl	8002e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	61bb      	str	r3, [r7, #24]
 8002d60:	e002      	b.n	8002d68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d68:	69bb      	ldr	r3, [r7, #24]
	}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3720      	adds	r7, #32
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b088      	sub	sp, #32
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	21a5      	movs	r1, #165	; 0xa5
 8002d8c:	f001 fd5e 	bl	800484c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f023 0307 	bic.w	r3, r3, #7
 8002da8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <prvInitialiseNewTask+0x58>
	__asm volatile
 8002db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db8:	f383 8811 	msr	BASEPRI, r3
 8002dbc:	f3bf 8f6f 	isb	sy
 8002dc0:	f3bf 8f4f 	dsb	sy
 8002dc4:	617b      	str	r3, [r7, #20]
}
 8002dc6:	bf00      	nop
 8002dc8:	e7fe      	b.n	8002dc8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e012      	b.n	8002df6 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	7819      	ldrb	r1, [r3, #0]
 8002dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	4413      	add	r3, r2
 8002dde:	3334      	adds	r3, #52	; 0x34
 8002de0:	460a      	mov	r2, r1
 8002de2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	4413      	add	r3, r2
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3301      	adds	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b0f      	cmp	r3, #15
 8002dfa:	d9e9      	bls.n	8002dd0 <prvInitialiseNewTask+0x5e>
 8002dfc:	e000      	b.n	8002e00 <prvInitialiseNewTask+0x8e>
		{
			break;
 8002dfe:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	2b37      	cmp	r3, #55	; 0x37
 8002e0c:	d901      	bls.n	8002e12 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e0e:	2337      	movs	r3, #55	; 0x37
 8002e10:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e16:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e1c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e20:	2200      	movs	r2, #0
 8002e22:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e26:	3304      	adds	r3, #4
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f874 	bl	8001f16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	3318      	adds	r3, #24
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f86f 	bl	8001f16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e4c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	68f9      	ldr	r1, [r7, #12]
 8002e60:	69b8      	ldr	r0, [r7, #24]
 8002e62:	f001 f8ef 	bl	8004044 <pxPortInitialiseStack>
 8002e66:	4602      	mov	r2, r0
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d002      	beq.n	8002e78 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e76:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e78:	bf00      	nop
 8002e7a:	3720      	adds	r7, #32
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e88:	f001 f9d0 	bl	800422c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e8c:	4b2d      	ldr	r3, [pc, #180]	; (8002f44 <prvAddNewTaskToReadyList+0xc4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3301      	adds	r3, #1
 8002e92:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <prvAddNewTaskToReadyList+0xc4>)
 8002e94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <prvAddNewTaskToReadyList+0xc8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d109      	bne.n	8002eb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e9e:	4a2a      	ldr	r2, [pc, #168]	; (8002f48 <prvAddNewTaskToReadyList+0xc8>)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ea4:	4b27      	ldr	r3, [pc, #156]	; (8002f44 <prvAddNewTaskToReadyList+0xc4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d110      	bne.n	8002ece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002eac:	f000 fc16 	bl	80036dc <prvInitialiseTaskLists>
 8002eb0:	e00d      	b.n	8002ece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002eb2:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <prvAddNewTaskToReadyList+0xcc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <prvAddNewTaskToReadyList+0xc8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d802      	bhi.n	8002ece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ec8:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <prvAddNewTaskToReadyList+0xc8>)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002ece:	4b20      	ldr	r3, [pc, #128]	; (8002f50 <prvAddNewTaskToReadyList+0xd0>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <prvAddNewTaskToReadyList+0xd0>)
 8002ed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002ed8:	4b1d      	ldr	r3, [pc, #116]	; (8002f50 <prvAddNewTaskToReadyList+0xd0>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <prvAddNewTaskToReadyList+0xd4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d903      	bls.n	8002ef4 <prvAddNewTaskToReadyList+0x74>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef0:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <prvAddNewTaskToReadyList+0xd4>)
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4a15      	ldr	r2, [pc, #84]	; (8002f58 <prvAddNewTaskToReadyList+0xd8>)
 8002f02:	441a      	add	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3304      	adds	r3, #4
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	f7ff f80f 	bl	8001f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f10:	f001 f9bc 	bl	800428c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f14:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <prvAddNewTaskToReadyList+0xcc>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f1c:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <prvAddNewTaskToReadyList+0xc8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d207      	bcs.n	8002f3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f2a:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <prvAddNewTaskToReadyList+0xdc>)
 8002f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f30:	601a      	str	r2, [r3, #0]
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000cc4 	.word	0x20000cc4
 8002f48:	200007f0 	.word	0x200007f0
 8002f4c:	20000cd0 	.word	0x20000cd0
 8002f50:	20000ce0 	.word	0x20000ce0
 8002f54:	20000ccc 	.word	0x20000ccc
 8002f58:	200007f4 	.word	0x200007f4
 8002f5c:	e000ed04 	.word	0xe000ed04

08002f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d017      	beq.n	8002fa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002f72:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <vTaskDelay+0x60>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <vTaskDelay+0x30>
	__asm volatile
 8002f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7e:	f383 8811 	msr	BASEPRI, r3
 8002f82:	f3bf 8f6f 	isb	sy
 8002f86:	f3bf 8f4f 	dsb	sy
 8002f8a:	60bb      	str	r3, [r7, #8]
}
 8002f8c:	bf00      	nop
 8002f8e:	e7fe      	b.n	8002f8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002f90:	f000 f880 	bl	8003094 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f94:	2100      	movs	r1, #0
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 fcee 	bl	8003978 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f9c:	f000 f888 	bl	80030b0 <xTaskResumeAll>
 8002fa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d107      	bne.n	8002fb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <vTaskDelay+0x64>)
 8002faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000cec 	.word	0x20000cec
 8002fc4:	e000ed04 	.word	0xe000ed04

08002fc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002fd6:	463a      	mov	r2, r7
 8002fd8:	1d39      	adds	r1, r7, #4
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe ff48 	bl	8001e74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002fe4:	6839      	ldr	r1, [r7, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68ba      	ldr	r2, [r7, #8]
 8002fea:	9202      	str	r2, [sp, #8]
 8002fec:	9301      	str	r3, [sp, #4]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	460a      	mov	r2, r1
 8002ff6:	4921      	ldr	r1, [pc, #132]	; (800307c <vTaskStartScheduler+0xb4>)
 8002ff8:	4821      	ldr	r0, [pc, #132]	; (8003080 <vTaskStartScheduler+0xb8>)
 8002ffa:	f7ff fe19 	bl	8002c30 <xTaskCreateStatic>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a20      	ldr	r2, [pc, #128]	; (8003084 <vTaskStartScheduler+0xbc>)
 8003002:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <vTaskStartScheduler+0xbc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d002      	beq.n	8003012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800300c:	2301      	movs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e001      	b.n	8003016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d102      	bne.n	8003022 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800301c:	f000 fd00 	bl	8003a20 <xTimerCreateTimerTask>
 8003020:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d116      	bne.n	8003056 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302c:	f383 8811 	msr	BASEPRI, r3
 8003030:	f3bf 8f6f 	isb	sy
 8003034:	f3bf 8f4f 	dsb	sy
 8003038:	613b      	str	r3, [r7, #16]
}
 800303a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <vTaskStartScheduler+0xc0>)
 800303e:	f04f 32ff 	mov.w	r2, #4294967295
 8003042:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003044:	4b11      	ldr	r3, [pc, #68]	; (800308c <vTaskStartScheduler+0xc4>)
 8003046:	2201      	movs	r2, #1
 8003048:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <vTaskStartScheduler+0xc8>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003050:	f001 f87a 	bl	8004148 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003054:	e00e      	b.n	8003074 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305c:	d10a      	bne.n	8003074 <vTaskStartScheduler+0xac>
	__asm volatile
 800305e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	60fb      	str	r3, [r7, #12]
}
 8003070:	bf00      	nop
 8003072:	e7fe      	b.n	8003072 <vTaskStartScheduler+0xaa>
}
 8003074:	bf00      	nop
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	0800581c 	.word	0x0800581c
 8003080:	080036ad 	.word	0x080036ad
 8003084:	20000ce8 	.word	0x20000ce8
 8003088:	20000ce4 	.word	0x20000ce4
 800308c:	20000cd0 	.word	0x20000cd0
 8003090:	20000cc8 	.word	0x20000cc8

08003094 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003098:	4b04      	ldr	r3, [pc, #16]	; (80030ac <vTaskSuspendAll+0x18>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	4a03      	ldr	r2, [pc, #12]	; (80030ac <vTaskSuspendAll+0x18>)
 80030a0:	6013      	str	r3, [r2, #0]
}
 80030a2:	bf00      	nop
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	20000cec 	.word	0x20000cec

080030b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80030be:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <xTaskResumeAll+0x118>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <xTaskResumeAll+0x2c>
	__asm volatile
 80030c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ca:	f383 8811 	msr	BASEPRI, r3
 80030ce:	f3bf 8f6f 	isb	sy
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	603b      	str	r3, [r7, #0]
}
 80030d8:	bf00      	nop
 80030da:	e7fe      	b.n	80030da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80030dc:	f001 f8a6 	bl	800422c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80030e0:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <xTaskResumeAll+0x118>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	3b01      	subs	r3, #1
 80030e6:	4a38      	ldr	r2, [pc, #224]	; (80031c8 <xTaskResumeAll+0x118>)
 80030e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030ea:	4b37      	ldr	r3, [pc, #220]	; (80031c8 <xTaskResumeAll+0x118>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d162      	bne.n	80031b8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80030f2:	4b36      	ldr	r3, [pc, #216]	; (80031cc <xTaskResumeAll+0x11c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d05e      	beq.n	80031b8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030fa:	e02f      	b.n	800315c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80030fc:	4b34      	ldr	r3, [pc, #208]	; (80031d0 <xTaskResumeAll+0x120>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3318      	adds	r3, #24
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe ff6b 	bl	8001fe4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	3304      	adds	r3, #4
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe ff66 	bl	8001fe4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	4b2d      	ldr	r3, [pc, #180]	; (80031d4 <xTaskResumeAll+0x124>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d903      	bls.n	800312c <xTaskResumeAll+0x7c>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	4a2a      	ldr	r2, [pc, #168]	; (80031d4 <xTaskResumeAll+0x124>)
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4a27      	ldr	r2, [pc, #156]	; (80031d8 <xTaskResumeAll+0x128>)
 800313a:	441a      	add	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3304      	adds	r3, #4
 8003140:	4619      	mov	r1, r3
 8003142:	4610      	mov	r0, r2
 8003144:	f7fe fef3 	bl	8001f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800314c:	4b23      	ldr	r3, [pc, #140]	; (80031dc <xTaskResumeAll+0x12c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003152:	429a      	cmp	r2, r3
 8003154:	d302      	bcc.n	800315c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003156:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <xTaskResumeAll+0x130>)
 8003158:	2201      	movs	r2, #1
 800315a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800315c:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <xTaskResumeAll+0x120>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1cb      	bne.n	80030fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800316a:	f000 fb55 	bl	8003818 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <xTaskResumeAll+0x134>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d010      	beq.n	800319c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800317a:	f000 f845 	bl	8003208 <xTaskIncrementTick>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d002      	beq.n	800318a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003184:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <xTaskResumeAll+0x130>)
 8003186:	2201      	movs	r2, #1
 8003188:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3b01      	subs	r3, #1
 800318e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f1      	bne.n	800317a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <xTaskResumeAll+0x134>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <xTaskResumeAll+0x130>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d009      	beq.n	80031b8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80031a8:	4b0f      	ldr	r3, [pc, #60]	; (80031e8 <xTaskResumeAll+0x138>)
 80031aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80031b8:	f001 f868 	bl	800428c <vPortExitCritical>

	return xAlreadyYielded;
 80031bc:	68bb      	ldr	r3, [r7, #8]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3710      	adds	r7, #16
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000cec 	.word	0x20000cec
 80031cc:	20000cc4 	.word	0x20000cc4
 80031d0:	20000c84 	.word	0x20000c84
 80031d4:	20000ccc 	.word	0x20000ccc
 80031d8:	200007f4 	.word	0x200007f4
 80031dc:	200007f0 	.word	0x200007f0
 80031e0:	20000cd8 	.word	0x20000cd8
 80031e4:	20000cd4 	.word	0x20000cd4
 80031e8:	e000ed04 	.word	0xe000ed04

080031ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80031f2:	4b04      	ldr	r3, [pc, #16]	; (8003204 <xTaskGetTickCount+0x18>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80031f8:	687b      	ldr	r3, [r7, #4]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	20000cc8 	.word	0x20000cc8

08003208 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003212:	4b51      	ldr	r3, [pc, #324]	; (8003358 <xTaskIncrementTick+0x150>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f040 808e 	bne.w	8003338 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800321c:	4b4f      	ldr	r3, [pc, #316]	; (800335c <xTaskIncrementTick+0x154>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	3301      	adds	r3, #1
 8003222:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003224:	4a4d      	ldr	r2, [pc, #308]	; (800335c <xTaskIncrementTick+0x154>)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d120      	bne.n	8003272 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003230:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <xTaskIncrementTick+0x158>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00a      	beq.n	8003250 <xTaskIncrementTick+0x48>
	__asm volatile
 800323a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800323e:	f383 8811 	msr	BASEPRI, r3
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	f3bf 8f4f 	dsb	sy
 800324a:	603b      	str	r3, [r7, #0]
}
 800324c:	bf00      	nop
 800324e:	e7fe      	b.n	800324e <xTaskIncrementTick+0x46>
 8003250:	4b43      	ldr	r3, [pc, #268]	; (8003360 <xTaskIncrementTick+0x158>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	4b43      	ldr	r3, [pc, #268]	; (8003364 <xTaskIncrementTick+0x15c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a41      	ldr	r2, [pc, #260]	; (8003360 <xTaskIncrementTick+0x158>)
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4a41      	ldr	r2, [pc, #260]	; (8003364 <xTaskIncrementTick+0x15c>)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b40      	ldr	r3, [pc, #256]	; (8003368 <xTaskIncrementTick+0x160>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	3301      	adds	r3, #1
 800326a:	4a3f      	ldr	r2, [pc, #252]	; (8003368 <xTaskIncrementTick+0x160>)
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	f000 fad3 	bl	8003818 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003272:	4b3e      	ldr	r3, [pc, #248]	; (800336c <xTaskIncrementTick+0x164>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	429a      	cmp	r2, r3
 800327a:	d34e      	bcc.n	800331a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800327c:	4b38      	ldr	r3, [pc, #224]	; (8003360 <xTaskIncrementTick+0x158>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <xTaskIncrementTick+0x82>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <xTaskIncrementTick+0x84>
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d004      	beq.n	800329a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003290:	4b36      	ldr	r3, [pc, #216]	; (800336c <xTaskIncrementTick+0x164>)
 8003292:	f04f 32ff 	mov.w	r2, #4294967295
 8003296:	601a      	str	r2, [r3, #0]
					break;
 8003298:	e03f      	b.n	800331a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800329a:	4b31      	ldr	r3, [pc, #196]	; (8003360 <xTaskIncrementTick+0x158>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d203      	bcs.n	80032ba <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80032b2:	4a2e      	ldr	r2, [pc, #184]	; (800336c <xTaskIncrementTick+0x164>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6013      	str	r3, [r2, #0]
						break;
 80032b8:	e02f      	b.n	800331a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	3304      	adds	r3, #4
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fe fe90 	bl	8001fe4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	3318      	adds	r3, #24
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fe fe87 	bl	8001fe4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032da:	4b25      	ldr	r3, [pc, #148]	; (8003370 <xTaskIncrementTick+0x168>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d903      	bls.n	80032ea <xTaskIncrementTick+0xe2>
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <xTaskIncrementTick+0x168>)
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <xTaskIncrementTick+0x16c>)
 80032f8:	441a      	add	r2, r3
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	3304      	adds	r3, #4
 80032fe:	4619      	mov	r1, r3
 8003300:	4610      	mov	r0, r2
 8003302:	f7fe fe14 	bl	8001f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800330a:	4b1b      	ldr	r3, [pc, #108]	; (8003378 <xTaskIncrementTick+0x170>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003310:	429a      	cmp	r2, r3
 8003312:	d3b3      	bcc.n	800327c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003314:	2301      	movs	r3, #1
 8003316:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003318:	e7b0      	b.n	800327c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800331a:	4b17      	ldr	r3, [pc, #92]	; (8003378 <xTaskIncrementTick+0x170>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003320:	4914      	ldr	r1, [pc, #80]	; (8003374 <xTaskIncrementTick+0x16c>)
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d907      	bls.n	8003342 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003332:	2301      	movs	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e004      	b.n	8003342 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <xTaskIncrementTick+0x174>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	3301      	adds	r3, #1
 800333e:	4a0f      	ldr	r2, [pc, #60]	; (800337c <xTaskIncrementTick+0x174>)
 8003340:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <xTaskIncrementTick+0x178>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800334a:	2301      	movs	r3, #1
 800334c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800334e:	697b      	ldr	r3, [r7, #20]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000cec 	.word	0x20000cec
 800335c:	20000cc8 	.word	0x20000cc8
 8003360:	20000c7c 	.word	0x20000c7c
 8003364:	20000c80 	.word	0x20000c80
 8003368:	20000cdc 	.word	0x20000cdc
 800336c:	20000ce4 	.word	0x20000ce4
 8003370:	20000ccc 	.word	0x20000ccc
 8003374:	200007f4 	.word	0x200007f4
 8003378:	200007f0 	.word	0x200007f0
 800337c:	20000cd4 	.word	0x20000cd4
 8003380:	20000cd8 	.word	0x20000cd8

08003384 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800338a:	4b27      	ldr	r3, [pc, #156]	; (8003428 <vTaskSwitchContext+0xa4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003392:	4b26      	ldr	r3, [pc, #152]	; (800342c <vTaskSwitchContext+0xa8>)
 8003394:	2201      	movs	r2, #1
 8003396:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003398:	e041      	b.n	800341e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800339a:	4b24      	ldr	r3, [pc, #144]	; (800342c <vTaskSwitchContext+0xa8>)
 800339c:	2200      	movs	r2, #0
 800339e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80033a0:	4b23      	ldr	r3, [pc, #140]	; (8003430 <vTaskSwitchContext+0xac>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	60fb      	str	r3, [r7, #12]
 80033a6:	e010      	b.n	80033ca <vTaskSwitchContext+0x46>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10a      	bne.n	80033c4 <vTaskSwitchContext+0x40>
	__asm volatile
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	607b      	str	r3, [r7, #4]
}
 80033c0:	bf00      	nop
 80033c2:	e7fe      	b.n	80033c2 <vTaskSwitchContext+0x3e>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	491a      	ldr	r1, [pc, #104]	; (8003434 <vTaskSwitchContext+0xb0>)
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0e4      	beq.n	80033a8 <vTaskSwitchContext+0x24>
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4a12      	ldr	r2, [pc, #72]	; (8003434 <vTaskSwitchContext+0xb0>)
 80033ea:	4413      	add	r3, r2
 80033ec:	60bb      	str	r3, [r7, #8]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3308      	adds	r3, #8
 8003400:	429a      	cmp	r2, r3
 8003402:	d104      	bne.n	800340e <vTaskSwitchContext+0x8a>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a08      	ldr	r2, [pc, #32]	; (8003438 <vTaskSwitchContext+0xb4>)
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4a05      	ldr	r2, [pc, #20]	; (8003430 <vTaskSwitchContext+0xac>)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6013      	str	r3, [r2, #0]
}
 800341e:	bf00      	nop
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr
 8003428:	20000cec 	.word	0x20000cec
 800342c:	20000cd8 	.word	0x20000cd8
 8003430:	20000ccc 	.word	0x20000ccc
 8003434:	200007f4 	.word	0x200007f4
 8003438:	200007f0 	.word	0x200007f0

0800343c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10a      	bne.n	8003462 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	60fb      	str	r3, [r7, #12]
}
 800345e:	bf00      	nop
 8003460:	e7fe      	b.n	8003460 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <vTaskPlaceOnEventList+0x44>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3318      	adds	r3, #24
 8003468:	4619      	mov	r1, r3
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fe fd82 	bl	8001f74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003470:	2101      	movs	r1, #1
 8003472:	6838      	ldr	r0, [r7, #0]
 8003474:	f000 fa80 	bl	8003978 <prvAddCurrentTaskToDelayedList>
}
 8003478:	bf00      	nop
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	200007f0 	.word	0x200007f0

08003484 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349a:	f383 8811 	msr	BASEPRI, r3
 800349e:	f3bf 8f6f 	isb	sy
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	617b      	str	r3, [r7, #20]
}
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80034ac:	4b0a      	ldr	r3, [pc, #40]	; (80034d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3318      	adds	r3, #24
 80034b2:	4619      	mov	r1, r3
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7fe fd3a 	bl	8001f2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d002      	beq.n	80034c6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80034c0:	f04f 33ff 	mov.w	r3, #4294967295
 80034c4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	68b8      	ldr	r0, [r7, #8]
 80034ca:	f000 fa55 	bl	8003978 <prvAddCurrentTaskToDelayedList>
	}
 80034ce:	bf00      	nop
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	200007f0 	.word	0x200007f0

080034dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	60fb      	str	r3, [r7, #12]
}
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	3318      	adds	r3, #24
 800350c:	4618      	mov	r0, r3
 800350e:	f7fe fd69 	bl	8001fe4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <xTaskRemoveFromEventList+0xb0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d11d      	bne.n	8003556 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	3304      	adds	r3, #4
 800351e:	4618      	mov	r0, r3
 8003520:	f7fe fd60 	bl	8001fe4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	4b19      	ldr	r3, [pc, #100]	; (8003590 <xTaskRemoveFromEventList+0xb4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d903      	bls.n	8003538 <xTaskRemoveFromEventList+0x5c>
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4a16      	ldr	r2, [pc, #88]	; (8003590 <xTaskRemoveFromEventList+0xb4>)
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353c:	4613      	mov	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4a13      	ldr	r2, [pc, #76]	; (8003594 <xTaskRemoveFromEventList+0xb8>)
 8003546:	441a      	add	r2, r3
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	3304      	adds	r3, #4
 800354c:	4619      	mov	r1, r3
 800354e:	4610      	mov	r0, r2
 8003550:	f7fe fced 	bl	8001f2e <vListInsertEnd>
 8003554:	e005      	b.n	8003562 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	3318      	adds	r3, #24
 800355a:	4619      	mov	r1, r3
 800355c:	480e      	ldr	r0, [pc, #56]	; (8003598 <xTaskRemoveFromEventList+0xbc>)
 800355e:	f7fe fce6 	bl	8001f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <xTaskRemoveFromEventList+0xc0>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	429a      	cmp	r2, r3
 800356e:	d905      	bls.n	800357c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003570:	2301      	movs	r3, #1
 8003572:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <xTaskRemoveFromEventList+0xc4>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	e001      	b.n	8003580 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003580:	697b      	ldr	r3, [r7, #20]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3718      	adds	r7, #24
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000cec 	.word	0x20000cec
 8003590:	20000ccc 	.word	0x20000ccc
 8003594:	200007f4 	.word	0x200007f4
 8003598:	20000c84 	.word	0x20000c84
 800359c:	200007f0 	.word	0x200007f0
 80035a0:	20000cd8 	.word	0x20000cd8

080035a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <vTaskInternalSetTimeOutState+0x24>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <vTaskInternalSetTimeOutState+0x28>)
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	605a      	str	r2, [r3, #4]
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bc80      	pop	{r7}
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	20000cdc 	.word	0x20000cdc
 80035cc:	20000cc8 	.word	0x20000cc8

080035d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10a      	bne.n	80035f6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	613b      	str	r3, [r7, #16]
}
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10a      	bne.n	8003612 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	60fb      	str	r3, [r7, #12]
}
 800360e:	bf00      	nop
 8003610:	e7fe      	b.n	8003610 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003612:	f000 fe0b 	bl	800422c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003616:	4b1d      	ldr	r3, [pc, #116]	; (800368c <xTaskCheckForTimeOut+0xbc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362e:	d102      	bne.n	8003636 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003630:	2300      	movs	r3, #0
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	e023      	b.n	800367e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b15      	ldr	r3, [pc, #84]	; (8003690 <xTaskCheckForTimeOut+0xc0>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d007      	beq.n	8003652 <xTaskCheckForTimeOut+0x82>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	429a      	cmp	r2, r3
 800364a:	d302      	bcc.n	8003652 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800364c:	2301      	movs	r3, #1
 800364e:	61fb      	str	r3, [r7, #28]
 8003650:	e015      	b.n	800367e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d20b      	bcs.n	8003674 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	1ad2      	subs	r2, r2, r3
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff ff9b 	bl	80035a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e004      	b.n	800367e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800367a:	2301      	movs	r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800367e:	f000 fe05 	bl	800428c <vPortExitCritical>

	return xReturn;
 8003682:	69fb      	ldr	r3, [r7, #28]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	20000cc8 	.word	0x20000cc8
 8003690:	20000cdc 	.word	0x20000cdc

08003694 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <vTaskMissedYield+0x14>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	bf00      	nop
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	20000cd8 	.word	0x20000cd8

080036ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80036b4:	f000 f852 	bl	800375c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036b8:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <prvIdleTask+0x28>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d9f9      	bls.n	80036b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80036c0:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <prvIdleTask+0x2c>)
 80036c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036c6:	601a      	str	r2, [r3, #0]
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80036d0:	e7f0      	b.n	80036b4 <prvIdleTask+0x8>
 80036d2:	bf00      	nop
 80036d4:	200007f4 	.word	0x200007f4
 80036d8:	e000ed04 	.word	0xe000ed04

080036dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036e2:	2300      	movs	r3, #0
 80036e4:	607b      	str	r3, [r7, #4]
 80036e6:	e00c      	b.n	8003702 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <prvInitialiseTaskLists+0x60>)
 80036f4:	4413      	add	r3, r2
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fe fbee 	bl	8001ed8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3301      	adds	r3, #1
 8003700:	607b      	str	r3, [r7, #4]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b37      	cmp	r3, #55	; 0x37
 8003706:	d9ef      	bls.n	80036e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003708:	480d      	ldr	r0, [pc, #52]	; (8003740 <prvInitialiseTaskLists+0x64>)
 800370a:	f7fe fbe5 	bl	8001ed8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800370e:	480d      	ldr	r0, [pc, #52]	; (8003744 <prvInitialiseTaskLists+0x68>)
 8003710:	f7fe fbe2 	bl	8001ed8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003714:	480c      	ldr	r0, [pc, #48]	; (8003748 <prvInitialiseTaskLists+0x6c>)
 8003716:	f7fe fbdf 	bl	8001ed8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800371a:	480c      	ldr	r0, [pc, #48]	; (800374c <prvInitialiseTaskLists+0x70>)
 800371c:	f7fe fbdc 	bl	8001ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003720:	480b      	ldr	r0, [pc, #44]	; (8003750 <prvInitialiseTaskLists+0x74>)
 8003722:	f7fe fbd9 	bl	8001ed8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <prvInitialiseTaskLists+0x78>)
 8003728:	4a05      	ldr	r2, [pc, #20]	; (8003740 <prvInitialiseTaskLists+0x64>)
 800372a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <prvInitialiseTaskLists+0x7c>)
 800372e:	4a05      	ldr	r2, [pc, #20]	; (8003744 <prvInitialiseTaskLists+0x68>)
 8003730:	601a      	str	r2, [r3, #0]
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	200007f4 	.word	0x200007f4
 8003740:	20000c54 	.word	0x20000c54
 8003744:	20000c68 	.word	0x20000c68
 8003748:	20000c84 	.word	0x20000c84
 800374c:	20000c98 	.word	0x20000c98
 8003750:	20000cb0 	.word	0x20000cb0
 8003754:	20000c7c 	.word	0x20000c7c
 8003758:	20000c80 	.word	0x20000c80

0800375c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003762:	e019      	b.n	8003798 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003764:	f000 fd62 	bl	800422c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <prvCheckTasksWaitingTermination+0x50>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3304      	adds	r3, #4
 8003774:	4618      	mov	r0, r3
 8003776:	f7fe fc35 	bl	8001fe4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800377a:	4b0d      	ldr	r3, [pc, #52]	; (80037b0 <prvCheckTasksWaitingTermination+0x54>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3b01      	subs	r3, #1
 8003780:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <prvCheckTasksWaitingTermination+0x54>)
 8003782:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <prvCheckTasksWaitingTermination+0x58>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	3b01      	subs	r3, #1
 800378a:	4a0a      	ldr	r2, [pc, #40]	; (80037b4 <prvCheckTasksWaitingTermination+0x58>)
 800378c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800378e:	f000 fd7d 	bl	800428c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f810 	bl	80037b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003798:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <prvCheckTasksWaitingTermination+0x58>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1e1      	bne.n	8003764 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000c98 	.word	0x20000c98
 80037b0:	20000cc4 	.word	0x20000cc4
 80037b4:	20000cac 	.word	0x20000cac

080037b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d108      	bne.n	80037dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fef0 	bl	80045b4 <vPortFree>
				vPortFree( pxTCB );
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 feed 	bl	80045b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80037da:	e018      	b.n	800380e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d103      	bne.n	80037ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f000 fee4 	bl	80045b4 <vPortFree>
	}
 80037ec:	e00f      	b.n	800380e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d00a      	beq.n	800380e <prvDeleteTCB+0x56>
	__asm volatile
 80037f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fc:	f383 8811 	msr	BASEPRI, r3
 8003800:	f3bf 8f6f 	isb	sy
 8003804:	f3bf 8f4f 	dsb	sy
 8003808:	60fb      	str	r3, [r7, #12]
}
 800380a:	bf00      	nop
 800380c:	e7fe      	b.n	800380c <prvDeleteTCB+0x54>
	}
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <prvResetNextTaskUnblockTime+0x40>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <prvResetNextTaskUnblockTime+0x14>
 8003828:	2301      	movs	r3, #1
 800382a:	e000      	b.n	800382e <prvResetNextTaskUnblockTime+0x16>
 800382c:	2300      	movs	r3, #0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d004      	beq.n	800383c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003832:	4b0a      	ldr	r3, [pc, #40]	; (800385c <prvResetNextTaskUnblockTime+0x44>)
 8003834:	f04f 32ff 	mov.w	r2, #4294967295
 8003838:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800383a:	e008      	b.n	800384e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800383c:	4b06      	ldr	r3, [pc, #24]	; (8003858 <prvResetNextTaskUnblockTime+0x40>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a04      	ldr	r2, [pc, #16]	; (800385c <prvResetNextTaskUnblockTime+0x44>)
 800384c:	6013      	str	r3, [r2, #0]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	bc80      	pop	{r7}
 8003856:	4770      	bx	lr
 8003858:	20000c7c 	.word	0x20000c7c
 800385c:	20000ce4 	.word	0x20000ce4

08003860 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003860:	b480      	push	{r7}
 8003862:	b083      	sub	sp, #12
 8003864:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003866:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <xTaskGetSchedulerState+0x34>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800386e:	2301      	movs	r3, #1
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	e008      	b.n	8003886 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003874:	4b08      	ldr	r3, [pc, #32]	; (8003898 <xTaskGetSchedulerState+0x38>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d102      	bne.n	8003882 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800387c:	2302      	movs	r3, #2
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	e001      	b.n	8003886 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003886:	687b      	ldr	r3, [r7, #4]
	}
 8003888:	4618      	mov	r0, r3
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000cd0 	.word	0x20000cd0
 8003898:	20000cec 	.word	0x20000cec

0800389c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800389c:	b580      	push	{r7, lr}
 800389e:	b086      	sub	sp, #24
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d056      	beq.n	8003960 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80038b2:	4b2e      	ldr	r3, [pc, #184]	; (800396c <xTaskPriorityDisinherit+0xd0>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d00a      	beq.n	80038d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	60fb      	str	r3, [r7, #12]
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80038da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038de:	f383 8811 	msr	BASEPRI, r3
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	f3bf 8f4f 	dsb	sy
 80038ea:	60bb      	str	r3, [r7, #8]
}
 80038ec:	bf00      	nop
 80038ee:	e7fe      	b.n	80038ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f4:	1e5a      	subs	r2, r3, #1
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003902:	429a      	cmp	r2, r3
 8003904:	d02c      	beq.n	8003960 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800390a:	2b00      	cmp	r3, #0
 800390c:	d128      	bne.n	8003960 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	3304      	adds	r3, #4
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fb66 	bl	8001fe4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	4b0f      	ldr	r3, [pc, #60]	; (8003970 <xTaskPriorityDisinherit+0xd4>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d903      	bls.n	8003940 <xTaskPriorityDisinherit+0xa4>
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393c:	4a0c      	ldr	r2, [pc, #48]	; (8003970 <xTaskPriorityDisinherit+0xd4>)
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4a09      	ldr	r2, [pc, #36]	; (8003974 <xTaskPriorityDisinherit+0xd8>)
 800394e:	441a      	add	r2, r3
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	3304      	adds	r3, #4
 8003954:	4619      	mov	r1, r3
 8003956:	4610      	mov	r0, r2
 8003958:	f7fe fae9 	bl	8001f2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003960:	697b      	ldr	r3, [r7, #20]
	}
 8003962:	4618      	mov	r0, r3
 8003964:	3718      	adds	r7, #24
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200007f0 	.word	0x200007f0
 8003970:	20000ccc 	.word	0x20000ccc
 8003974:	200007f4 	.word	0x200007f4

08003978 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003982:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <prvAddCurrentTaskToDelayedList+0x90>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003988:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <prvAddCurrentTaskToDelayedList+0x94>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	3304      	adds	r3, #4
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fb28 	bl	8001fe4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800399a:	d10a      	bne.n	80039b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3304      	adds	r3, #4
 80039a8:	4619      	mov	r1, r3
 80039aa:	4819      	ldr	r0, [pc, #100]	; (8003a10 <prvAddCurrentTaskToDelayedList+0x98>)
 80039ac:	f7fe fabf 	bl	8001f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039b0:	e026      	b.n	8003a00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039b2:	68fa      	ldr	r2, [r7, #12]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4413      	add	r3, r2
 80039b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039ba:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80039c2:	68ba      	ldr	r2, [r7, #8]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d209      	bcs.n	80039de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <prvAddCurrentTaskToDelayedList+0x9c>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	3304      	adds	r3, #4
 80039d4:	4619      	mov	r1, r3
 80039d6:	4610      	mov	r0, r2
 80039d8:	f7fe facc 	bl	8001f74 <vListInsert>
}
 80039dc:	e010      	b.n	8003a00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039de:	4b0e      	ldr	r3, [pc, #56]	; (8003a18 <prvAddCurrentTaskToDelayedList+0xa0>)
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <prvAddCurrentTaskToDelayedList+0x94>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f7fe fac2 	bl	8001f74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <prvAddCurrentTaskToDelayedList+0xa4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d202      	bcs.n	8003a00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80039fa:	4a08      	ldr	r2, [pc, #32]	; (8003a1c <prvAddCurrentTaskToDelayedList+0xa4>)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	6013      	str	r3, [r2, #0]
}
 8003a00:	bf00      	nop
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20000cc8 	.word	0x20000cc8
 8003a0c:	200007f0 	.word	0x200007f0
 8003a10:	20000cb0 	.word	0x20000cb0
 8003a14:	20000c80 	.word	0x20000c80
 8003a18:	20000c7c 	.word	0x20000c7c
 8003a1c:	20000ce4 	.word	0x20000ce4

08003a20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003a2a:	f000 facb 	bl	8003fc4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003a2e:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <xTimerCreateTimerTask+0x80>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d021      	beq.n	8003a7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003a3e:	1d3a      	adds	r2, r7, #4
 8003a40:	f107 0108 	add.w	r1, r7, #8
 8003a44:	f107 030c 	add.w	r3, r7, #12
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fe fa2b 	bl	8001ea4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	9202      	str	r2, [sp, #8]
 8003a56:	9301      	str	r3, [sp, #4]
 8003a58:	2302      	movs	r3, #2
 8003a5a:	9300      	str	r3, [sp, #0]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	460a      	mov	r2, r1
 8003a60:	4910      	ldr	r1, [pc, #64]	; (8003aa4 <xTimerCreateTimerTask+0x84>)
 8003a62:	4811      	ldr	r0, [pc, #68]	; (8003aa8 <xTimerCreateTimerTask+0x88>)
 8003a64:	f7ff f8e4 	bl	8002c30 <xTaskCreateStatic>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a10      	ldr	r2, [pc, #64]	; (8003aac <xTimerCreateTimerTask+0x8c>)
 8003a6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <xTimerCreateTimerTask+0x8c>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003a76:	2301      	movs	r3, #1
 8003a78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	613b      	str	r3, [r7, #16]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003a96:	697b      	ldr	r3, [r7, #20]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	20000d20 	.word	0x20000d20
 8003aa4:	08005824 	.word	0x08005824
 8003aa8:	08003bcd 	.word	0x08003bcd
 8003aac:	20000d24 	.word	0x20000d24

08003ab0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d10a      	bne.n	8003ade <xTimerGenericCommand+0x2e>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	623b      	str	r3, [r7, #32]
}
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <xTimerGenericCommand+0x98>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d02a      	beq.n	8003b3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	dc18      	bgt.n	8003b2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003af8:	f7ff feb2 	bl	8003860 <xTaskGetSchedulerState>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d109      	bne.n	8003b16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003b02:	4b11      	ldr	r3, [pc, #68]	; (8003b48 <xTimerGenericCommand+0x98>)
 8003b04:	6818      	ldr	r0, [r3, #0]
 8003b06:	f107 0110 	add.w	r1, r7, #16
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b0e:	f7fe fc3d 	bl	800238c <xQueueGenericSend>
 8003b12:	6278      	str	r0, [r7, #36]	; 0x24
 8003b14:	e012      	b.n	8003b3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003b16:	4b0c      	ldr	r3, [pc, #48]	; (8003b48 <xTimerGenericCommand+0x98>)
 8003b18:	6818      	ldr	r0, [r3, #0]
 8003b1a:	f107 0110 	add.w	r1, r7, #16
 8003b1e:	2300      	movs	r3, #0
 8003b20:	2200      	movs	r2, #0
 8003b22:	f7fe fc33 	bl	800238c <xQueueGenericSend>
 8003b26:	6278      	str	r0, [r7, #36]	; 0x24
 8003b28:	e008      	b.n	8003b3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <xTimerGenericCommand+0x98>)
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	f107 0110 	add.w	r1, r7, #16
 8003b32:	2300      	movs	r3, #0
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	f7fe fd27 	bl	8002588 <xQueueGenericSendFromISR>
 8003b3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3728      	adds	r7, #40	; 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	20000d20 	.word	0x20000d20

08003b4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <prvProcessExpiredTimer+0x7c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fa3d 	bl	8001fe4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d122      	bne.n	8003bb8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	18d1      	adds	r1, r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	6978      	ldr	r0, [r7, #20]
 8003b80:	f000 f8c8 	bl	8003d14 <prvInsertTimerInActiveList>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d016      	beq.n	8003bb8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	2100      	movs	r1, #0
 8003b94:	6978      	ldr	r0, [r7, #20]
 8003b96:	f7ff ff8b 	bl	8003ab0 <xTimerGenericCommand>
 8003b9a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	60fb      	str	r3, [r7, #12]
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	6978      	ldr	r0, [r7, #20]
 8003bbe:	4798      	blx	r3
}
 8003bc0:	bf00      	nop
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000d18 	.word	0x20000d18

08003bcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bd4:	f107 0308 	add.w	r3, r7, #8
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 f857 	bl	8003c8c <prvGetNextExpireTime>
 8003bde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4619      	mov	r1, r3
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f803 	bl	8003bf0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003bea:	f000 f8d5 	bl	8003d98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bee:	e7f1      	b.n	8003bd4 <prvTimerTask+0x8>

08003bf0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003bfa:	f7ff fa4b 	bl	8003094 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bfe:	f107 0308 	add.w	r3, r7, #8
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 f866 	bl	8003cd4 <prvSampleTimeNow>
 8003c08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d130      	bne.n	8003c72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10a      	bne.n	8003c2c <prvProcessTimerOrBlockTask+0x3c>
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d806      	bhi.n	8003c2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003c1e:	f7ff fa47 	bl	80030b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c22:	68f9      	ldr	r1, [r7, #12]
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff91 	bl	8003b4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003c2a:	e024      	b.n	8003c76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c32:	4b13      	ldr	r3, [pc, #76]	; (8003c80 <prvProcessTimerOrBlockTask+0x90>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf0c      	ite	eq
 8003c3c:	2301      	moveq	r3, #1
 8003c3e:	2300      	movne	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <prvProcessTimerOrBlockTask+0x94>)
 8003c46:	6818      	ldr	r0, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	4619      	mov	r1, r3
 8003c52:	f7fe ffb9 	bl	8002bc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c56:	f7ff fa2b 	bl	80030b0 <xTaskResumeAll>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003c60:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <prvProcessTimerOrBlockTask+0x98>)
 8003c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
}
 8003c70:	e001      	b.n	8003c76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003c72:	f7ff fa1d 	bl	80030b0 <xTaskResumeAll>
}
 8003c76:	bf00      	nop
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000d1c 	.word	0x20000d1c
 8003c84:	20000d20 	.word	0x20000d20
 8003c88:	e000ed04 	.word	0xe000ed04

08003c8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c94:	4b0e      	ldr	r3, [pc, #56]	; (8003cd0 <prvGetNextExpireTime+0x44>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <prvGetNextExpireTime+0x44>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e001      	b.n	8003cc2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	20000d18 	.word	0x20000d18

08003cd4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003cdc:	f7ff fa86 	bl	80031ec <xTaskGetTickCount>
 8003ce0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	; (8003d10 <prvSampleTimeNow+0x3c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d205      	bcs.n	8003cf8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003cec:	f000 f908 	bl	8003f00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003cfe:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <prvSampleTimeNow+0x3c>)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003d04:	68fb      	ldr	r3, [r7, #12]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000d28 	.word	0x20000d28

08003d14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	60f8      	str	r0, [r7, #12]
 8003d1c:	60b9      	str	r1, [r7, #8]
 8003d1e:	607a      	str	r2, [r7, #4]
 8003d20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d812      	bhi.n	8003d60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	1ad2      	subs	r2, r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d302      	bcc.n	8003d4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e01b      	b.n	8003d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <prvInsertTimerInActiveList+0x7c>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	3304      	adds	r3, #4
 8003d56:	4619      	mov	r1, r3
 8003d58:	4610      	mov	r0, r2
 8003d5a:	f7fe f90b 	bl	8001f74 <vListInsert>
 8003d5e:	e012      	b.n	8003d86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d206      	bcs.n	8003d76 <prvInsertTimerInActiveList+0x62>
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e007      	b.n	8003d86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d76:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <prvInsertTimerInActiveList+0x80>)
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	4619      	mov	r1, r3
 8003d80:	4610      	mov	r0, r2
 8003d82:	f7fe f8f7 	bl	8001f74 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003d86:	697b      	ldr	r3, [r7, #20]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20000d1c 	.word	0x20000d1c
 8003d94:	20000d18 	.word	0x20000d18

08003d98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08e      	sub	sp, #56	; 0x38
 8003d9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d9e:	e09d      	b.n	8003edc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	da18      	bge.n	8003dd8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003da6:	1d3b      	adds	r3, r7, #4
 8003da8:	3304      	adds	r3, #4
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d10a      	bne.n	8003dc8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61fb      	str	r3, [r7, #28]
}
 8003dc4:	bf00      	nop
 8003dc6:	e7fe      	b.n	8003dc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dce:	6850      	ldr	r0, [r2, #4]
 8003dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd2:	6892      	ldr	r2, [r2, #8]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db7d      	blt.n	8003eda <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dec:	3304      	adds	r3, #4
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7fe f8f8 	bl	8001fe4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003df4:	463b      	mov	r3, r7
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ff6c 	bl	8003cd4 <prvSampleTimeNow>
 8003dfc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b09      	cmp	r3, #9
 8003e02:	d86b      	bhi.n	8003edc <prvProcessReceivedCommands+0x144>
 8003e04:	a201      	add	r2, pc, #4	; (adr r2, 8003e0c <prvProcessReceivedCommands+0x74>)
 8003e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0a:	bf00      	nop
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e35 	.word	0x08003e35
 8003e18:	08003edd 	.word	0x08003edd
 8003e1c:	08003e91 	.word	0x08003e91
 8003e20:	08003ec9 	.word	0x08003ec9
 8003e24:	08003e35 	.word	0x08003e35
 8003e28:	08003e35 	.word	0x08003e35
 8003e2c:	08003edd 	.word	0x08003edd
 8003e30:	08003e91 	.word	0x08003e91
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e38:	699b      	ldr	r3, [r3, #24]
 8003e3a:	18d1      	adds	r1, r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e42:	f7ff ff67 	bl	8003d14 <prvInsertTimerInActiveList>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d047      	beq.n	8003edc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e52:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d13f      	bne.n	8003edc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003e5c:	68ba      	ldr	r2, [r7, #8]
 8003e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	441a      	add	r2, r3
 8003e64:	2300      	movs	r3, #0
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e6e:	f7ff fe1f 	bl	8003ab0 <xTimerGenericCommand>
 8003e72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d130      	bne.n	8003edc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	61bb      	str	r3, [r7, #24]
}
 8003e8c:	bf00      	nop
 8003e8e:	e7fe      	b.n	8003e8e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e90:	68ba      	ldr	r2, [r7, #8]
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	617b      	str	r3, [r7, #20]
}
 8003eb0:	bf00      	nop
 8003eb2:	e7fe      	b.n	8003eb2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb6:	699a      	ldr	r2, [r3, #24]
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	18d1      	adds	r1, r2, r3
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec2:	f7ff ff27 	bl	8003d14 <prvInsertTimerInActiveList>
					break;
 8003ec6:	e009      	b.n	8003edc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d104      	bne.n	8003edc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8003ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ed4:	f000 fb6e 	bl	80045b4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003ed8:	e000      	b.n	8003edc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003eda:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <prvProcessReceivedCommands+0x164>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	1d39      	adds	r1, r7, #4
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fe fbe7 	bl	80026b8 <xQueueReceive>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f47f af57 	bne.w	8003da0 <prvProcessReceivedCommands+0x8>
	}
}
 8003ef2:	bf00      	nop
 8003ef4:	bf00      	nop
 8003ef6:	3730      	adds	r7, #48	; 0x30
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	20000d20 	.word	0x20000d20

08003f00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b088      	sub	sp, #32
 8003f04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f06:	e045      	b.n	8003f94 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f08:	4b2c      	ldr	r3, [pc, #176]	; (8003fbc <prvSwitchTimerLists+0xbc>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f12:	4b2a      	ldr	r3, [pc, #168]	; (8003fbc <prvSwitchTimerLists+0xbc>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3304      	adds	r3, #4
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe f85f 	bl	8001fe4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d12e      	bne.n	8003f94 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d90e      	bls.n	8003f66 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <prvSwitchTimerLists+0xbc>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7fe f808 	bl	8001f74 <vListInsert>
 8003f64:	e016      	b.n	8003f94 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f66:	2300      	movs	r3, #0
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	2100      	movs	r1, #0
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f7ff fd9d 	bl	8003ab0 <xTimerGenericCommand>
 8003f76:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10a      	bne.n	8003f94 <prvSwitchTimerLists+0x94>
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	603b      	str	r3, [r7, #0]
}
 8003f90:	bf00      	nop
 8003f92:	e7fe      	b.n	8003f92 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <prvSwitchTimerLists+0xbc>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1b4      	bne.n	8003f08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvSwitchTimerLists+0xbc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003fa4:	4b06      	ldr	r3, [pc, #24]	; (8003fc0 <prvSwitchTimerLists+0xc0>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a04      	ldr	r2, [pc, #16]	; (8003fbc <prvSwitchTimerLists+0xbc>)
 8003faa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <prvSwitchTimerLists+0xc0>)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	6013      	str	r3, [r2, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000d18 	.word	0x20000d18
 8003fc0:	20000d1c 	.word	0x20000d1c

08003fc4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003fca:	f000 f92f 	bl	800422c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003fce:	4b15      	ldr	r3, [pc, #84]	; (8004024 <prvCheckForValidListAndQueue+0x60>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d120      	bne.n	8004018 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003fd6:	4814      	ldr	r0, [pc, #80]	; (8004028 <prvCheckForValidListAndQueue+0x64>)
 8003fd8:	f7fd ff7e 	bl	8001ed8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003fdc:	4813      	ldr	r0, [pc, #76]	; (800402c <prvCheckForValidListAndQueue+0x68>)
 8003fde:	f7fd ff7b 	bl	8001ed8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003fe2:	4b13      	ldr	r3, [pc, #76]	; (8004030 <prvCheckForValidListAndQueue+0x6c>)
 8003fe4:	4a10      	ldr	r2, [pc, #64]	; (8004028 <prvCheckForValidListAndQueue+0x64>)
 8003fe6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003fe8:	4b12      	ldr	r3, [pc, #72]	; (8004034 <prvCheckForValidListAndQueue+0x70>)
 8003fea:	4a10      	ldr	r2, [pc, #64]	; (800402c <prvCheckForValidListAndQueue+0x68>)
 8003fec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <prvCheckForValidListAndQueue+0x74>)
 8003ff4:	4a11      	ldr	r2, [pc, #68]	; (800403c <prvCheckForValidListAndQueue+0x78>)
 8003ff6:	2110      	movs	r1, #16
 8003ff8:	200a      	movs	r0, #10
 8003ffa:	f7fe f885 	bl	8002108 <xQueueGenericCreateStatic>
 8003ffe:	4603      	mov	r3, r0
 8004000:	4a08      	ldr	r2, [pc, #32]	; (8004024 <prvCheckForValidListAndQueue+0x60>)
 8004002:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004004:	4b07      	ldr	r3, [pc, #28]	; (8004024 <prvCheckForValidListAndQueue+0x60>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <prvCheckForValidListAndQueue+0x60>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	490b      	ldr	r1, [pc, #44]	; (8004040 <prvCheckForValidListAndQueue+0x7c>)
 8004012:	4618      	mov	r0, r3
 8004014:	f7fe fd86 	bl	8002b24 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004018:	f000 f938 	bl	800428c <vPortExitCritical>
}
 800401c:	bf00      	nop
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000d20 	.word	0x20000d20
 8004028:	20000cf0 	.word	0x20000cf0
 800402c:	20000d04 	.word	0x20000d04
 8004030:	20000d18 	.word	0x20000d18
 8004034:	20000d1c 	.word	0x20000d1c
 8004038:	20000dcc 	.word	0x20000dcc
 800403c:	20000d2c 	.word	0x20000d2c
 8004040:	0800582c 	.word	0x0800582c

08004044 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	3b04      	subs	r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800405c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	3b04      	subs	r3, #4
 8004062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f023 0201 	bic.w	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	3b04      	subs	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004074:	4a08      	ldr	r2, [pc, #32]	; (8004098 <pxPortInitialiseStack+0x54>)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3b14      	subs	r3, #20
 800407e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3b20      	subs	r3, #32
 800408a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800408c:	68fb      	ldr	r3, [r7, #12]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	bc80      	pop	{r7}
 8004096:	4770      	bx	lr
 8004098:	0800409d 	.word	0x0800409d

0800409c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800409c:	b480      	push	{r7}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80040a6:	4b12      	ldr	r3, [pc, #72]	; (80040f0 <prvTaskExitError+0x54>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d00a      	beq.n	80040c6 <prvTaskExitError+0x2a>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60fb      	str	r3, [r7, #12]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <prvTaskExitError+0x28>
	__asm volatile
 80040c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ca:	f383 8811 	msr	BASEPRI, r3
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f3bf 8f4f 	dsb	sy
 80040d6:	60bb      	str	r3, [r7, #8]
}
 80040d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80040da:	bf00      	nop
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0fc      	beq.n	80040dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	2000000c 	.word	0x2000000c
	...

08004100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004100:	4b07      	ldr	r3, [pc, #28]	; (8004120 <pxCurrentTCBConst2>)
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	6808      	ldr	r0, [r1, #0]
 8004106:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800410a:	f380 8809 	msr	PSP, r0
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f04f 0000 	mov.w	r0, #0
 8004116:	f380 8811 	msr	BASEPRI, r0
 800411a:	f04e 0e0d 	orr.w	lr, lr, #13
 800411e:	4770      	bx	lr

08004120 <pxCurrentTCBConst2>:
 8004120:	200007f0 	.word	0x200007f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop

08004128 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004128:	4806      	ldr	r0, [pc, #24]	; (8004144 <prvPortStartFirstTask+0x1c>)
 800412a:	6800      	ldr	r0, [r0, #0]
 800412c:	6800      	ldr	r0, [r0, #0]
 800412e:	f380 8808 	msr	MSP, r0
 8004132:	b662      	cpsie	i
 8004134:	b661      	cpsie	f
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	df00      	svc	0
 8004140:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004142:	bf00      	nop
 8004144:	e000ed08 	.word	0xe000ed08

08004148 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800414e:	4b32      	ldr	r3, [pc, #200]	; (8004218 <xPortStartScheduler+0xd0>)
 8004150:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	22ff      	movs	r2, #255	; 0xff
 800415e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	b2db      	uxtb	r3, r3
 800416c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004170:	b2da      	uxtb	r2, r3
 8004172:	4b2a      	ldr	r3, [pc, #168]	; (800421c <xPortStartScheduler+0xd4>)
 8004174:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004176:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <xPortStartScheduler+0xd8>)
 8004178:	2207      	movs	r2, #7
 800417a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800417c:	e009      	b.n	8004192 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800417e:	4b28      	ldr	r3, [pc, #160]	; (8004220 <xPortStartScheduler+0xd8>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3b01      	subs	r3, #1
 8004184:	4a26      	ldr	r2, [pc, #152]	; (8004220 <xPortStartScheduler+0xd8>)
 8004186:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	b2db      	uxtb	r3, r3
 8004190:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b80      	cmp	r3, #128	; 0x80
 800419c:	d0ef      	beq.n	800417e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800419e:	4b20      	ldr	r3, [pc, #128]	; (8004220 <xPortStartScheduler+0xd8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f1c3 0307 	rsb	r3, r3, #7
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d00a      	beq.n	80041c0 <xPortStartScheduler+0x78>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	60bb      	str	r3, [r7, #8]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041c0:	4b17      	ldr	r3, [pc, #92]	; (8004220 <xPortStartScheduler+0xd8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	021b      	lsls	r3, r3, #8
 80041c6:	4a16      	ldr	r2, [pc, #88]	; (8004220 <xPortStartScheduler+0xd8>)
 80041c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <xPortStartScheduler+0xd8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041d2:	4a13      	ldr	r2, [pc, #76]	; (8004220 <xPortStartScheduler+0xd8>)
 80041d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	b2da      	uxtb	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041de:	4b11      	ldr	r3, [pc, #68]	; (8004224 <xPortStartScheduler+0xdc>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a10      	ldr	r2, [pc, #64]	; (8004224 <xPortStartScheduler+0xdc>)
 80041e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041ea:	4b0e      	ldr	r3, [pc, #56]	; (8004224 <xPortStartScheduler+0xdc>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a0d      	ldr	r2, [pc, #52]	; (8004224 <xPortStartScheduler+0xdc>)
 80041f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041f6:	f000 f8b9 	bl	800436c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041fa:	4b0b      	ldr	r3, [pc, #44]	; (8004228 <xPortStartScheduler+0xe0>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004200:	f7ff ff92 	bl	8004128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004204:	f7ff f8be 	bl	8003384 <vTaskSwitchContext>
	prvTaskExitError();
 8004208:	f7ff ff48 	bl	800409c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	e000e400 	.word	0xe000e400
 800421c:	20000e1c 	.word	0x20000e1c
 8004220:	20000e20 	.word	0x20000e20
 8004224:	e000ed20 	.word	0xe000ed20
 8004228:	2000000c 	.word	0x2000000c

0800422c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	607b      	str	r3, [r7, #4]
}
 8004244:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004246:	4b0f      	ldr	r3, [pc, #60]	; (8004284 <vPortEnterCritical+0x58>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3301      	adds	r3, #1
 800424c:	4a0d      	ldr	r2, [pc, #52]	; (8004284 <vPortEnterCritical+0x58>)
 800424e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <vPortEnterCritical+0x58>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10f      	bne.n	8004278 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004258:	4b0b      	ldr	r3, [pc, #44]	; (8004288 <vPortEnterCritical+0x5c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <vPortEnterCritical+0x4c>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	603b      	str	r3, [r7, #0]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <vPortEnterCritical+0x4a>
	}
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	bc80      	pop	{r7}
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	2000000c 	.word	0x2000000c
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004292:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <vPortExitCritical+0x4c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <vPortExitCritical+0x24>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	607b      	str	r3, [r7, #4]
}
 80042ac:	bf00      	nop
 80042ae:	e7fe      	b.n	80042ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042b0:	4b09      	ldr	r3, [pc, #36]	; (80042d8 <vPortExitCritical+0x4c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3b01      	subs	r3, #1
 80042b6:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <vPortExitCritical+0x4c>)
 80042b8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <vPortExitCritical+0x4c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <vPortExitCritical+0x42>
 80042c2:	2300      	movs	r3, #0
 80042c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	f383 8811 	msr	BASEPRI, r3
}
 80042cc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr
 80042d8:	2000000c 	.word	0x2000000c
 80042dc:	00000000 	.word	0x00000000

080042e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042e0:	f3ef 8009 	mrs	r0, PSP
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <pxCurrentTCBConst>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80042f0:	6010      	str	r0, [r2, #0]
 80042f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80042f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80042fa:	f380 8811 	msr	BASEPRI, r0
 80042fe:	f7ff f841 	bl	8003384 <vTaskSwitchContext>
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f380 8811 	msr	BASEPRI, r0
 800430a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800430e:	6819      	ldr	r1, [r3, #0]
 8004310:	6808      	ldr	r0, [r1, #0]
 8004312:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004316:	f380 8809 	msr	PSP, r0
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	4770      	bx	lr

08004320 <pxCurrentTCBConst>:
 8004320:	200007f0 	.word	0x200007f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	607b      	str	r3, [r7, #4]
}
 8004340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004342:	f7fe ff61 	bl	8003208 <xTaskIncrementTick>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <SysTick_Handler+0x40>)
 800434e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	f383 8811 	msr	BASEPRI, r3
}
 800435e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004370:	4b0a      	ldr	r3, [pc, #40]	; (800439c <vPortSetupTimerInterrupt+0x30>)
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <vPortSetupTimerInterrupt+0x34>)
 8004378:	2200      	movs	r2, #0
 800437a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <vPortSetupTimerInterrupt+0x38>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <vPortSetupTimerInterrupt+0x3c>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	099b      	lsrs	r3, r3, #6
 8004388:	4a08      	ldr	r2, [pc, #32]	; (80043ac <vPortSetupTimerInterrupt+0x40>)
 800438a:	3b01      	subs	r3, #1
 800438c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800438e:	4b03      	ldr	r3, [pc, #12]	; (800439c <vPortSetupTimerInterrupt+0x30>)
 8004390:	2207      	movs	r2, #7
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	46bd      	mov	sp, r7
 8004398:	bc80      	pop	{r7}
 800439a:	4770      	bx	lr
 800439c:	e000e010 	.word	0xe000e010
 80043a0:	e000e018 	.word	0xe000e018
 80043a4:	20000000 	.word	0x20000000
 80043a8:	10624dd3 	.word	0x10624dd3
 80043ac:	e000e014 	.word	0xe000e014

080043b0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043b6:	f3ef 8305 	mrs	r3, IPSR
 80043ba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2b0f      	cmp	r3, #15
 80043c0:	d914      	bls.n	80043ec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043c2:	4a16      	ldr	r2, [pc, #88]	; (800441c <vPortValidateInterruptPriority+0x6c>)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80043cc:	4b14      	ldr	r3, [pc, #80]	; (8004420 <vPortValidateInterruptPriority+0x70>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	7afa      	ldrb	r2, [r7, #11]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d20a      	bcs.n	80043ec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80043d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	f3bf 8f6f 	isb	sy
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	607b      	str	r3, [r7, #4]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <vPortValidateInterruptPriority+0x74>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <vPortValidateInterruptPriority+0x78>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d90a      	bls.n	8004412 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	603b      	str	r3, [r7, #0]
}
 800440e:	bf00      	nop
 8004410:	e7fe      	b.n	8004410 <vPortValidateInterruptPriority+0x60>
	}
 8004412:	bf00      	nop
 8004414:	3714      	adds	r7, #20
 8004416:	46bd      	mov	sp, r7
 8004418:	bc80      	pop	{r7}
 800441a:	4770      	bx	lr
 800441c:	e000e3f0 	.word	0xe000e3f0
 8004420:	20000e1c 	.word	0x20000e1c
 8004424:	e000ed0c 	.word	0xe000ed0c
 8004428:	20000e20 	.word	0x20000e20

0800442c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08a      	sub	sp, #40	; 0x28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004438:	f7fe fe2c 	bl	8003094 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800443c:	4b58      	ldr	r3, [pc, #352]	; (80045a0 <pvPortMalloc+0x174>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d101      	bne.n	8004448 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004444:	f000 f910 	bl	8004668 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004448:	4b56      	ldr	r3, [pc, #344]	; (80045a4 <pvPortMalloc+0x178>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4013      	ands	r3, r2
 8004450:	2b00      	cmp	r3, #0
 8004452:	f040 808e 	bne.w	8004572 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01d      	beq.n	8004498 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800445c:	2208      	movs	r2, #8
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	2b00      	cmp	r3, #0
 800446c:	d014      	beq.n	8004498 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f023 0307 	bic.w	r3, r3, #7
 8004474:	3308      	adds	r3, #8
 8004476:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00a      	beq.n	8004498 <pvPortMalloc+0x6c>
	__asm volatile
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	617b      	str	r3, [r7, #20]
}
 8004494:	bf00      	nop
 8004496:	e7fe      	b.n	8004496 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d069      	beq.n	8004572 <pvPortMalloc+0x146>
 800449e:	4b42      	ldr	r3, [pc, #264]	; (80045a8 <pvPortMalloc+0x17c>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d864      	bhi.n	8004572 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044a8:	4b40      	ldr	r3, [pc, #256]	; (80045ac <pvPortMalloc+0x180>)
 80044aa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044ac:	4b3f      	ldr	r3, [pc, #252]	; (80045ac <pvPortMalloc+0x180>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044b2:	e004      	b.n	80044be <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d903      	bls.n	80044d0 <pvPortMalloc+0xa4>
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f1      	bne.n	80044b4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044d0:	4b33      	ldr	r3, [pc, #204]	; (80045a0 <pvPortMalloc+0x174>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d04b      	beq.n	8004572 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2208      	movs	r2, #8
 80044e0:	4413      	add	r3, r2
 80044e2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	1ad2      	subs	r2, r2, r3
 80044f4:	2308      	movs	r3, #8
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d91f      	bls.n	800453c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <pvPortMalloc+0xf8>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	613b      	str	r3, [r7, #16]
}
 8004520:	bf00      	nop
 8004522:	e7fe      	b.n	8004522 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	1ad2      	subs	r2, r2, r3
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004536:	69b8      	ldr	r0, [r7, #24]
 8004538:	f000 f8f8 	bl	800472c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800453c:	4b1a      	ldr	r3, [pc, #104]	; (80045a8 <pvPortMalloc+0x17c>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	4a18      	ldr	r2, [pc, #96]	; (80045a8 <pvPortMalloc+0x17c>)
 8004548:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800454a:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <pvPortMalloc+0x17c>)
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	4b18      	ldr	r3, [pc, #96]	; (80045b0 <pvPortMalloc+0x184>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d203      	bcs.n	800455e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004556:	4b14      	ldr	r3, [pc, #80]	; (80045a8 <pvPortMalloc+0x17c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a15      	ldr	r2, [pc, #84]	; (80045b0 <pvPortMalloc+0x184>)
 800455c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <pvPortMalloc+0x178>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	431a      	orrs	r2, r3
 8004568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004572:	f7fe fd9d 	bl	80030b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <pvPortMalloc+0x16a>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	60fb      	str	r3, [r7, #12]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <pvPortMalloc+0x168>
	return pvReturn;
 8004596:	69fb      	ldr	r3, [r7, #28]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3728      	adds	r7, #40	; 0x28
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	20001a2c 	.word	0x20001a2c
 80045a4:	20001a38 	.word	0x20001a38
 80045a8:	20001a30 	.word	0x20001a30
 80045ac:	20001a24 	.word	0x20001a24
 80045b0:	20001a34 	.word	0x20001a34

080045b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d048      	beq.n	8004658 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045c6:	2308      	movs	r3, #8
 80045c8:	425b      	negs	r3, r3
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4413      	add	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	4b21      	ldr	r3, [pc, #132]	; (8004660 <vPortFree+0xac>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10a      	bne.n	80045f8 <vPortFree+0x44>
	__asm volatile
 80045e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e6:	f383 8811 	msr	BASEPRI, r3
 80045ea:	f3bf 8f6f 	isb	sy
 80045ee:	f3bf 8f4f 	dsb	sy
 80045f2:	60fb      	str	r3, [r7, #12]
}
 80045f4:	bf00      	nop
 80045f6:	e7fe      	b.n	80045f6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <vPortFree+0x62>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	60bb      	str	r3, [r7, #8]
}
 8004612:	bf00      	nop
 8004614:	e7fe      	b.n	8004614 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	4b11      	ldr	r3, [pc, #68]	; (8004660 <vPortFree+0xac>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4013      	ands	r3, r2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d019      	beq.n	8004658 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d115      	bne.n	8004658 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <vPortFree+0xac>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	43db      	mvns	r3, r3
 8004636:	401a      	ands	r2, r3
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800463c:	f7fe fd2a 	bl	8003094 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	4b07      	ldr	r3, [pc, #28]	; (8004664 <vPortFree+0xb0>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4413      	add	r3, r2
 800464a:	4a06      	ldr	r2, [pc, #24]	; (8004664 <vPortFree+0xb0>)
 800464c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800464e:	6938      	ldr	r0, [r7, #16]
 8004650:	f000 f86c 	bl	800472c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004654:	f7fe fd2c 	bl	80030b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	20001a38 	.word	0x20001a38
 8004664:	20001a30 	.word	0x20001a30

08004668 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800466e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004672:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <prvHeapInit+0xac>)
 8004676:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	3307      	adds	r3, #7
 8004686:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0307 	bic.w	r3, r3, #7
 800468e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004690:	68ba      	ldr	r2, [r7, #8]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	4a1f      	ldr	r2, [pc, #124]	; (8004714 <prvHeapInit+0xac>)
 8004698:	4413      	add	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046a0:	4a1d      	ldr	r2, [pc, #116]	; (8004718 <prvHeapInit+0xb0>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <prvHeapInit+0xb0>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	4413      	add	r3, r2
 80046b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046b4:	2208      	movs	r2, #8
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0307 	bic.w	r3, r3, #7
 80046c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <prvHeapInit+0xb4>)
 80046c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046ca:	4b14      	ldr	r3, [pc, #80]	; (800471c <prvHeapInit+0xb4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2200      	movs	r2, #0
 80046d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046d2:	4b12      	ldr	r3, [pc, #72]	; (800471c <prvHeapInit+0xb4>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	1ad2      	subs	r2, r2, r3
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <prvHeapInit+0xb4>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	4a0a      	ldr	r2, [pc, #40]	; (8004720 <prvHeapInit+0xb8>)
 80046f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	4a09      	ldr	r2, [pc, #36]	; (8004724 <prvHeapInit+0xbc>)
 80046fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004700:	4b09      	ldr	r3, [pc, #36]	; (8004728 <prvHeapInit+0xc0>)
 8004702:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004706:	601a      	str	r2, [r3, #0]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	20000e24 	.word	0x20000e24
 8004718:	20001a24 	.word	0x20001a24
 800471c:	20001a2c 	.word	0x20001a2c
 8004720:	20001a34 	.word	0x20001a34
 8004724:	20001a30 	.word	0x20001a30
 8004728:	20001a38 	.word	0x20001a38

0800472c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004734:	4b27      	ldr	r3, [pc, #156]	; (80047d4 <prvInsertBlockIntoFreeList+0xa8>)
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e002      	b.n	8004740 <prvInsertBlockIntoFreeList+0x14>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60fb      	str	r3, [r7, #12]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d8f7      	bhi.n	800473a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d108      	bne.n	800476e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	685a      	ldr	r2, [r3, #4]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	441a      	add	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	441a      	add	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	429a      	cmp	r2, r3
 8004780:	d118      	bne.n	80047b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	4b14      	ldr	r3, [pc, #80]	; (80047d8 <prvInsertBlockIntoFreeList+0xac>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d00d      	beq.n	80047aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	441a      	add	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e008      	b.n	80047bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <prvInsertBlockIntoFreeList+0xac>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	e003      	b.n	80047bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d002      	beq.n	80047ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr
 80047d4:	20001a24 	.word	0x20001a24
 80047d8:	20001a2c 	.word	0x20001a2c

080047dc <__errno>:
 80047dc:	4b01      	ldr	r3, [pc, #4]	; (80047e4 <__errno+0x8>)
 80047de:	6818      	ldr	r0, [r3, #0]
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000010 	.word	0x20000010

080047e8 <__libc_init_array>:
 80047e8:	b570      	push	{r4, r5, r6, lr}
 80047ea:	2600      	movs	r6, #0
 80047ec:	4d0c      	ldr	r5, [pc, #48]	; (8004820 <__libc_init_array+0x38>)
 80047ee:	4c0d      	ldr	r4, [pc, #52]	; (8004824 <__libc_init_array+0x3c>)
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	42a6      	cmp	r6, r4
 80047f6:	d109      	bne.n	800480c <__libc_init_array+0x24>
 80047f8:	f000 ffc4 	bl	8005784 <_init>
 80047fc:	2600      	movs	r6, #0
 80047fe:	4d0a      	ldr	r5, [pc, #40]	; (8004828 <__libc_init_array+0x40>)
 8004800:	4c0a      	ldr	r4, [pc, #40]	; (800482c <__libc_init_array+0x44>)
 8004802:	1b64      	subs	r4, r4, r5
 8004804:	10a4      	asrs	r4, r4, #2
 8004806:	42a6      	cmp	r6, r4
 8004808:	d105      	bne.n	8004816 <__libc_init_array+0x2e>
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004810:	4798      	blx	r3
 8004812:	3601      	adds	r6, #1
 8004814:	e7ee      	b.n	80047f4 <__libc_init_array+0xc>
 8004816:	f855 3b04 	ldr.w	r3, [r5], #4
 800481a:	4798      	blx	r3
 800481c:	3601      	adds	r6, #1
 800481e:	e7f2      	b.n	8004806 <__libc_init_array+0x1e>
 8004820:	08005968 	.word	0x08005968
 8004824:	08005968 	.word	0x08005968
 8004828:	08005968 	.word	0x08005968
 800482c:	0800596c 	.word	0x0800596c

08004830 <memcpy>:
 8004830:	440a      	add	r2, r1
 8004832:	4291      	cmp	r1, r2
 8004834:	f100 33ff 	add.w	r3, r0, #4294967295
 8004838:	d100      	bne.n	800483c <memcpy+0xc>
 800483a:	4770      	bx	lr
 800483c:	b510      	push	{r4, lr}
 800483e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004842:	4291      	cmp	r1, r2
 8004844:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004848:	d1f9      	bne.n	800483e <memcpy+0xe>
 800484a:	bd10      	pop	{r4, pc}

0800484c <memset>:
 800484c:	4603      	mov	r3, r0
 800484e:	4402      	add	r2, r0
 8004850:	4293      	cmp	r3, r2
 8004852:	d100      	bne.n	8004856 <memset+0xa>
 8004854:	4770      	bx	lr
 8004856:	f803 1b01 	strb.w	r1, [r3], #1
 800485a:	e7f9      	b.n	8004850 <memset+0x4>

0800485c <iprintf>:
 800485c:	b40f      	push	{r0, r1, r2, r3}
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <iprintf+0x2c>)
 8004860:	b513      	push	{r0, r1, r4, lr}
 8004862:	681c      	ldr	r4, [r3, #0]
 8004864:	b124      	cbz	r4, 8004870 <iprintf+0x14>
 8004866:	69a3      	ldr	r3, [r4, #24]
 8004868:	b913      	cbnz	r3, 8004870 <iprintf+0x14>
 800486a:	4620      	mov	r0, r4
 800486c:	f000 f866 	bl	800493c <__sinit>
 8004870:	ab05      	add	r3, sp, #20
 8004872:	4620      	mov	r0, r4
 8004874:	9a04      	ldr	r2, [sp, #16]
 8004876:	68a1      	ldr	r1, [r4, #8]
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	f000 f9bb 	bl	8004bf4 <_vfiprintf_r>
 800487e:	b002      	add	sp, #8
 8004880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004884:	b004      	add	sp, #16
 8004886:	4770      	bx	lr
 8004888:	20000010 	.word	0x20000010

0800488c <std>:
 800488c:	2300      	movs	r3, #0
 800488e:	b510      	push	{r4, lr}
 8004890:	4604      	mov	r4, r0
 8004892:	e9c0 3300 	strd	r3, r3, [r0]
 8004896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800489a:	6083      	str	r3, [r0, #8]
 800489c:	8181      	strh	r1, [r0, #12]
 800489e:	6643      	str	r3, [r0, #100]	; 0x64
 80048a0:	81c2      	strh	r2, [r0, #14]
 80048a2:	6183      	str	r3, [r0, #24]
 80048a4:	4619      	mov	r1, r3
 80048a6:	2208      	movs	r2, #8
 80048a8:	305c      	adds	r0, #92	; 0x5c
 80048aa:	f7ff ffcf 	bl	800484c <memset>
 80048ae:	4b05      	ldr	r3, [pc, #20]	; (80048c4 <std+0x38>)
 80048b0:	6224      	str	r4, [r4, #32]
 80048b2:	6263      	str	r3, [r4, #36]	; 0x24
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <std+0x3c>)
 80048b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80048b8:	4b04      	ldr	r3, [pc, #16]	; (80048cc <std+0x40>)
 80048ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <std+0x44>)
 80048be:	6323      	str	r3, [r4, #48]	; 0x30
 80048c0:	bd10      	pop	{r4, pc}
 80048c2:	bf00      	nop
 80048c4:	080051a1 	.word	0x080051a1
 80048c8:	080051c3 	.word	0x080051c3
 80048cc:	080051fb 	.word	0x080051fb
 80048d0:	0800521f 	.word	0x0800521f

080048d4 <_cleanup_r>:
 80048d4:	4901      	ldr	r1, [pc, #4]	; (80048dc <_cleanup_r+0x8>)
 80048d6:	f000 b8af 	b.w	8004a38 <_fwalk_reent>
 80048da:	bf00      	nop
 80048dc:	080054f1 	.word	0x080054f1

080048e0 <__sfmoreglue>:
 80048e0:	2268      	movs	r2, #104	; 0x68
 80048e2:	b570      	push	{r4, r5, r6, lr}
 80048e4:	1e4d      	subs	r5, r1, #1
 80048e6:	4355      	muls	r5, r2
 80048e8:	460e      	mov	r6, r1
 80048ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048ee:	f000 f8e5 	bl	8004abc <_malloc_r>
 80048f2:	4604      	mov	r4, r0
 80048f4:	b140      	cbz	r0, 8004908 <__sfmoreglue+0x28>
 80048f6:	2100      	movs	r1, #0
 80048f8:	e9c0 1600 	strd	r1, r6, [r0]
 80048fc:	300c      	adds	r0, #12
 80048fe:	60a0      	str	r0, [r4, #8]
 8004900:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004904:	f7ff ffa2 	bl	800484c <memset>
 8004908:	4620      	mov	r0, r4
 800490a:	bd70      	pop	{r4, r5, r6, pc}

0800490c <__sfp_lock_acquire>:
 800490c:	4801      	ldr	r0, [pc, #4]	; (8004914 <__sfp_lock_acquire+0x8>)
 800490e:	f000 b8b3 	b.w	8004a78 <__retarget_lock_acquire_recursive>
 8004912:	bf00      	nop
 8004914:	20001a3d 	.word	0x20001a3d

08004918 <__sfp_lock_release>:
 8004918:	4801      	ldr	r0, [pc, #4]	; (8004920 <__sfp_lock_release+0x8>)
 800491a:	f000 b8ae 	b.w	8004a7a <__retarget_lock_release_recursive>
 800491e:	bf00      	nop
 8004920:	20001a3d 	.word	0x20001a3d

08004924 <__sinit_lock_acquire>:
 8004924:	4801      	ldr	r0, [pc, #4]	; (800492c <__sinit_lock_acquire+0x8>)
 8004926:	f000 b8a7 	b.w	8004a78 <__retarget_lock_acquire_recursive>
 800492a:	bf00      	nop
 800492c:	20001a3e 	.word	0x20001a3e

08004930 <__sinit_lock_release>:
 8004930:	4801      	ldr	r0, [pc, #4]	; (8004938 <__sinit_lock_release+0x8>)
 8004932:	f000 b8a2 	b.w	8004a7a <__retarget_lock_release_recursive>
 8004936:	bf00      	nop
 8004938:	20001a3e 	.word	0x20001a3e

0800493c <__sinit>:
 800493c:	b510      	push	{r4, lr}
 800493e:	4604      	mov	r4, r0
 8004940:	f7ff fff0 	bl	8004924 <__sinit_lock_acquire>
 8004944:	69a3      	ldr	r3, [r4, #24]
 8004946:	b11b      	cbz	r3, 8004950 <__sinit+0x14>
 8004948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800494c:	f7ff bff0 	b.w	8004930 <__sinit_lock_release>
 8004950:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004954:	6523      	str	r3, [r4, #80]	; 0x50
 8004956:	4b13      	ldr	r3, [pc, #76]	; (80049a4 <__sinit+0x68>)
 8004958:	4a13      	ldr	r2, [pc, #76]	; (80049a8 <__sinit+0x6c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	62a2      	str	r2, [r4, #40]	; 0x28
 800495e:	42a3      	cmp	r3, r4
 8004960:	bf08      	it	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	4620      	mov	r0, r4
 8004966:	bf08      	it	eq
 8004968:	61a3      	streq	r3, [r4, #24]
 800496a:	f000 f81f 	bl	80049ac <__sfp>
 800496e:	6060      	str	r0, [r4, #4]
 8004970:	4620      	mov	r0, r4
 8004972:	f000 f81b 	bl	80049ac <__sfp>
 8004976:	60a0      	str	r0, [r4, #8]
 8004978:	4620      	mov	r0, r4
 800497a:	f000 f817 	bl	80049ac <__sfp>
 800497e:	2200      	movs	r2, #0
 8004980:	2104      	movs	r1, #4
 8004982:	60e0      	str	r0, [r4, #12]
 8004984:	6860      	ldr	r0, [r4, #4]
 8004986:	f7ff ff81 	bl	800488c <std>
 800498a:	2201      	movs	r2, #1
 800498c:	2109      	movs	r1, #9
 800498e:	68a0      	ldr	r0, [r4, #8]
 8004990:	f7ff ff7c 	bl	800488c <std>
 8004994:	2202      	movs	r2, #2
 8004996:	2112      	movs	r1, #18
 8004998:	68e0      	ldr	r0, [r4, #12]
 800499a:	f7ff ff77 	bl	800488c <std>
 800499e:	2301      	movs	r3, #1
 80049a0:	61a3      	str	r3, [r4, #24]
 80049a2:	e7d1      	b.n	8004948 <__sinit+0xc>
 80049a4:	080058d0 	.word	0x080058d0
 80049a8:	080048d5 	.word	0x080048d5

080049ac <__sfp>:
 80049ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ae:	4607      	mov	r7, r0
 80049b0:	f7ff ffac 	bl	800490c <__sfp_lock_acquire>
 80049b4:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <__sfp+0x84>)
 80049b6:	681e      	ldr	r6, [r3, #0]
 80049b8:	69b3      	ldr	r3, [r6, #24]
 80049ba:	b913      	cbnz	r3, 80049c2 <__sfp+0x16>
 80049bc:	4630      	mov	r0, r6
 80049be:	f7ff ffbd 	bl	800493c <__sinit>
 80049c2:	3648      	adds	r6, #72	; 0x48
 80049c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	d503      	bpl.n	80049d4 <__sfp+0x28>
 80049cc:	6833      	ldr	r3, [r6, #0]
 80049ce:	b30b      	cbz	r3, 8004a14 <__sfp+0x68>
 80049d0:	6836      	ldr	r6, [r6, #0]
 80049d2:	e7f7      	b.n	80049c4 <__sfp+0x18>
 80049d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049d8:	b9d5      	cbnz	r5, 8004a10 <__sfp+0x64>
 80049da:	4b16      	ldr	r3, [pc, #88]	; (8004a34 <__sfp+0x88>)
 80049dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049e0:	60e3      	str	r3, [r4, #12]
 80049e2:	6665      	str	r5, [r4, #100]	; 0x64
 80049e4:	f000 f847 	bl	8004a76 <__retarget_lock_init_recursive>
 80049e8:	f7ff ff96 	bl	8004918 <__sfp_lock_release>
 80049ec:	2208      	movs	r2, #8
 80049ee:	4629      	mov	r1, r5
 80049f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049f8:	6025      	str	r5, [r4, #0]
 80049fa:	61a5      	str	r5, [r4, #24]
 80049fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a00:	f7ff ff24 	bl	800484c <memset>
 8004a04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a10:	3468      	adds	r4, #104	; 0x68
 8004a12:	e7d9      	b.n	80049c8 <__sfp+0x1c>
 8004a14:	2104      	movs	r1, #4
 8004a16:	4638      	mov	r0, r7
 8004a18:	f7ff ff62 	bl	80048e0 <__sfmoreglue>
 8004a1c:	4604      	mov	r4, r0
 8004a1e:	6030      	str	r0, [r6, #0]
 8004a20:	2800      	cmp	r0, #0
 8004a22:	d1d5      	bne.n	80049d0 <__sfp+0x24>
 8004a24:	f7ff ff78 	bl	8004918 <__sfp_lock_release>
 8004a28:	230c      	movs	r3, #12
 8004a2a:	603b      	str	r3, [r7, #0]
 8004a2c:	e7ee      	b.n	8004a0c <__sfp+0x60>
 8004a2e:	bf00      	nop
 8004a30:	080058d0 	.word	0x080058d0
 8004a34:	ffff0001 	.word	0xffff0001

08004a38 <_fwalk_reent>:
 8004a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a3c:	4606      	mov	r6, r0
 8004a3e:	4688      	mov	r8, r1
 8004a40:	2700      	movs	r7, #0
 8004a42:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a4a:	f1b9 0901 	subs.w	r9, r9, #1
 8004a4e:	d505      	bpl.n	8004a5c <_fwalk_reent+0x24>
 8004a50:	6824      	ldr	r4, [r4, #0]
 8004a52:	2c00      	cmp	r4, #0
 8004a54:	d1f7      	bne.n	8004a46 <_fwalk_reent+0xe>
 8004a56:	4638      	mov	r0, r7
 8004a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a5c:	89ab      	ldrh	r3, [r5, #12]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d907      	bls.n	8004a72 <_fwalk_reent+0x3a>
 8004a62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a66:	3301      	adds	r3, #1
 8004a68:	d003      	beq.n	8004a72 <_fwalk_reent+0x3a>
 8004a6a:	4629      	mov	r1, r5
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	47c0      	blx	r8
 8004a70:	4307      	orrs	r7, r0
 8004a72:	3568      	adds	r5, #104	; 0x68
 8004a74:	e7e9      	b.n	8004a4a <_fwalk_reent+0x12>

08004a76 <__retarget_lock_init_recursive>:
 8004a76:	4770      	bx	lr

08004a78 <__retarget_lock_acquire_recursive>:
 8004a78:	4770      	bx	lr

08004a7a <__retarget_lock_release_recursive>:
 8004a7a:	4770      	bx	lr

08004a7c <sbrk_aligned>:
 8004a7c:	b570      	push	{r4, r5, r6, lr}
 8004a7e:	4e0e      	ldr	r6, [pc, #56]	; (8004ab8 <sbrk_aligned+0x3c>)
 8004a80:	460c      	mov	r4, r1
 8004a82:	6831      	ldr	r1, [r6, #0]
 8004a84:	4605      	mov	r5, r0
 8004a86:	b911      	cbnz	r1, 8004a8e <sbrk_aligned+0x12>
 8004a88:	f000 fb7a 	bl	8005180 <_sbrk_r>
 8004a8c:	6030      	str	r0, [r6, #0]
 8004a8e:	4621      	mov	r1, r4
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 fb75 	bl	8005180 <_sbrk_r>
 8004a96:	1c43      	adds	r3, r0, #1
 8004a98:	d00a      	beq.n	8004ab0 <sbrk_aligned+0x34>
 8004a9a:	1cc4      	adds	r4, r0, #3
 8004a9c:	f024 0403 	bic.w	r4, r4, #3
 8004aa0:	42a0      	cmp	r0, r4
 8004aa2:	d007      	beq.n	8004ab4 <sbrk_aligned+0x38>
 8004aa4:	1a21      	subs	r1, r4, r0
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f000 fb6a 	bl	8005180 <_sbrk_r>
 8004aac:	3001      	adds	r0, #1
 8004aae:	d101      	bne.n	8004ab4 <sbrk_aligned+0x38>
 8004ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	bd70      	pop	{r4, r5, r6, pc}
 8004ab8:	20001a44 	.word	0x20001a44

08004abc <_malloc_r>:
 8004abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ac0:	1ccd      	adds	r5, r1, #3
 8004ac2:	f025 0503 	bic.w	r5, r5, #3
 8004ac6:	3508      	adds	r5, #8
 8004ac8:	2d0c      	cmp	r5, #12
 8004aca:	bf38      	it	cc
 8004acc:	250c      	movcc	r5, #12
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	db01      	blt.n	8004ad8 <_malloc_r+0x1c>
 8004ad4:	42a9      	cmp	r1, r5
 8004ad6:	d905      	bls.n	8004ae4 <_malloc_r+0x28>
 8004ad8:	230c      	movs	r3, #12
 8004ada:	2600      	movs	r6, #0
 8004adc:	603b      	str	r3, [r7, #0]
 8004ade:	4630      	mov	r0, r6
 8004ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae4:	4e2e      	ldr	r6, [pc, #184]	; (8004ba0 <_malloc_r+0xe4>)
 8004ae6:	f000 fdc5 	bl	8005674 <__malloc_lock>
 8004aea:	6833      	ldr	r3, [r6, #0]
 8004aec:	461c      	mov	r4, r3
 8004aee:	bb34      	cbnz	r4, 8004b3e <_malloc_r+0x82>
 8004af0:	4629      	mov	r1, r5
 8004af2:	4638      	mov	r0, r7
 8004af4:	f7ff ffc2 	bl	8004a7c <sbrk_aligned>
 8004af8:	1c43      	adds	r3, r0, #1
 8004afa:	4604      	mov	r4, r0
 8004afc:	d14d      	bne.n	8004b9a <_malloc_r+0xde>
 8004afe:	6834      	ldr	r4, [r6, #0]
 8004b00:	4626      	mov	r6, r4
 8004b02:	2e00      	cmp	r6, #0
 8004b04:	d140      	bne.n	8004b88 <_malloc_r+0xcc>
 8004b06:	6823      	ldr	r3, [r4, #0]
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	eb04 0803 	add.w	r8, r4, r3
 8004b10:	f000 fb36 	bl	8005180 <_sbrk_r>
 8004b14:	4580      	cmp	r8, r0
 8004b16:	d13a      	bne.n	8004b8e <_malloc_r+0xd2>
 8004b18:	6821      	ldr	r1, [r4, #0]
 8004b1a:	3503      	adds	r5, #3
 8004b1c:	1a6d      	subs	r5, r5, r1
 8004b1e:	f025 0503 	bic.w	r5, r5, #3
 8004b22:	3508      	adds	r5, #8
 8004b24:	2d0c      	cmp	r5, #12
 8004b26:	bf38      	it	cc
 8004b28:	250c      	movcc	r5, #12
 8004b2a:	4638      	mov	r0, r7
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	f7ff ffa5 	bl	8004a7c <sbrk_aligned>
 8004b32:	3001      	adds	r0, #1
 8004b34:	d02b      	beq.n	8004b8e <_malloc_r+0xd2>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	442b      	add	r3, r5
 8004b3a:	6023      	str	r3, [r4, #0]
 8004b3c:	e00e      	b.n	8004b5c <_malloc_r+0xa0>
 8004b3e:	6822      	ldr	r2, [r4, #0]
 8004b40:	1b52      	subs	r2, r2, r5
 8004b42:	d41e      	bmi.n	8004b82 <_malloc_r+0xc6>
 8004b44:	2a0b      	cmp	r2, #11
 8004b46:	d916      	bls.n	8004b76 <_malloc_r+0xba>
 8004b48:	1961      	adds	r1, r4, r5
 8004b4a:	42a3      	cmp	r3, r4
 8004b4c:	6025      	str	r5, [r4, #0]
 8004b4e:	bf18      	it	ne
 8004b50:	6059      	strne	r1, [r3, #4]
 8004b52:	6863      	ldr	r3, [r4, #4]
 8004b54:	bf08      	it	eq
 8004b56:	6031      	streq	r1, [r6, #0]
 8004b58:	5162      	str	r2, [r4, r5]
 8004b5a:	604b      	str	r3, [r1, #4]
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	f104 060b 	add.w	r6, r4, #11
 8004b62:	f000 fd8d 	bl	8005680 <__malloc_unlock>
 8004b66:	f026 0607 	bic.w	r6, r6, #7
 8004b6a:	1d23      	adds	r3, r4, #4
 8004b6c:	1af2      	subs	r2, r6, r3
 8004b6e:	d0b6      	beq.n	8004ade <_malloc_r+0x22>
 8004b70:	1b9b      	subs	r3, r3, r6
 8004b72:	50a3      	str	r3, [r4, r2]
 8004b74:	e7b3      	b.n	8004ade <_malloc_r+0x22>
 8004b76:	6862      	ldr	r2, [r4, #4]
 8004b78:	42a3      	cmp	r3, r4
 8004b7a:	bf0c      	ite	eq
 8004b7c:	6032      	streq	r2, [r6, #0]
 8004b7e:	605a      	strne	r2, [r3, #4]
 8004b80:	e7ec      	b.n	8004b5c <_malloc_r+0xa0>
 8004b82:	4623      	mov	r3, r4
 8004b84:	6864      	ldr	r4, [r4, #4]
 8004b86:	e7b2      	b.n	8004aee <_malloc_r+0x32>
 8004b88:	4634      	mov	r4, r6
 8004b8a:	6876      	ldr	r6, [r6, #4]
 8004b8c:	e7b9      	b.n	8004b02 <_malloc_r+0x46>
 8004b8e:	230c      	movs	r3, #12
 8004b90:	4638      	mov	r0, r7
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	f000 fd74 	bl	8005680 <__malloc_unlock>
 8004b98:	e7a1      	b.n	8004ade <_malloc_r+0x22>
 8004b9a:	6025      	str	r5, [r4, #0]
 8004b9c:	e7de      	b.n	8004b5c <_malloc_r+0xa0>
 8004b9e:	bf00      	nop
 8004ba0:	20001a40 	.word	0x20001a40

08004ba4 <__sfputc_r>:
 8004ba4:	6893      	ldr	r3, [r2, #8]
 8004ba6:	b410      	push	{r4}
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	6093      	str	r3, [r2, #8]
 8004bae:	da07      	bge.n	8004bc0 <__sfputc_r+0x1c>
 8004bb0:	6994      	ldr	r4, [r2, #24]
 8004bb2:	42a3      	cmp	r3, r4
 8004bb4:	db01      	blt.n	8004bba <__sfputc_r+0x16>
 8004bb6:	290a      	cmp	r1, #10
 8004bb8:	d102      	bne.n	8004bc0 <__sfputc_r+0x1c>
 8004bba:	bc10      	pop	{r4}
 8004bbc:	f000 bb34 	b.w	8005228 <__swbuf_r>
 8004bc0:	6813      	ldr	r3, [r2, #0]
 8004bc2:	1c58      	adds	r0, r3, #1
 8004bc4:	6010      	str	r0, [r2, #0]
 8004bc6:	7019      	strb	r1, [r3, #0]
 8004bc8:	4608      	mov	r0, r1
 8004bca:	bc10      	pop	{r4}
 8004bcc:	4770      	bx	lr

08004bce <__sfputs_r>:
 8004bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd0:	4606      	mov	r6, r0
 8004bd2:	460f      	mov	r7, r1
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	18d5      	adds	r5, r2, r3
 8004bd8:	42ac      	cmp	r4, r5
 8004bda:	d101      	bne.n	8004be0 <__sfputs_r+0x12>
 8004bdc:	2000      	movs	r0, #0
 8004bde:	e007      	b.n	8004bf0 <__sfputs_r+0x22>
 8004be0:	463a      	mov	r2, r7
 8004be2:	4630      	mov	r0, r6
 8004be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be8:	f7ff ffdc 	bl	8004ba4 <__sfputc_r>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d1f3      	bne.n	8004bd8 <__sfputs_r+0xa>
 8004bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bf4 <_vfiprintf_r>:
 8004bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf8:	460d      	mov	r5, r1
 8004bfa:	4614      	mov	r4, r2
 8004bfc:	4698      	mov	r8, r3
 8004bfe:	4606      	mov	r6, r0
 8004c00:	b09d      	sub	sp, #116	; 0x74
 8004c02:	b118      	cbz	r0, 8004c0c <_vfiprintf_r+0x18>
 8004c04:	6983      	ldr	r3, [r0, #24]
 8004c06:	b90b      	cbnz	r3, 8004c0c <_vfiprintf_r+0x18>
 8004c08:	f7ff fe98 	bl	800493c <__sinit>
 8004c0c:	4b89      	ldr	r3, [pc, #548]	; (8004e34 <_vfiprintf_r+0x240>)
 8004c0e:	429d      	cmp	r5, r3
 8004c10:	d11b      	bne.n	8004c4a <_vfiprintf_r+0x56>
 8004c12:	6875      	ldr	r5, [r6, #4]
 8004c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c16:	07d9      	lsls	r1, r3, #31
 8004c18:	d405      	bmi.n	8004c26 <_vfiprintf_r+0x32>
 8004c1a:	89ab      	ldrh	r3, [r5, #12]
 8004c1c:	059a      	lsls	r2, r3, #22
 8004c1e:	d402      	bmi.n	8004c26 <_vfiprintf_r+0x32>
 8004c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c22:	f7ff ff29 	bl	8004a78 <__retarget_lock_acquire_recursive>
 8004c26:	89ab      	ldrh	r3, [r5, #12]
 8004c28:	071b      	lsls	r3, r3, #28
 8004c2a:	d501      	bpl.n	8004c30 <_vfiprintf_r+0x3c>
 8004c2c:	692b      	ldr	r3, [r5, #16]
 8004c2e:	b9eb      	cbnz	r3, 8004c6c <_vfiprintf_r+0x78>
 8004c30:	4629      	mov	r1, r5
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 fb5c 	bl	80052f0 <__swsetup_r>
 8004c38:	b1c0      	cbz	r0, 8004c6c <_vfiprintf_r+0x78>
 8004c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c3c:	07dc      	lsls	r4, r3, #31
 8004c3e:	d50e      	bpl.n	8004c5e <_vfiprintf_r+0x6a>
 8004c40:	f04f 30ff 	mov.w	r0, #4294967295
 8004c44:	b01d      	add	sp, #116	; 0x74
 8004c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c4a:	4b7b      	ldr	r3, [pc, #492]	; (8004e38 <_vfiprintf_r+0x244>)
 8004c4c:	429d      	cmp	r5, r3
 8004c4e:	d101      	bne.n	8004c54 <_vfiprintf_r+0x60>
 8004c50:	68b5      	ldr	r5, [r6, #8]
 8004c52:	e7df      	b.n	8004c14 <_vfiprintf_r+0x20>
 8004c54:	4b79      	ldr	r3, [pc, #484]	; (8004e3c <_vfiprintf_r+0x248>)
 8004c56:	429d      	cmp	r5, r3
 8004c58:	bf08      	it	eq
 8004c5a:	68f5      	ldreq	r5, [r6, #12]
 8004c5c:	e7da      	b.n	8004c14 <_vfiprintf_r+0x20>
 8004c5e:	89ab      	ldrh	r3, [r5, #12]
 8004c60:	0598      	lsls	r0, r3, #22
 8004c62:	d4ed      	bmi.n	8004c40 <_vfiprintf_r+0x4c>
 8004c64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c66:	f7ff ff08 	bl	8004a7a <__retarget_lock_release_recursive>
 8004c6a:	e7e9      	b.n	8004c40 <_vfiprintf_r+0x4c>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c70:	2320      	movs	r3, #32
 8004c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c76:	2330      	movs	r3, #48	; 0x30
 8004c78:	f04f 0901 	mov.w	r9, #1
 8004c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c80:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004e40 <_vfiprintf_r+0x24c>
 8004c84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c88:	4623      	mov	r3, r4
 8004c8a:	469a      	mov	sl, r3
 8004c8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c90:	b10a      	cbz	r2, 8004c96 <_vfiprintf_r+0xa2>
 8004c92:	2a25      	cmp	r2, #37	; 0x25
 8004c94:	d1f9      	bne.n	8004c8a <_vfiprintf_r+0x96>
 8004c96:	ebba 0b04 	subs.w	fp, sl, r4
 8004c9a:	d00b      	beq.n	8004cb4 <_vfiprintf_r+0xc0>
 8004c9c:	465b      	mov	r3, fp
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	f7ff ff93 	bl	8004bce <__sfputs_r>
 8004ca8:	3001      	adds	r0, #1
 8004caa:	f000 80aa 	beq.w	8004e02 <_vfiprintf_r+0x20e>
 8004cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cb0:	445a      	add	r2, fp
 8004cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8004cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80a2 	beq.w	8004e02 <_vfiprintf_r+0x20e>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cc8:	f10a 0a01 	add.w	sl, sl, #1
 8004ccc:	9304      	str	r3, [sp, #16]
 8004cce:	9307      	str	r3, [sp, #28]
 8004cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004cd4:	931a      	str	r3, [sp, #104]	; 0x68
 8004cd6:	4654      	mov	r4, sl
 8004cd8:	2205      	movs	r2, #5
 8004cda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cde:	4858      	ldr	r0, [pc, #352]	; (8004e40 <_vfiprintf_r+0x24c>)
 8004ce0:	f000 fcba 	bl	8005658 <memchr>
 8004ce4:	9a04      	ldr	r2, [sp, #16]
 8004ce6:	b9d8      	cbnz	r0, 8004d20 <_vfiprintf_r+0x12c>
 8004ce8:	06d1      	lsls	r1, r2, #27
 8004cea:	bf44      	itt	mi
 8004cec:	2320      	movmi	r3, #32
 8004cee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cf2:	0713      	lsls	r3, r2, #28
 8004cf4:	bf44      	itt	mi
 8004cf6:	232b      	movmi	r3, #43	; 0x2b
 8004cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8004d00:	2b2a      	cmp	r3, #42	; 0x2a
 8004d02:	d015      	beq.n	8004d30 <_vfiprintf_r+0x13c>
 8004d04:	4654      	mov	r4, sl
 8004d06:	2000      	movs	r0, #0
 8004d08:	f04f 0c0a 	mov.w	ip, #10
 8004d0c:	9a07      	ldr	r2, [sp, #28]
 8004d0e:	4621      	mov	r1, r4
 8004d10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d14:	3b30      	subs	r3, #48	; 0x30
 8004d16:	2b09      	cmp	r3, #9
 8004d18:	d94e      	bls.n	8004db8 <_vfiprintf_r+0x1c4>
 8004d1a:	b1b0      	cbz	r0, 8004d4a <_vfiprintf_r+0x156>
 8004d1c:	9207      	str	r2, [sp, #28]
 8004d1e:	e014      	b.n	8004d4a <_vfiprintf_r+0x156>
 8004d20:	eba0 0308 	sub.w	r3, r0, r8
 8004d24:	fa09 f303 	lsl.w	r3, r9, r3
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	46a2      	mov	sl, r4
 8004d2c:	9304      	str	r3, [sp, #16]
 8004d2e:	e7d2      	b.n	8004cd6 <_vfiprintf_r+0xe2>
 8004d30:	9b03      	ldr	r3, [sp, #12]
 8004d32:	1d19      	adds	r1, r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	9103      	str	r1, [sp, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	bfbb      	ittet	lt
 8004d3c:	425b      	neglt	r3, r3
 8004d3e:	f042 0202 	orrlt.w	r2, r2, #2
 8004d42:	9307      	strge	r3, [sp, #28]
 8004d44:	9307      	strlt	r3, [sp, #28]
 8004d46:	bfb8      	it	lt
 8004d48:	9204      	strlt	r2, [sp, #16]
 8004d4a:	7823      	ldrb	r3, [r4, #0]
 8004d4c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d4e:	d10c      	bne.n	8004d6a <_vfiprintf_r+0x176>
 8004d50:	7863      	ldrb	r3, [r4, #1]
 8004d52:	2b2a      	cmp	r3, #42	; 0x2a
 8004d54:	d135      	bne.n	8004dc2 <_vfiprintf_r+0x1ce>
 8004d56:	9b03      	ldr	r3, [sp, #12]
 8004d58:	3402      	adds	r4, #2
 8004d5a:	1d1a      	adds	r2, r3, #4
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	9203      	str	r2, [sp, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	bfb8      	it	lt
 8004d64:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d68:	9305      	str	r3, [sp, #20]
 8004d6a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004e44 <_vfiprintf_r+0x250>
 8004d6e:	2203      	movs	r2, #3
 8004d70:	4650      	mov	r0, sl
 8004d72:	7821      	ldrb	r1, [r4, #0]
 8004d74:	f000 fc70 	bl	8005658 <memchr>
 8004d78:	b140      	cbz	r0, 8004d8c <_vfiprintf_r+0x198>
 8004d7a:	2340      	movs	r3, #64	; 0x40
 8004d7c:	eba0 000a 	sub.w	r0, r0, sl
 8004d80:	fa03 f000 	lsl.w	r0, r3, r0
 8004d84:	9b04      	ldr	r3, [sp, #16]
 8004d86:	3401      	adds	r4, #1
 8004d88:	4303      	orrs	r3, r0
 8004d8a:	9304      	str	r3, [sp, #16]
 8004d8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d90:	2206      	movs	r2, #6
 8004d92:	482d      	ldr	r0, [pc, #180]	; (8004e48 <_vfiprintf_r+0x254>)
 8004d94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d98:	f000 fc5e 	bl	8005658 <memchr>
 8004d9c:	2800      	cmp	r0, #0
 8004d9e:	d03f      	beq.n	8004e20 <_vfiprintf_r+0x22c>
 8004da0:	4b2a      	ldr	r3, [pc, #168]	; (8004e4c <_vfiprintf_r+0x258>)
 8004da2:	bb1b      	cbnz	r3, 8004dec <_vfiprintf_r+0x1f8>
 8004da4:	9b03      	ldr	r3, [sp, #12]
 8004da6:	3307      	adds	r3, #7
 8004da8:	f023 0307 	bic.w	r3, r3, #7
 8004dac:	3308      	adds	r3, #8
 8004dae:	9303      	str	r3, [sp, #12]
 8004db0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db2:	443b      	add	r3, r7
 8004db4:	9309      	str	r3, [sp, #36]	; 0x24
 8004db6:	e767      	b.n	8004c88 <_vfiprintf_r+0x94>
 8004db8:	460c      	mov	r4, r1
 8004dba:	2001      	movs	r0, #1
 8004dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004dc0:	e7a5      	b.n	8004d0e <_vfiprintf_r+0x11a>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	f04f 0c0a 	mov.w	ip, #10
 8004dc8:	4619      	mov	r1, r3
 8004dca:	3401      	adds	r4, #1
 8004dcc:	9305      	str	r3, [sp, #20]
 8004dce:	4620      	mov	r0, r4
 8004dd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dd4:	3a30      	subs	r2, #48	; 0x30
 8004dd6:	2a09      	cmp	r2, #9
 8004dd8:	d903      	bls.n	8004de2 <_vfiprintf_r+0x1ee>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0c5      	beq.n	8004d6a <_vfiprintf_r+0x176>
 8004dde:	9105      	str	r1, [sp, #20]
 8004de0:	e7c3      	b.n	8004d6a <_vfiprintf_r+0x176>
 8004de2:	4604      	mov	r4, r0
 8004de4:	2301      	movs	r3, #1
 8004de6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dea:	e7f0      	b.n	8004dce <_vfiprintf_r+0x1da>
 8004dec:	ab03      	add	r3, sp, #12
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	462a      	mov	r2, r5
 8004df2:	4630      	mov	r0, r6
 8004df4:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <_vfiprintf_r+0x25c>)
 8004df6:	a904      	add	r1, sp, #16
 8004df8:	f3af 8000 	nop.w
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	1c78      	adds	r0, r7, #1
 8004e00:	d1d6      	bne.n	8004db0 <_vfiprintf_r+0x1bc>
 8004e02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e04:	07d9      	lsls	r1, r3, #31
 8004e06:	d405      	bmi.n	8004e14 <_vfiprintf_r+0x220>
 8004e08:	89ab      	ldrh	r3, [r5, #12]
 8004e0a:	059a      	lsls	r2, r3, #22
 8004e0c:	d402      	bmi.n	8004e14 <_vfiprintf_r+0x220>
 8004e0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e10:	f7ff fe33 	bl	8004a7a <__retarget_lock_release_recursive>
 8004e14:	89ab      	ldrh	r3, [r5, #12]
 8004e16:	065b      	lsls	r3, r3, #25
 8004e18:	f53f af12 	bmi.w	8004c40 <_vfiprintf_r+0x4c>
 8004e1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e1e:	e711      	b.n	8004c44 <_vfiprintf_r+0x50>
 8004e20:	ab03      	add	r3, sp, #12
 8004e22:	9300      	str	r3, [sp, #0]
 8004e24:	462a      	mov	r2, r5
 8004e26:	4630      	mov	r0, r6
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <_vfiprintf_r+0x25c>)
 8004e2a:	a904      	add	r1, sp, #16
 8004e2c:	f000 f882 	bl	8004f34 <_printf_i>
 8004e30:	e7e4      	b.n	8004dfc <_vfiprintf_r+0x208>
 8004e32:	bf00      	nop
 8004e34:	080058f4 	.word	0x080058f4
 8004e38:	08005914 	.word	0x08005914
 8004e3c:	080058d4 	.word	0x080058d4
 8004e40:	08005934 	.word	0x08005934
 8004e44:	0800593a 	.word	0x0800593a
 8004e48:	0800593e 	.word	0x0800593e
 8004e4c:	00000000 	.word	0x00000000
 8004e50:	08004bcf 	.word	0x08004bcf

08004e54 <_printf_common>:
 8004e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	4616      	mov	r6, r2
 8004e5a:	4699      	mov	r9, r3
 8004e5c:	688a      	ldr	r2, [r1, #8]
 8004e5e:	690b      	ldr	r3, [r1, #16]
 8004e60:	4607      	mov	r7, r0
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bfb8      	it	lt
 8004e66:	4613      	movlt	r3, r2
 8004e68:	6033      	str	r3, [r6, #0]
 8004e6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e6e:	460c      	mov	r4, r1
 8004e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e74:	b10a      	cbz	r2, 8004e7a <_printf_common+0x26>
 8004e76:	3301      	adds	r3, #1
 8004e78:	6033      	str	r3, [r6, #0]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	0699      	lsls	r1, r3, #26
 8004e7e:	bf42      	ittt	mi
 8004e80:	6833      	ldrmi	r3, [r6, #0]
 8004e82:	3302      	addmi	r3, #2
 8004e84:	6033      	strmi	r3, [r6, #0]
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	f015 0506 	ands.w	r5, r5, #6
 8004e8c:	d106      	bne.n	8004e9c <_printf_common+0x48>
 8004e8e:	f104 0a19 	add.w	sl, r4, #25
 8004e92:	68e3      	ldr	r3, [r4, #12]
 8004e94:	6832      	ldr	r2, [r6, #0]
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	42ab      	cmp	r3, r5
 8004e9a:	dc28      	bgt.n	8004eee <_printf_common+0x9a>
 8004e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ea0:	1e13      	subs	r3, r2, #0
 8004ea2:	6822      	ldr	r2, [r4, #0]
 8004ea4:	bf18      	it	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	0692      	lsls	r2, r2, #26
 8004eaa:	d42d      	bmi.n	8004f08 <_printf_common+0xb4>
 8004eac:	4649      	mov	r1, r9
 8004eae:	4638      	mov	r0, r7
 8004eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004eb4:	47c0      	blx	r8
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d020      	beq.n	8004efc <_printf_common+0xa8>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	68e5      	ldr	r5, [r4, #12]
 8004ebe:	f003 0306 	and.w	r3, r3, #6
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	bf18      	it	ne
 8004ec6:	2500      	movne	r5, #0
 8004ec8:	6832      	ldr	r2, [r6, #0]
 8004eca:	f04f 0600 	mov.w	r6, #0
 8004ece:	68a3      	ldr	r3, [r4, #8]
 8004ed0:	bf08      	it	eq
 8004ed2:	1aad      	subeq	r5, r5, r2
 8004ed4:	6922      	ldr	r2, [r4, #16]
 8004ed6:	bf08      	it	eq
 8004ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004edc:	4293      	cmp	r3, r2
 8004ede:	bfc4      	itt	gt
 8004ee0:	1a9b      	subgt	r3, r3, r2
 8004ee2:	18ed      	addgt	r5, r5, r3
 8004ee4:	341a      	adds	r4, #26
 8004ee6:	42b5      	cmp	r5, r6
 8004ee8:	d11a      	bne.n	8004f20 <_printf_common+0xcc>
 8004eea:	2000      	movs	r0, #0
 8004eec:	e008      	b.n	8004f00 <_printf_common+0xac>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4652      	mov	r2, sl
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	4638      	mov	r0, r7
 8004ef6:	47c0      	blx	r8
 8004ef8:	3001      	adds	r0, #1
 8004efa:	d103      	bne.n	8004f04 <_printf_common+0xb0>
 8004efc:	f04f 30ff 	mov.w	r0, #4294967295
 8004f00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f04:	3501      	adds	r5, #1
 8004f06:	e7c4      	b.n	8004e92 <_printf_common+0x3e>
 8004f08:	2030      	movs	r0, #48	; 0x30
 8004f0a:	18e1      	adds	r1, r4, r3
 8004f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f10:	1c5a      	adds	r2, r3, #1
 8004f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f16:	4422      	add	r2, r4
 8004f18:	3302      	adds	r3, #2
 8004f1a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f1e:	e7c5      	b.n	8004eac <_printf_common+0x58>
 8004f20:	2301      	movs	r3, #1
 8004f22:	4622      	mov	r2, r4
 8004f24:	4649      	mov	r1, r9
 8004f26:	4638      	mov	r0, r7
 8004f28:	47c0      	blx	r8
 8004f2a:	3001      	adds	r0, #1
 8004f2c:	d0e6      	beq.n	8004efc <_printf_common+0xa8>
 8004f2e:	3601      	adds	r6, #1
 8004f30:	e7d9      	b.n	8004ee6 <_printf_common+0x92>
	...

08004f34 <_printf_i>:
 8004f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f38:	7e0f      	ldrb	r7, [r1, #24]
 8004f3a:	4691      	mov	r9, r2
 8004f3c:	2f78      	cmp	r7, #120	; 0x78
 8004f3e:	4680      	mov	r8, r0
 8004f40:	460c      	mov	r4, r1
 8004f42:	469a      	mov	sl, r3
 8004f44:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f46:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f4a:	d807      	bhi.n	8004f5c <_printf_i+0x28>
 8004f4c:	2f62      	cmp	r7, #98	; 0x62
 8004f4e:	d80a      	bhi.n	8004f66 <_printf_i+0x32>
 8004f50:	2f00      	cmp	r7, #0
 8004f52:	f000 80d9 	beq.w	8005108 <_printf_i+0x1d4>
 8004f56:	2f58      	cmp	r7, #88	; 0x58
 8004f58:	f000 80a4 	beq.w	80050a4 <_printf_i+0x170>
 8004f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f60:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f64:	e03a      	b.n	8004fdc <_printf_i+0xa8>
 8004f66:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f6a:	2b15      	cmp	r3, #21
 8004f6c:	d8f6      	bhi.n	8004f5c <_printf_i+0x28>
 8004f6e:	a101      	add	r1, pc, #4	; (adr r1, 8004f74 <_printf_i+0x40>)
 8004f70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f74:	08004fcd 	.word	0x08004fcd
 8004f78:	08004fe1 	.word	0x08004fe1
 8004f7c:	08004f5d 	.word	0x08004f5d
 8004f80:	08004f5d 	.word	0x08004f5d
 8004f84:	08004f5d 	.word	0x08004f5d
 8004f88:	08004f5d 	.word	0x08004f5d
 8004f8c:	08004fe1 	.word	0x08004fe1
 8004f90:	08004f5d 	.word	0x08004f5d
 8004f94:	08004f5d 	.word	0x08004f5d
 8004f98:	08004f5d 	.word	0x08004f5d
 8004f9c:	08004f5d 	.word	0x08004f5d
 8004fa0:	080050ef 	.word	0x080050ef
 8004fa4:	08005011 	.word	0x08005011
 8004fa8:	080050d1 	.word	0x080050d1
 8004fac:	08004f5d 	.word	0x08004f5d
 8004fb0:	08004f5d 	.word	0x08004f5d
 8004fb4:	08005111 	.word	0x08005111
 8004fb8:	08004f5d 	.word	0x08004f5d
 8004fbc:	08005011 	.word	0x08005011
 8004fc0:	08004f5d 	.word	0x08004f5d
 8004fc4:	08004f5d 	.word	0x08004f5d
 8004fc8:	080050d9 	.word	0x080050d9
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	1d1a      	adds	r2, r3, #4
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	602a      	str	r2, [r5, #0]
 8004fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0a4      	b.n	800512a <_printf_i+0x1f6>
 8004fe0:	6820      	ldr	r0, [r4, #0]
 8004fe2:	6829      	ldr	r1, [r5, #0]
 8004fe4:	0606      	lsls	r6, r0, #24
 8004fe6:	f101 0304 	add.w	r3, r1, #4
 8004fea:	d50a      	bpl.n	8005002 <_printf_i+0xce>
 8004fec:	680e      	ldr	r6, [r1, #0]
 8004fee:	602b      	str	r3, [r5, #0]
 8004ff0:	2e00      	cmp	r6, #0
 8004ff2:	da03      	bge.n	8004ffc <_printf_i+0xc8>
 8004ff4:	232d      	movs	r3, #45	; 0x2d
 8004ff6:	4276      	negs	r6, r6
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffc:	230a      	movs	r3, #10
 8004ffe:	485e      	ldr	r0, [pc, #376]	; (8005178 <_printf_i+0x244>)
 8005000:	e019      	b.n	8005036 <_printf_i+0x102>
 8005002:	680e      	ldr	r6, [r1, #0]
 8005004:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	bf18      	it	ne
 800500c:	b236      	sxthne	r6, r6
 800500e:	e7ef      	b.n	8004ff0 <_printf_i+0xbc>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	6820      	ldr	r0, [r4, #0]
 8005014:	1d19      	adds	r1, r3, #4
 8005016:	6029      	str	r1, [r5, #0]
 8005018:	0601      	lsls	r1, r0, #24
 800501a:	d501      	bpl.n	8005020 <_printf_i+0xec>
 800501c:	681e      	ldr	r6, [r3, #0]
 800501e:	e002      	b.n	8005026 <_printf_i+0xf2>
 8005020:	0646      	lsls	r6, r0, #25
 8005022:	d5fb      	bpl.n	800501c <_printf_i+0xe8>
 8005024:	881e      	ldrh	r6, [r3, #0]
 8005026:	2f6f      	cmp	r7, #111	; 0x6f
 8005028:	bf0c      	ite	eq
 800502a:	2308      	moveq	r3, #8
 800502c:	230a      	movne	r3, #10
 800502e:	4852      	ldr	r0, [pc, #328]	; (8005178 <_printf_i+0x244>)
 8005030:	2100      	movs	r1, #0
 8005032:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005036:	6865      	ldr	r5, [r4, #4]
 8005038:	2d00      	cmp	r5, #0
 800503a:	bfa8      	it	ge
 800503c:	6821      	ldrge	r1, [r4, #0]
 800503e:	60a5      	str	r5, [r4, #8]
 8005040:	bfa4      	itt	ge
 8005042:	f021 0104 	bicge.w	r1, r1, #4
 8005046:	6021      	strge	r1, [r4, #0]
 8005048:	b90e      	cbnz	r6, 800504e <_printf_i+0x11a>
 800504a:	2d00      	cmp	r5, #0
 800504c:	d04d      	beq.n	80050ea <_printf_i+0x1b6>
 800504e:	4615      	mov	r5, r2
 8005050:	fbb6 f1f3 	udiv	r1, r6, r3
 8005054:	fb03 6711 	mls	r7, r3, r1, r6
 8005058:	5dc7      	ldrb	r7, [r0, r7]
 800505a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800505e:	4637      	mov	r7, r6
 8005060:	42bb      	cmp	r3, r7
 8005062:	460e      	mov	r6, r1
 8005064:	d9f4      	bls.n	8005050 <_printf_i+0x11c>
 8005066:	2b08      	cmp	r3, #8
 8005068:	d10b      	bne.n	8005082 <_printf_i+0x14e>
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	07de      	lsls	r6, r3, #31
 800506e:	d508      	bpl.n	8005082 <_printf_i+0x14e>
 8005070:	6923      	ldr	r3, [r4, #16]
 8005072:	6861      	ldr	r1, [r4, #4]
 8005074:	4299      	cmp	r1, r3
 8005076:	bfde      	ittt	le
 8005078:	2330      	movle	r3, #48	; 0x30
 800507a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800507e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005082:	1b52      	subs	r2, r2, r5
 8005084:	6122      	str	r2, [r4, #16]
 8005086:	464b      	mov	r3, r9
 8005088:	4621      	mov	r1, r4
 800508a:	4640      	mov	r0, r8
 800508c:	f8cd a000 	str.w	sl, [sp]
 8005090:	aa03      	add	r2, sp, #12
 8005092:	f7ff fedf 	bl	8004e54 <_printf_common>
 8005096:	3001      	adds	r0, #1
 8005098:	d14c      	bne.n	8005134 <_printf_i+0x200>
 800509a:	f04f 30ff 	mov.w	r0, #4294967295
 800509e:	b004      	add	sp, #16
 80050a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a4:	4834      	ldr	r0, [pc, #208]	; (8005178 <_printf_i+0x244>)
 80050a6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80050aa:	6829      	ldr	r1, [r5, #0]
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	f851 6b04 	ldr.w	r6, [r1], #4
 80050b2:	6029      	str	r1, [r5, #0]
 80050b4:	061d      	lsls	r5, r3, #24
 80050b6:	d514      	bpl.n	80050e2 <_printf_i+0x1ae>
 80050b8:	07df      	lsls	r7, r3, #31
 80050ba:	bf44      	itt	mi
 80050bc:	f043 0320 	orrmi.w	r3, r3, #32
 80050c0:	6023      	strmi	r3, [r4, #0]
 80050c2:	b91e      	cbnz	r6, 80050cc <_printf_i+0x198>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f023 0320 	bic.w	r3, r3, #32
 80050ca:	6023      	str	r3, [r4, #0]
 80050cc:	2310      	movs	r3, #16
 80050ce:	e7af      	b.n	8005030 <_printf_i+0xfc>
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	f043 0320 	orr.w	r3, r3, #32
 80050d6:	6023      	str	r3, [r4, #0]
 80050d8:	2378      	movs	r3, #120	; 0x78
 80050da:	4828      	ldr	r0, [pc, #160]	; (800517c <_printf_i+0x248>)
 80050dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050e0:	e7e3      	b.n	80050aa <_printf_i+0x176>
 80050e2:	0659      	lsls	r1, r3, #25
 80050e4:	bf48      	it	mi
 80050e6:	b2b6      	uxthmi	r6, r6
 80050e8:	e7e6      	b.n	80050b8 <_printf_i+0x184>
 80050ea:	4615      	mov	r5, r2
 80050ec:	e7bb      	b.n	8005066 <_printf_i+0x132>
 80050ee:	682b      	ldr	r3, [r5, #0]
 80050f0:	6826      	ldr	r6, [r4, #0]
 80050f2:	1d18      	adds	r0, r3, #4
 80050f4:	6961      	ldr	r1, [r4, #20]
 80050f6:	6028      	str	r0, [r5, #0]
 80050f8:	0635      	lsls	r5, r6, #24
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	d501      	bpl.n	8005102 <_printf_i+0x1ce>
 80050fe:	6019      	str	r1, [r3, #0]
 8005100:	e002      	b.n	8005108 <_printf_i+0x1d4>
 8005102:	0670      	lsls	r0, r6, #25
 8005104:	d5fb      	bpl.n	80050fe <_printf_i+0x1ca>
 8005106:	8019      	strh	r1, [r3, #0]
 8005108:	2300      	movs	r3, #0
 800510a:	4615      	mov	r5, r2
 800510c:	6123      	str	r3, [r4, #16]
 800510e:	e7ba      	b.n	8005086 <_printf_i+0x152>
 8005110:	682b      	ldr	r3, [r5, #0]
 8005112:	2100      	movs	r1, #0
 8005114:	1d1a      	adds	r2, r3, #4
 8005116:	602a      	str	r2, [r5, #0]
 8005118:	681d      	ldr	r5, [r3, #0]
 800511a:	6862      	ldr	r2, [r4, #4]
 800511c:	4628      	mov	r0, r5
 800511e:	f000 fa9b 	bl	8005658 <memchr>
 8005122:	b108      	cbz	r0, 8005128 <_printf_i+0x1f4>
 8005124:	1b40      	subs	r0, r0, r5
 8005126:	6060      	str	r0, [r4, #4]
 8005128:	6863      	ldr	r3, [r4, #4]
 800512a:	6123      	str	r3, [r4, #16]
 800512c:	2300      	movs	r3, #0
 800512e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005132:	e7a8      	b.n	8005086 <_printf_i+0x152>
 8005134:	462a      	mov	r2, r5
 8005136:	4649      	mov	r1, r9
 8005138:	4640      	mov	r0, r8
 800513a:	6923      	ldr	r3, [r4, #16]
 800513c:	47d0      	blx	sl
 800513e:	3001      	adds	r0, #1
 8005140:	d0ab      	beq.n	800509a <_printf_i+0x166>
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	079b      	lsls	r3, r3, #30
 8005146:	d413      	bmi.n	8005170 <_printf_i+0x23c>
 8005148:	68e0      	ldr	r0, [r4, #12]
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	4298      	cmp	r0, r3
 800514e:	bfb8      	it	lt
 8005150:	4618      	movlt	r0, r3
 8005152:	e7a4      	b.n	800509e <_printf_i+0x16a>
 8005154:	2301      	movs	r3, #1
 8005156:	4632      	mov	r2, r6
 8005158:	4649      	mov	r1, r9
 800515a:	4640      	mov	r0, r8
 800515c:	47d0      	blx	sl
 800515e:	3001      	adds	r0, #1
 8005160:	d09b      	beq.n	800509a <_printf_i+0x166>
 8005162:	3501      	adds	r5, #1
 8005164:	68e3      	ldr	r3, [r4, #12]
 8005166:	9903      	ldr	r1, [sp, #12]
 8005168:	1a5b      	subs	r3, r3, r1
 800516a:	42ab      	cmp	r3, r5
 800516c:	dcf2      	bgt.n	8005154 <_printf_i+0x220>
 800516e:	e7eb      	b.n	8005148 <_printf_i+0x214>
 8005170:	2500      	movs	r5, #0
 8005172:	f104 0619 	add.w	r6, r4, #25
 8005176:	e7f5      	b.n	8005164 <_printf_i+0x230>
 8005178:	08005945 	.word	0x08005945
 800517c:	08005956 	.word	0x08005956

08005180 <_sbrk_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	2300      	movs	r3, #0
 8005184:	4d05      	ldr	r5, [pc, #20]	; (800519c <_sbrk_r+0x1c>)
 8005186:	4604      	mov	r4, r0
 8005188:	4608      	mov	r0, r1
 800518a:	602b      	str	r3, [r5, #0]
 800518c:	f7fb fa8c 	bl	80006a8 <_sbrk>
 8005190:	1c43      	adds	r3, r0, #1
 8005192:	d102      	bne.n	800519a <_sbrk_r+0x1a>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	b103      	cbz	r3, 800519a <_sbrk_r+0x1a>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	bd38      	pop	{r3, r4, r5, pc}
 800519c:	20001a48 	.word	0x20001a48

080051a0 <__sread>:
 80051a0:	b510      	push	{r4, lr}
 80051a2:	460c      	mov	r4, r1
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	f000 fab8 	bl	800571c <_read_r>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	bfab      	itete	ge
 80051b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80051b2:	89a3      	ldrhlt	r3, [r4, #12]
 80051b4:	181b      	addge	r3, r3, r0
 80051b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80051ba:	bfac      	ite	ge
 80051bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80051be:	81a3      	strhlt	r3, [r4, #12]
 80051c0:	bd10      	pop	{r4, pc}

080051c2 <__swrite>:
 80051c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	461f      	mov	r7, r3
 80051c8:	898b      	ldrh	r3, [r1, #12]
 80051ca:	4605      	mov	r5, r0
 80051cc:	05db      	lsls	r3, r3, #23
 80051ce:	460c      	mov	r4, r1
 80051d0:	4616      	mov	r6, r2
 80051d2:	d505      	bpl.n	80051e0 <__swrite+0x1e>
 80051d4:	2302      	movs	r3, #2
 80051d6:	2200      	movs	r2, #0
 80051d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051dc:	f000 f9c4 	bl	8005568 <_lseek_r>
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	4632      	mov	r2, r6
 80051e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	4628      	mov	r0, r5
 80051ec:	463b      	mov	r3, r7
 80051ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051f6:	f000 b869 	b.w	80052cc <_write_r>

080051fa <__sseek>:
 80051fa:	b510      	push	{r4, lr}
 80051fc:	460c      	mov	r4, r1
 80051fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005202:	f000 f9b1 	bl	8005568 <_lseek_r>
 8005206:	1c43      	adds	r3, r0, #1
 8005208:	89a3      	ldrh	r3, [r4, #12]
 800520a:	bf15      	itete	ne
 800520c:	6560      	strne	r0, [r4, #84]	; 0x54
 800520e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005216:	81a3      	strheq	r3, [r4, #12]
 8005218:	bf18      	it	ne
 800521a:	81a3      	strhne	r3, [r4, #12]
 800521c:	bd10      	pop	{r4, pc}

0800521e <__sclose>:
 800521e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005222:	f000 b8d3 	b.w	80053cc <_close_r>
	...

08005228 <__swbuf_r>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	460e      	mov	r6, r1
 800522c:	4614      	mov	r4, r2
 800522e:	4605      	mov	r5, r0
 8005230:	b118      	cbz	r0, 800523a <__swbuf_r+0x12>
 8005232:	6983      	ldr	r3, [r0, #24]
 8005234:	b90b      	cbnz	r3, 800523a <__swbuf_r+0x12>
 8005236:	f7ff fb81 	bl	800493c <__sinit>
 800523a:	4b21      	ldr	r3, [pc, #132]	; (80052c0 <__swbuf_r+0x98>)
 800523c:	429c      	cmp	r4, r3
 800523e:	d12b      	bne.n	8005298 <__swbuf_r+0x70>
 8005240:	686c      	ldr	r4, [r5, #4]
 8005242:	69a3      	ldr	r3, [r4, #24]
 8005244:	60a3      	str	r3, [r4, #8]
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	071a      	lsls	r2, r3, #28
 800524a:	d52f      	bpl.n	80052ac <__swbuf_r+0x84>
 800524c:	6923      	ldr	r3, [r4, #16]
 800524e:	b36b      	cbz	r3, 80052ac <__swbuf_r+0x84>
 8005250:	6923      	ldr	r3, [r4, #16]
 8005252:	6820      	ldr	r0, [r4, #0]
 8005254:	b2f6      	uxtb	r6, r6
 8005256:	1ac0      	subs	r0, r0, r3
 8005258:	6963      	ldr	r3, [r4, #20]
 800525a:	4637      	mov	r7, r6
 800525c:	4283      	cmp	r3, r0
 800525e:	dc04      	bgt.n	800526a <__swbuf_r+0x42>
 8005260:	4621      	mov	r1, r4
 8005262:	4628      	mov	r0, r5
 8005264:	f000 f944 	bl	80054f0 <_fflush_r>
 8005268:	bb30      	cbnz	r0, 80052b8 <__swbuf_r+0x90>
 800526a:	68a3      	ldr	r3, [r4, #8]
 800526c:	3001      	adds	r0, #1
 800526e:	3b01      	subs	r3, #1
 8005270:	60a3      	str	r3, [r4, #8]
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	6022      	str	r2, [r4, #0]
 8005278:	701e      	strb	r6, [r3, #0]
 800527a:	6963      	ldr	r3, [r4, #20]
 800527c:	4283      	cmp	r3, r0
 800527e:	d004      	beq.n	800528a <__swbuf_r+0x62>
 8005280:	89a3      	ldrh	r3, [r4, #12]
 8005282:	07db      	lsls	r3, r3, #31
 8005284:	d506      	bpl.n	8005294 <__swbuf_r+0x6c>
 8005286:	2e0a      	cmp	r6, #10
 8005288:	d104      	bne.n	8005294 <__swbuf_r+0x6c>
 800528a:	4621      	mov	r1, r4
 800528c:	4628      	mov	r0, r5
 800528e:	f000 f92f 	bl	80054f0 <_fflush_r>
 8005292:	b988      	cbnz	r0, 80052b8 <__swbuf_r+0x90>
 8005294:	4638      	mov	r0, r7
 8005296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005298:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <__swbuf_r+0x9c>)
 800529a:	429c      	cmp	r4, r3
 800529c:	d101      	bne.n	80052a2 <__swbuf_r+0x7a>
 800529e:	68ac      	ldr	r4, [r5, #8]
 80052a0:	e7cf      	b.n	8005242 <__swbuf_r+0x1a>
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <__swbuf_r+0xa0>)
 80052a4:	429c      	cmp	r4, r3
 80052a6:	bf08      	it	eq
 80052a8:	68ec      	ldreq	r4, [r5, #12]
 80052aa:	e7ca      	b.n	8005242 <__swbuf_r+0x1a>
 80052ac:	4621      	mov	r1, r4
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 f81e 	bl	80052f0 <__swsetup_r>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d0cb      	beq.n	8005250 <__swbuf_r+0x28>
 80052b8:	f04f 37ff 	mov.w	r7, #4294967295
 80052bc:	e7ea      	b.n	8005294 <__swbuf_r+0x6c>
 80052be:	bf00      	nop
 80052c0:	080058f4 	.word	0x080058f4
 80052c4:	08005914 	.word	0x08005914
 80052c8:	080058d4 	.word	0x080058d4

080052cc <_write_r>:
 80052cc:	b538      	push	{r3, r4, r5, lr}
 80052ce:	4604      	mov	r4, r0
 80052d0:	4608      	mov	r0, r1
 80052d2:	4611      	mov	r1, r2
 80052d4:	2200      	movs	r2, #0
 80052d6:	4d05      	ldr	r5, [pc, #20]	; (80052ec <_write_r+0x20>)
 80052d8:	602a      	str	r2, [r5, #0]
 80052da:	461a      	mov	r2, r3
 80052dc:	f7fb f997 	bl	800060e <_write>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_write_r+0x1e>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_write_r+0x1e>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	20001a48 	.word	0x20001a48

080052f0 <__swsetup_r>:
 80052f0:	4b32      	ldr	r3, [pc, #200]	; (80053bc <__swsetup_r+0xcc>)
 80052f2:	b570      	push	{r4, r5, r6, lr}
 80052f4:	681d      	ldr	r5, [r3, #0]
 80052f6:	4606      	mov	r6, r0
 80052f8:	460c      	mov	r4, r1
 80052fa:	b125      	cbz	r5, 8005306 <__swsetup_r+0x16>
 80052fc:	69ab      	ldr	r3, [r5, #24]
 80052fe:	b913      	cbnz	r3, 8005306 <__swsetup_r+0x16>
 8005300:	4628      	mov	r0, r5
 8005302:	f7ff fb1b 	bl	800493c <__sinit>
 8005306:	4b2e      	ldr	r3, [pc, #184]	; (80053c0 <__swsetup_r+0xd0>)
 8005308:	429c      	cmp	r4, r3
 800530a:	d10f      	bne.n	800532c <__swsetup_r+0x3c>
 800530c:	686c      	ldr	r4, [r5, #4]
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005314:	0719      	lsls	r1, r3, #28
 8005316:	d42c      	bmi.n	8005372 <__swsetup_r+0x82>
 8005318:	06dd      	lsls	r5, r3, #27
 800531a:	d411      	bmi.n	8005340 <__swsetup_r+0x50>
 800531c:	2309      	movs	r3, #9
 800531e:	6033      	str	r3, [r6, #0]
 8005320:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005324:	f04f 30ff 	mov.w	r0, #4294967295
 8005328:	81a3      	strh	r3, [r4, #12]
 800532a:	e03e      	b.n	80053aa <__swsetup_r+0xba>
 800532c:	4b25      	ldr	r3, [pc, #148]	; (80053c4 <__swsetup_r+0xd4>)
 800532e:	429c      	cmp	r4, r3
 8005330:	d101      	bne.n	8005336 <__swsetup_r+0x46>
 8005332:	68ac      	ldr	r4, [r5, #8]
 8005334:	e7eb      	b.n	800530e <__swsetup_r+0x1e>
 8005336:	4b24      	ldr	r3, [pc, #144]	; (80053c8 <__swsetup_r+0xd8>)
 8005338:	429c      	cmp	r4, r3
 800533a:	bf08      	it	eq
 800533c:	68ec      	ldreq	r4, [r5, #12]
 800533e:	e7e6      	b.n	800530e <__swsetup_r+0x1e>
 8005340:	0758      	lsls	r0, r3, #29
 8005342:	d512      	bpl.n	800536a <__swsetup_r+0x7a>
 8005344:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005346:	b141      	cbz	r1, 800535a <__swsetup_r+0x6a>
 8005348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800534c:	4299      	cmp	r1, r3
 800534e:	d002      	beq.n	8005356 <__swsetup_r+0x66>
 8005350:	4630      	mov	r0, r6
 8005352:	f000 f99b 	bl	800568c <_free_r>
 8005356:	2300      	movs	r3, #0
 8005358:	6363      	str	r3, [r4, #52]	; 0x34
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005360:	81a3      	strh	r3, [r4, #12]
 8005362:	2300      	movs	r3, #0
 8005364:	6063      	str	r3, [r4, #4]
 8005366:	6923      	ldr	r3, [r4, #16]
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	f043 0308 	orr.w	r3, r3, #8
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	b94b      	cbnz	r3, 800538a <__swsetup_r+0x9a>
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800537c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005380:	d003      	beq.n	800538a <__swsetup_r+0x9a>
 8005382:	4621      	mov	r1, r4
 8005384:	4630      	mov	r0, r6
 8005386:	f000 f927 	bl	80055d8 <__smakebuf_r>
 800538a:	89a0      	ldrh	r0, [r4, #12]
 800538c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005390:	f010 0301 	ands.w	r3, r0, #1
 8005394:	d00a      	beq.n	80053ac <__swsetup_r+0xbc>
 8005396:	2300      	movs	r3, #0
 8005398:	60a3      	str	r3, [r4, #8]
 800539a:	6963      	ldr	r3, [r4, #20]
 800539c:	425b      	negs	r3, r3
 800539e:	61a3      	str	r3, [r4, #24]
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	b943      	cbnz	r3, 80053b6 <__swsetup_r+0xc6>
 80053a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80053a8:	d1ba      	bne.n	8005320 <__swsetup_r+0x30>
 80053aa:	bd70      	pop	{r4, r5, r6, pc}
 80053ac:	0781      	lsls	r1, r0, #30
 80053ae:	bf58      	it	pl
 80053b0:	6963      	ldrpl	r3, [r4, #20]
 80053b2:	60a3      	str	r3, [r4, #8]
 80053b4:	e7f4      	b.n	80053a0 <__swsetup_r+0xb0>
 80053b6:	2000      	movs	r0, #0
 80053b8:	e7f7      	b.n	80053aa <__swsetup_r+0xba>
 80053ba:	bf00      	nop
 80053bc:	20000010 	.word	0x20000010
 80053c0:	080058f4 	.word	0x080058f4
 80053c4:	08005914 	.word	0x08005914
 80053c8:	080058d4 	.word	0x080058d4

080053cc <_close_r>:
 80053cc:	b538      	push	{r3, r4, r5, lr}
 80053ce:	2300      	movs	r3, #0
 80053d0:	4d05      	ldr	r5, [pc, #20]	; (80053e8 <_close_r+0x1c>)
 80053d2:	4604      	mov	r4, r0
 80053d4:	4608      	mov	r0, r1
 80053d6:	602b      	str	r3, [r5, #0]
 80053d8:	f7fb f935 	bl	8000646 <_close>
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d102      	bne.n	80053e6 <_close_r+0x1a>
 80053e0:	682b      	ldr	r3, [r5, #0]
 80053e2:	b103      	cbz	r3, 80053e6 <_close_r+0x1a>
 80053e4:	6023      	str	r3, [r4, #0]
 80053e6:	bd38      	pop	{r3, r4, r5, pc}
 80053e8:	20001a48 	.word	0x20001a48

080053ec <__sflush_r>:
 80053ec:	898a      	ldrh	r2, [r1, #12]
 80053ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f0:	4605      	mov	r5, r0
 80053f2:	0710      	lsls	r0, r2, #28
 80053f4:	460c      	mov	r4, r1
 80053f6:	d457      	bmi.n	80054a8 <__sflush_r+0xbc>
 80053f8:	684b      	ldr	r3, [r1, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	dc04      	bgt.n	8005408 <__sflush_r+0x1c>
 80053fe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	dc01      	bgt.n	8005408 <__sflush_r+0x1c>
 8005404:	2000      	movs	r0, #0
 8005406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800540a:	2e00      	cmp	r6, #0
 800540c:	d0fa      	beq.n	8005404 <__sflush_r+0x18>
 800540e:	2300      	movs	r3, #0
 8005410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005414:	682f      	ldr	r7, [r5, #0]
 8005416:	602b      	str	r3, [r5, #0]
 8005418:	d032      	beq.n	8005480 <__sflush_r+0x94>
 800541a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800541c:	89a3      	ldrh	r3, [r4, #12]
 800541e:	075a      	lsls	r2, r3, #29
 8005420:	d505      	bpl.n	800542e <__sflush_r+0x42>
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	1ac0      	subs	r0, r0, r3
 8005426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005428:	b10b      	cbz	r3, 800542e <__sflush_r+0x42>
 800542a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800542c:	1ac0      	subs	r0, r0, r3
 800542e:	2300      	movs	r3, #0
 8005430:	4602      	mov	r2, r0
 8005432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005434:	4628      	mov	r0, r5
 8005436:	6a21      	ldr	r1, [r4, #32]
 8005438:	47b0      	blx	r6
 800543a:	1c43      	adds	r3, r0, #1
 800543c:	89a3      	ldrh	r3, [r4, #12]
 800543e:	d106      	bne.n	800544e <__sflush_r+0x62>
 8005440:	6829      	ldr	r1, [r5, #0]
 8005442:	291d      	cmp	r1, #29
 8005444:	d82c      	bhi.n	80054a0 <__sflush_r+0xb4>
 8005446:	4a29      	ldr	r2, [pc, #164]	; (80054ec <__sflush_r+0x100>)
 8005448:	40ca      	lsrs	r2, r1
 800544a:	07d6      	lsls	r6, r2, #31
 800544c:	d528      	bpl.n	80054a0 <__sflush_r+0xb4>
 800544e:	2200      	movs	r2, #0
 8005450:	6062      	str	r2, [r4, #4]
 8005452:	6922      	ldr	r2, [r4, #16]
 8005454:	04d9      	lsls	r1, r3, #19
 8005456:	6022      	str	r2, [r4, #0]
 8005458:	d504      	bpl.n	8005464 <__sflush_r+0x78>
 800545a:	1c42      	adds	r2, r0, #1
 800545c:	d101      	bne.n	8005462 <__sflush_r+0x76>
 800545e:	682b      	ldr	r3, [r5, #0]
 8005460:	b903      	cbnz	r3, 8005464 <__sflush_r+0x78>
 8005462:	6560      	str	r0, [r4, #84]	; 0x54
 8005464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005466:	602f      	str	r7, [r5, #0]
 8005468:	2900      	cmp	r1, #0
 800546a:	d0cb      	beq.n	8005404 <__sflush_r+0x18>
 800546c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005470:	4299      	cmp	r1, r3
 8005472:	d002      	beq.n	800547a <__sflush_r+0x8e>
 8005474:	4628      	mov	r0, r5
 8005476:	f000 f909 	bl	800568c <_free_r>
 800547a:	2000      	movs	r0, #0
 800547c:	6360      	str	r0, [r4, #52]	; 0x34
 800547e:	e7c2      	b.n	8005406 <__sflush_r+0x1a>
 8005480:	6a21      	ldr	r1, [r4, #32]
 8005482:	2301      	movs	r3, #1
 8005484:	4628      	mov	r0, r5
 8005486:	47b0      	blx	r6
 8005488:	1c41      	adds	r1, r0, #1
 800548a:	d1c7      	bne.n	800541c <__sflush_r+0x30>
 800548c:	682b      	ldr	r3, [r5, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0c4      	beq.n	800541c <__sflush_r+0x30>
 8005492:	2b1d      	cmp	r3, #29
 8005494:	d001      	beq.n	800549a <__sflush_r+0xae>
 8005496:	2b16      	cmp	r3, #22
 8005498:	d101      	bne.n	800549e <__sflush_r+0xb2>
 800549a:	602f      	str	r7, [r5, #0]
 800549c:	e7b2      	b.n	8005404 <__sflush_r+0x18>
 800549e:	89a3      	ldrh	r3, [r4, #12]
 80054a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054a4:	81a3      	strh	r3, [r4, #12]
 80054a6:	e7ae      	b.n	8005406 <__sflush_r+0x1a>
 80054a8:	690f      	ldr	r7, [r1, #16]
 80054aa:	2f00      	cmp	r7, #0
 80054ac:	d0aa      	beq.n	8005404 <__sflush_r+0x18>
 80054ae:	0793      	lsls	r3, r2, #30
 80054b0:	bf18      	it	ne
 80054b2:	2300      	movne	r3, #0
 80054b4:	680e      	ldr	r6, [r1, #0]
 80054b6:	bf08      	it	eq
 80054b8:	694b      	ldreq	r3, [r1, #20]
 80054ba:	1bf6      	subs	r6, r6, r7
 80054bc:	600f      	str	r7, [r1, #0]
 80054be:	608b      	str	r3, [r1, #8]
 80054c0:	2e00      	cmp	r6, #0
 80054c2:	dd9f      	ble.n	8005404 <__sflush_r+0x18>
 80054c4:	4633      	mov	r3, r6
 80054c6:	463a      	mov	r2, r7
 80054c8:	4628      	mov	r0, r5
 80054ca:	6a21      	ldr	r1, [r4, #32]
 80054cc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80054d0:	47e0      	blx	ip
 80054d2:	2800      	cmp	r0, #0
 80054d4:	dc06      	bgt.n	80054e4 <__sflush_r+0xf8>
 80054d6:	89a3      	ldrh	r3, [r4, #12]
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054e0:	81a3      	strh	r3, [r4, #12]
 80054e2:	e790      	b.n	8005406 <__sflush_r+0x1a>
 80054e4:	4407      	add	r7, r0
 80054e6:	1a36      	subs	r6, r6, r0
 80054e8:	e7ea      	b.n	80054c0 <__sflush_r+0xd4>
 80054ea:	bf00      	nop
 80054ec:	20400001 	.word	0x20400001

080054f0 <_fflush_r>:
 80054f0:	b538      	push	{r3, r4, r5, lr}
 80054f2:	690b      	ldr	r3, [r1, #16]
 80054f4:	4605      	mov	r5, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	b913      	cbnz	r3, 8005500 <_fflush_r+0x10>
 80054fa:	2500      	movs	r5, #0
 80054fc:	4628      	mov	r0, r5
 80054fe:	bd38      	pop	{r3, r4, r5, pc}
 8005500:	b118      	cbz	r0, 800550a <_fflush_r+0x1a>
 8005502:	6983      	ldr	r3, [r0, #24]
 8005504:	b90b      	cbnz	r3, 800550a <_fflush_r+0x1a>
 8005506:	f7ff fa19 	bl	800493c <__sinit>
 800550a:	4b14      	ldr	r3, [pc, #80]	; (800555c <_fflush_r+0x6c>)
 800550c:	429c      	cmp	r4, r3
 800550e:	d11b      	bne.n	8005548 <_fflush_r+0x58>
 8005510:	686c      	ldr	r4, [r5, #4]
 8005512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d0ef      	beq.n	80054fa <_fflush_r+0xa>
 800551a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800551c:	07d0      	lsls	r0, r2, #31
 800551e:	d404      	bmi.n	800552a <_fflush_r+0x3a>
 8005520:	0599      	lsls	r1, r3, #22
 8005522:	d402      	bmi.n	800552a <_fflush_r+0x3a>
 8005524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005526:	f7ff faa7 	bl	8004a78 <__retarget_lock_acquire_recursive>
 800552a:	4628      	mov	r0, r5
 800552c:	4621      	mov	r1, r4
 800552e:	f7ff ff5d 	bl	80053ec <__sflush_r>
 8005532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005534:	4605      	mov	r5, r0
 8005536:	07da      	lsls	r2, r3, #31
 8005538:	d4e0      	bmi.n	80054fc <_fflush_r+0xc>
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	059b      	lsls	r3, r3, #22
 800553e:	d4dd      	bmi.n	80054fc <_fflush_r+0xc>
 8005540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005542:	f7ff fa9a 	bl	8004a7a <__retarget_lock_release_recursive>
 8005546:	e7d9      	b.n	80054fc <_fflush_r+0xc>
 8005548:	4b05      	ldr	r3, [pc, #20]	; (8005560 <_fflush_r+0x70>)
 800554a:	429c      	cmp	r4, r3
 800554c:	d101      	bne.n	8005552 <_fflush_r+0x62>
 800554e:	68ac      	ldr	r4, [r5, #8]
 8005550:	e7df      	b.n	8005512 <_fflush_r+0x22>
 8005552:	4b04      	ldr	r3, [pc, #16]	; (8005564 <_fflush_r+0x74>)
 8005554:	429c      	cmp	r4, r3
 8005556:	bf08      	it	eq
 8005558:	68ec      	ldreq	r4, [r5, #12]
 800555a:	e7da      	b.n	8005512 <_fflush_r+0x22>
 800555c:	080058f4 	.word	0x080058f4
 8005560:	08005914 	.word	0x08005914
 8005564:	080058d4 	.word	0x080058d4

08005568 <_lseek_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4604      	mov	r4, r0
 800556c:	4608      	mov	r0, r1
 800556e:	4611      	mov	r1, r2
 8005570:	2200      	movs	r2, #0
 8005572:	4d05      	ldr	r5, [pc, #20]	; (8005588 <_lseek_r+0x20>)
 8005574:	602a      	str	r2, [r5, #0]
 8005576:	461a      	mov	r2, r3
 8005578:	f7fb f889 	bl	800068e <_lseek>
 800557c:	1c43      	adds	r3, r0, #1
 800557e:	d102      	bne.n	8005586 <_lseek_r+0x1e>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	b103      	cbz	r3, 8005586 <_lseek_r+0x1e>
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	bd38      	pop	{r3, r4, r5, pc}
 8005588:	20001a48 	.word	0x20001a48

0800558c <__swhatbuf_r>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	460e      	mov	r6, r1
 8005590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005594:	4614      	mov	r4, r2
 8005596:	2900      	cmp	r1, #0
 8005598:	461d      	mov	r5, r3
 800559a:	b096      	sub	sp, #88	; 0x58
 800559c:	da08      	bge.n	80055b0 <__swhatbuf_r+0x24>
 800559e:	2200      	movs	r2, #0
 80055a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80055a4:	602a      	str	r2, [r5, #0]
 80055a6:	061a      	lsls	r2, r3, #24
 80055a8:	d410      	bmi.n	80055cc <__swhatbuf_r+0x40>
 80055aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ae:	e00e      	b.n	80055ce <__swhatbuf_r+0x42>
 80055b0:	466a      	mov	r2, sp
 80055b2:	f000 f8c5 	bl	8005740 <_fstat_r>
 80055b6:	2800      	cmp	r0, #0
 80055b8:	dbf1      	blt.n	800559e <__swhatbuf_r+0x12>
 80055ba:	9a01      	ldr	r2, [sp, #4]
 80055bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055c4:	425a      	negs	r2, r3
 80055c6:	415a      	adcs	r2, r3
 80055c8:	602a      	str	r2, [r5, #0]
 80055ca:	e7ee      	b.n	80055aa <__swhatbuf_r+0x1e>
 80055cc:	2340      	movs	r3, #64	; 0x40
 80055ce:	2000      	movs	r0, #0
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	b016      	add	sp, #88	; 0x58
 80055d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080055d8 <__smakebuf_r>:
 80055d8:	898b      	ldrh	r3, [r1, #12]
 80055da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055dc:	079d      	lsls	r5, r3, #30
 80055de:	4606      	mov	r6, r0
 80055e0:	460c      	mov	r4, r1
 80055e2:	d507      	bpl.n	80055f4 <__smakebuf_r+0x1c>
 80055e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	6123      	str	r3, [r4, #16]
 80055ec:	2301      	movs	r3, #1
 80055ee:	6163      	str	r3, [r4, #20]
 80055f0:	b002      	add	sp, #8
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	466a      	mov	r2, sp
 80055f6:	ab01      	add	r3, sp, #4
 80055f8:	f7ff ffc8 	bl	800558c <__swhatbuf_r>
 80055fc:	9900      	ldr	r1, [sp, #0]
 80055fe:	4605      	mov	r5, r0
 8005600:	4630      	mov	r0, r6
 8005602:	f7ff fa5b 	bl	8004abc <_malloc_r>
 8005606:	b948      	cbnz	r0, 800561c <__smakebuf_r+0x44>
 8005608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800560c:	059a      	lsls	r2, r3, #22
 800560e:	d4ef      	bmi.n	80055f0 <__smakebuf_r+0x18>
 8005610:	f023 0303 	bic.w	r3, r3, #3
 8005614:	f043 0302 	orr.w	r3, r3, #2
 8005618:	81a3      	strh	r3, [r4, #12]
 800561a:	e7e3      	b.n	80055e4 <__smakebuf_r+0xc>
 800561c:	4b0d      	ldr	r3, [pc, #52]	; (8005654 <__smakebuf_r+0x7c>)
 800561e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	6020      	str	r0, [r4, #0]
 8005624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005628:	81a3      	strh	r3, [r4, #12]
 800562a:	9b00      	ldr	r3, [sp, #0]
 800562c:	6120      	str	r0, [r4, #16]
 800562e:	6163      	str	r3, [r4, #20]
 8005630:	9b01      	ldr	r3, [sp, #4]
 8005632:	b15b      	cbz	r3, 800564c <__smakebuf_r+0x74>
 8005634:	4630      	mov	r0, r6
 8005636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800563a:	f000 f893 	bl	8005764 <_isatty_r>
 800563e:	b128      	cbz	r0, 800564c <__smakebuf_r+0x74>
 8005640:	89a3      	ldrh	r3, [r4, #12]
 8005642:	f023 0303 	bic.w	r3, r3, #3
 8005646:	f043 0301 	orr.w	r3, r3, #1
 800564a:	81a3      	strh	r3, [r4, #12]
 800564c:	89a0      	ldrh	r0, [r4, #12]
 800564e:	4305      	orrs	r5, r0
 8005650:	81a5      	strh	r5, [r4, #12]
 8005652:	e7cd      	b.n	80055f0 <__smakebuf_r+0x18>
 8005654:	080048d5 	.word	0x080048d5

08005658 <memchr>:
 8005658:	4603      	mov	r3, r0
 800565a:	b510      	push	{r4, lr}
 800565c:	b2c9      	uxtb	r1, r1
 800565e:	4402      	add	r2, r0
 8005660:	4293      	cmp	r3, r2
 8005662:	4618      	mov	r0, r3
 8005664:	d101      	bne.n	800566a <memchr+0x12>
 8005666:	2000      	movs	r0, #0
 8005668:	e003      	b.n	8005672 <memchr+0x1a>
 800566a:	7804      	ldrb	r4, [r0, #0]
 800566c:	3301      	adds	r3, #1
 800566e:	428c      	cmp	r4, r1
 8005670:	d1f6      	bne.n	8005660 <memchr+0x8>
 8005672:	bd10      	pop	{r4, pc}

08005674 <__malloc_lock>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__malloc_lock+0x8>)
 8005676:	f7ff b9ff 	b.w	8004a78 <__retarget_lock_acquire_recursive>
 800567a:	bf00      	nop
 800567c:	20001a3c 	.word	0x20001a3c

08005680 <__malloc_unlock>:
 8005680:	4801      	ldr	r0, [pc, #4]	; (8005688 <__malloc_unlock+0x8>)
 8005682:	f7ff b9fa 	b.w	8004a7a <__retarget_lock_release_recursive>
 8005686:	bf00      	nop
 8005688:	20001a3c 	.word	0x20001a3c

0800568c <_free_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4605      	mov	r5, r0
 8005690:	2900      	cmp	r1, #0
 8005692:	d040      	beq.n	8005716 <_free_r+0x8a>
 8005694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005698:	1f0c      	subs	r4, r1, #4
 800569a:	2b00      	cmp	r3, #0
 800569c:	bfb8      	it	lt
 800569e:	18e4      	addlt	r4, r4, r3
 80056a0:	f7ff ffe8 	bl	8005674 <__malloc_lock>
 80056a4:	4a1c      	ldr	r2, [pc, #112]	; (8005718 <_free_r+0x8c>)
 80056a6:	6813      	ldr	r3, [r2, #0]
 80056a8:	b933      	cbnz	r3, 80056b8 <_free_r+0x2c>
 80056aa:	6063      	str	r3, [r4, #4]
 80056ac:	6014      	str	r4, [r2, #0]
 80056ae:	4628      	mov	r0, r5
 80056b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056b4:	f7ff bfe4 	b.w	8005680 <__malloc_unlock>
 80056b8:	42a3      	cmp	r3, r4
 80056ba:	d908      	bls.n	80056ce <_free_r+0x42>
 80056bc:	6820      	ldr	r0, [r4, #0]
 80056be:	1821      	adds	r1, r4, r0
 80056c0:	428b      	cmp	r3, r1
 80056c2:	bf01      	itttt	eq
 80056c4:	6819      	ldreq	r1, [r3, #0]
 80056c6:	685b      	ldreq	r3, [r3, #4]
 80056c8:	1809      	addeq	r1, r1, r0
 80056ca:	6021      	streq	r1, [r4, #0]
 80056cc:	e7ed      	b.n	80056aa <_free_r+0x1e>
 80056ce:	461a      	mov	r2, r3
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	b10b      	cbz	r3, 80056d8 <_free_r+0x4c>
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	d9fa      	bls.n	80056ce <_free_r+0x42>
 80056d8:	6811      	ldr	r1, [r2, #0]
 80056da:	1850      	adds	r0, r2, r1
 80056dc:	42a0      	cmp	r0, r4
 80056de:	d10b      	bne.n	80056f8 <_free_r+0x6c>
 80056e0:	6820      	ldr	r0, [r4, #0]
 80056e2:	4401      	add	r1, r0
 80056e4:	1850      	adds	r0, r2, r1
 80056e6:	4283      	cmp	r3, r0
 80056e8:	6011      	str	r1, [r2, #0]
 80056ea:	d1e0      	bne.n	80056ae <_free_r+0x22>
 80056ec:	6818      	ldr	r0, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	4401      	add	r1, r0
 80056f2:	6011      	str	r1, [r2, #0]
 80056f4:	6053      	str	r3, [r2, #4]
 80056f6:	e7da      	b.n	80056ae <_free_r+0x22>
 80056f8:	d902      	bls.n	8005700 <_free_r+0x74>
 80056fa:	230c      	movs	r3, #12
 80056fc:	602b      	str	r3, [r5, #0]
 80056fe:	e7d6      	b.n	80056ae <_free_r+0x22>
 8005700:	6820      	ldr	r0, [r4, #0]
 8005702:	1821      	adds	r1, r4, r0
 8005704:	428b      	cmp	r3, r1
 8005706:	bf01      	itttt	eq
 8005708:	6819      	ldreq	r1, [r3, #0]
 800570a:	685b      	ldreq	r3, [r3, #4]
 800570c:	1809      	addeq	r1, r1, r0
 800570e:	6021      	streq	r1, [r4, #0]
 8005710:	6063      	str	r3, [r4, #4]
 8005712:	6054      	str	r4, [r2, #4]
 8005714:	e7cb      	b.n	80056ae <_free_r+0x22>
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	20001a40 	.word	0x20001a40

0800571c <_read_r>:
 800571c:	b538      	push	{r3, r4, r5, lr}
 800571e:	4604      	mov	r4, r0
 8005720:	4608      	mov	r0, r1
 8005722:	4611      	mov	r1, r2
 8005724:	2200      	movs	r2, #0
 8005726:	4d05      	ldr	r5, [pc, #20]	; (800573c <_read_r+0x20>)
 8005728:	602a      	str	r2, [r5, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	f7fa ff52 	bl	80005d4 <_read>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d102      	bne.n	800573a <_read_r+0x1e>
 8005734:	682b      	ldr	r3, [r5, #0]
 8005736:	b103      	cbz	r3, 800573a <_read_r+0x1e>
 8005738:	6023      	str	r3, [r4, #0]
 800573a:	bd38      	pop	{r3, r4, r5, pc}
 800573c:	20001a48 	.word	0x20001a48

08005740 <_fstat_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	2300      	movs	r3, #0
 8005744:	4d06      	ldr	r5, [pc, #24]	; (8005760 <_fstat_r+0x20>)
 8005746:	4604      	mov	r4, r0
 8005748:	4608      	mov	r0, r1
 800574a:	4611      	mov	r1, r2
 800574c:	602b      	str	r3, [r5, #0]
 800574e:	f7fa ff85 	bl	800065c <_fstat>
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	d102      	bne.n	800575c <_fstat_r+0x1c>
 8005756:	682b      	ldr	r3, [r5, #0]
 8005758:	b103      	cbz	r3, 800575c <_fstat_r+0x1c>
 800575a:	6023      	str	r3, [r4, #0]
 800575c:	bd38      	pop	{r3, r4, r5, pc}
 800575e:	bf00      	nop
 8005760:	20001a48 	.word	0x20001a48

08005764 <_isatty_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	2300      	movs	r3, #0
 8005768:	4d05      	ldr	r5, [pc, #20]	; (8005780 <_isatty_r+0x1c>)
 800576a:	4604      	mov	r4, r0
 800576c:	4608      	mov	r0, r1
 800576e:	602b      	str	r3, [r5, #0]
 8005770:	f7fa ff83 	bl	800067a <_isatty>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_isatty_r+0x1a>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_isatty_r+0x1a>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	20001a48 	.word	0x20001a48

08005784 <_init>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr

08005790 <_fini>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr
